{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Longbridge OpenAPI SDK for Python longbridge provides an easy-to-use interface for invokes Longbridge OpenAPI . Quickstart Install Longbridge OpenAPI SDK pip install longbridge Setting environment variables(MacOS/Linux) export LONGBRIDGE_APP_KEY=\"App Key get from user center\" export LONGBRIDGE_APP_SECRET=\"App Secret get from user center\" export LONGBRIDGE_ACCESS_TOKEN=\"Access Token get from user center\" Setting environment variables(Windows) setx LONGBRIDGE_APP_KEY \"App Key get from user center\" setx LONGBRIDGE_APP_SECRET \"App Secret get from user center\" setx LONGBRIDGE_ACCESS_TOKEN \"Access Token get from user center\" Quote API (Get basic information of securities) from longbridge.openapi import Config, QuoteContext # Load configuration from environment variables config = Config.from_env() # Create a context for quote APIs ctx = QuoteContext(config) # Get basic information of securities resp = ctx.quote([\"700.HK\", \"AAPL.US\", \"TSLA.US\", \"NFLX.US\"]) print(resp) Quote API (Subscribe quotes) from time import sleep from longbridge.openapi import Config, QuoteContext, SubType, PushQuote # Load configuration from environment variables config = Config.from_env() class EventHandler: \"\"\" An event handler to receive push events \"\"\" def on_event(self, symbol: str, msg): \"\"\" Handle push events \"\"\" if isinstance(msg, PushQuote): print(symbol, msg) # Create a context for quote APIs ctx = QuoteContext(config, EventHandler()) # Subscribe resp = ctx.subscribe([\"700.HK\"], [SubType.Quote], is_first_push=True) # Receive push duration to 30 seconds sleep(30) Trade API (Submit order) from decimal import Decimal from longbridge.openapi import TradeContext, Config, OrderType, OrderSide, TimeInForceType # Load configuration from environment variables config = Config.from_env() # Create a context for trade APIs ctx = TradeContext(config) # Submit order resp = ctx.submit_order(\"700.HK\", OrderType.LO, OrderSide.Buy, Decimal( \"500\"), TimeInForceType.Day, submitted_price=Decimal(\"50\"), remark=\"Hello from Python SDK\") print(resp) License Licensed under either of Apache License, Version 2.0 ( LICENSE-APACHE ) MIT license LICENSE-MIT at your option.","title":"Index"},{"location":"#longbridge-openapi-sdk-for-python","text":"longbridge provides an easy-to-use interface for invokes Longbridge OpenAPI .","title":"Longbridge OpenAPI SDK for Python"},{"location":"#quickstart","text":"Install Longbridge OpenAPI SDK pip install longbridge Setting environment variables(MacOS/Linux) export LONGBRIDGE_APP_KEY=\"App Key get from user center\" export LONGBRIDGE_APP_SECRET=\"App Secret get from user center\" export LONGBRIDGE_ACCESS_TOKEN=\"Access Token get from user center\" Setting environment variables(Windows) setx LONGBRIDGE_APP_KEY \"App Key get from user center\" setx LONGBRIDGE_APP_SECRET \"App Secret get from user center\" setx LONGBRIDGE_ACCESS_TOKEN \"Access Token get from user center\"","title":"Quickstart"},{"location":"#quote-api-get-basic-information-of-securities","text":"from longbridge.openapi import Config, QuoteContext # Load configuration from environment variables config = Config.from_env() # Create a context for quote APIs ctx = QuoteContext(config) # Get basic information of securities resp = ctx.quote([\"700.HK\", \"AAPL.US\", \"TSLA.US\", \"NFLX.US\"]) print(resp)","title":"Quote API (Get basic information of securities)"},{"location":"#quote-api-subscribe-quotes","text":"from time import sleep from longbridge.openapi import Config, QuoteContext, SubType, PushQuote # Load configuration from environment variables config = Config.from_env() class EventHandler: \"\"\" An event handler to receive push events \"\"\" def on_event(self, symbol: str, msg): \"\"\" Handle push events \"\"\" if isinstance(msg, PushQuote): print(symbol, msg) # Create a context for quote APIs ctx = QuoteContext(config, EventHandler()) # Subscribe resp = ctx.subscribe([\"700.HK\"], [SubType.Quote], is_first_push=True) # Receive push duration to 30 seconds sleep(30)","title":"Quote API (Subscribe quotes)"},{"location":"#trade-api-submit-order","text":"from decimal import Decimal from longbridge.openapi import TradeContext, Config, OrderType, OrderSide, TimeInForceType # Load configuration from environment variables config = Config.from_env() # Create a context for trade APIs ctx = TradeContext(config) # Submit order resp = ctx.submit_order(\"700.HK\", OrderType.LO, OrderSide.Buy, Decimal( \"500\"), TimeInForceType.Day, submitted_price=Decimal(\"50\"), remark=\"Hello from Python SDK\") print(resp)","title":"Trade API (Submit order)"},{"location":"#license","text":"Licensed under either of Apache License, Version 2.0 ( LICENSE-APACHE ) MIT license LICENSE-MIT at your option.","title":"License"},{"location":"config/","text":"Config Configuration options for Longbridge sdk Parameters: Name Type Description Default app_key str App Key required app_secret str App Secret required access_token str Access Token required http_url str HTTP API url 'https://openapi.longbridgeapp.com' quote_ws_url str Websocket url for quote API 'wss://openapi-quote.longbridgeapp.com' trade_ws_url str Websocket url for trade API 'wss://openapi-trade.longbridgeapp.com' __init__(app_key, app_secret, access_token, http_url='https://openapi.longbridgeapp.com', quote_ws_url='wss://openapi-quote.longbridgeapp.com', trade_ws_url='wss://openapi-trade.longbridgeapp.com') from_env() classmethod Create a new Config from the given environment variables Variables LONGBRIDGE_APP_KEY - App key LONGBRIDGE_APP_SECRET - App secret LONGBRIDGE_ACCESS_TOKEN - Access token LONGBRIDGE_HTTP_URL - HTTP endpoint url LONGBRIDGE_QUOTE_WS_URL - Quote websocket endpoint url LONGBRIDGE_TRADE_WS_URL - Trade websocket endpoint url","title":"Config"},{"location":"config/#config","text":"Configuration options for Longbridge sdk Parameters: Name Type Description Default app_key str App Key required app_secret str App Secret required access_token str Access Token required http_url str HTTP API url 'https://openapi.longbridgeapp.com' quote_ws_url str Websocket url for quote API 'wss://openapi-quote.longbridgeapp.com' trade_ws_url str Websocket url for trade API 'wss://openapi-trade.longbridgeapp.com'","title":"Config"},{"location":"config/#longbridge.openapi.Config.__init__","text":"","title":"__init__()"},{"location":"config/#longbridge.openapi.Config.from_env","text":"Create a new Config from the given environment variables","title":"from_env()"},{"location":"config/#longbridge.openapi.Config.from_env--variables","text":"LONGBRIDGE_APP_KEY - App key LONGBRIDGE_APP_SECRET - App secret LONGBRIDGE_ACCESS_TOKEN - Access token LONGBRIDGE_HTTP_URL - HTTP endpoint url LONGBRIDGE_QUOTE_WS_URL - Quote websocket endpoint url LONGBRIDGE_TRADE_WS_URL - Trade websocket endpoint url","title":"Variables"},{"location":"quote_context/","text":"QuoteContext Quote context Parameters: Name Type Description Default config Config Configuration object required handler Optional [ QuoteHandler ] Push message handler None __init__(config, handler=None) subscribe(symbols, sub_types, is_first_push=False) Subscribe Parameters: Name Type Description Default symbols List [ str ] Security codes required sub_types List [ Type [ SubType ]] Subscribe types required is_first_push bool Whether to perform a data push immediately after subscribing. (trade not supported) False Examples: :: from time import sleep from longbridge.openapi import QuoteContext, Config, SubType class EventHandler: def on_event(self, symbol: str, msg): print(symbol, msg) config = Config.from_env() ctx = QuoteContext(config, EventHandler()) ctx.subscribe([\"700.HK\", \"AAPL.US\"], [SubType.Quote], is_first_push = True) sleep(30) unsubscribe(symbols, sub_types) Unsubscribe Parameters: Name Type Description Default symbols List [ str ] Security codes required sub_types List [ Type [ SubType ]] Subscribe types required Examples: :: from longbridge.openapi import QuoteContext, Config, SubType config = Config.from_env() ctx = QuoteContext(config) ctx.subscribe([\"700.HK\", \"AAPL.US\"], [SubType.Quote]) ctx.unsubscribe([\"AAPL.US\"], [SubType.Quote]) subscriptions() Get subscription information Examples: :: from longbridge.openapi import QuoteContext, Config, SubType config = Config.from_env() ctx = QuoteContext(config) ctx.subscribe([\"700.HK\", \"AAPL.US\"], [SubType.Quote]) resp = ctx.subscriptions() print(resp) static_info(symbols) Get basic information of securities Parameters: Name Type Description Default symbols List [ str ] Security codes required Returns: Type Description List [ SecurityStaticInfo ] Security info list Examples: :: from longbridge.openapi import QuoteContext, Config config = Config.from_env() ctx = QuoteContext(config) resp = ctx.static_info([\"700.HK\", \"AAPL.US\", \"TSLA.US\", \"NFLX.US\"]) print(resp) quote(symbols) Get quote of securities Parameters: Name Type Description Default symbols List [ str ] Security codes required Returns: Type Description List [ SecurityQuote ] Security quote list Examples: :: from longbridge.openapi import QuoteContext, Config config = Config.from_env() ctx = QuoteContext(config) resp = ctx.quote([\"700.HK\", \"AAPL.US\", \"TSLA.US\", \"NFLX.US\"]) print(resp) option_quote(symbols) Get quote of option securities Parameters: Name Type Description Default symbols List [ str ] Security codes required Returns: Type Description List [ OptionQuote ] Option quote list Examples: :: from longbridge.openapi import QuoteContext, Config config = Config.from_env() ctx = QuoteContext(config) resp = ctx.option_quote([\"AAPL230317P160000.US\"]) print(resp) warrant_quote(symbols) Get quote of warrant securities Parameters: Name Type Description Default symbols List [ str ] Security codes required Returns: Type Description List [ WarrantQuote ] Warrant quote list Examples: :: from longbridge.openapi import QuoteContext, Config config = Config.from_env() ctx = QuoteContext(config) resp = ctx.warrant_quote([\"21125.HK\"]) print(resp) depth(symbol) Get security depth Parameters: Name Type Description Default symbol str Security code required Returns: Type Description SecurityDepth Security depth Examples: :: from longbridge.openapi import QuoteContext, Config config = Config.from_env() ctx = QuoteContext(config) resp = ctx.depth(\"700.HK\") print(resp) brokers(symbol) Get security brokers Parameters: Name Type Description Default symbol str Security code required Returns: Type Description SecurityBrokers Security brokers Examples: :: from longbridge.openapi import QuoteContext, Config config = Config.from_env() ctx = QuoteContext(config) resp = ctx.brokers(\"700.HK\") print(resp) participants() Get participants Returns: Type Description List [ ParticipantInfo ] Participants Examples: :: from longbridge.openapi import QuoteContext, Config config = Config.from_env() ctx = QuoteContext(config) resp = ctx.participants() print(resp) trades(symbol, count) Get security trades Parameters: Name Type Description Default symbol str Security code required count int Count of trades (Maximum is 1000 ) required Returns: Type Description List [ Trade ] Trades Examples: :: from longbridge.openapi import QuoteContext, Config config = Config.from_env() ctx = QuoteContext(config) resp = ctx.trades(\"700.HK\", 10) print(resp) intraday(symbol) Get security intraday lines Parameters: Name Type Description Default symbol str Security code required Returns: Type Description List [ IntradayLine ] Intraday lines Examples: :: from longbridge.openapi import QuoteContext, Config config = Config.from_env() ctx = QuoteContext(config) resp = ctx.intraday(\"700.HK\") print(resp) candlesticks(symbol, period, count, adjust_type) Get security candlesticks Parameters: Name Type Description Default symbol str Security code required period Type [ Period ] Candlestick period required count int Count of cancdlestick (Maximum is 1000 ) required adjust_type Type [ AdjustType ] Adjustment type required Returns: Type Description List [ Candlestick ] Candlesticks Examples: :: from longbridge.openapi import QuoteContext, Config, Period, AdjustType config = Config.from_env() ctx = QuoteContext(config) resp = ctx.candlesticks(\"700.HK\", Period.Day, 10, AdjustType.NoAdjust) print(resp) option_chain_expiry_date_list(symbol) Get option chain expiry date list Parameters: Name Type Description Default symbol str Security code required Returns: Type Description List [ date ] Option chain expiry date list Examples: :: from longbridge.openapi import QuoteContext, Config config = Config.from_env() ctx = QuoteContext(config) resp = ctx.option_chain_expiry_date_list(\"AAPL.US\") print(resp) option_chain_info_by_date(symbol, expiry_date) Get option chain info by date Parameters: Name Type Description Default symbol str Security code required expiry_date date Expiry date required Returns: Type Description List [ StrikePriceInfo ] Option chain info Examples: :: from datetime import date from longbridge.openapi import QuoteContext, Config config = Config.from_env() ctx = QuoteContext(config) resp = ctx.option_chain_info_by_date(\"AAPL.US\", date(2023, 1, 20)) print(resp) warrant_issuers() Get warrant issuers Returns: Type Description List [ IssuerInfo ] Warrant issuers Examples: :: from longbridge.openapi import QuoteContext, Config config = Config.from_env() ctx = QuoteContext(config) resp = ctx.warrant_issuers() print(resp) trading_session() Get trading session of the day Returns: Type Description List [ MarketTradingSession ] Trading session of the day Examples: :: from longbridge.openapi import QuoteContext, Config config = Config.from_env() ctx = QuoteContext(config) resp = ctx.trading_session() print(resp) trading_days(market, begin, end) Get trading session of the day The interval must be less than one month, and only the most recent year is supported. Parameters: Name Type Description Default market Type [ Market ] Market required begin date Begin date required end date End date required Returns: Type Description MarketTradingDays Trading days Examples: :: from datetime import date from longbridge.openapi import QuoteContext, Config, Market config = Config.from_env() ctx = QuoteContext(config) resp = ctx.trading_days(Market.HK, date(2022, 1, 1), date(2022, 2, 1)) print(resp) realtime_quote(symbols) Get real-time quote Get real-time quotes of the subscribed symbols, it always returns the data in the local storage. Parameters: Name Type Description Default symbols List [ str ] Security codes required Returns: Type Description List [ RealtimeQuote ] Quote list Examples: :: from time import sleep from longbridge.openapi import QuoteContext, Config, SubType config = Config.from_env() ctx = QuoteContext(config) ctx.subscribe([\"HK.700\", \"AAPL.US\"], [SubType.Quote], is_first_push = True) sleep(5) resp = ctx.realtime_quote([\"HK.700\", \"AAPL.US\"]) print(resp) realtime_depth(symbol) Get real-time depth Get real-time depth of the subscribed symbols, it always returns the data in the local storage. Parameters: Name Type Description Default symbol str Security code required Returns: Type Description SecurityDepth Security depth Examples: :: from time import sleep from longbridge.openapi import QuoteContext, Config, SubType config = Config.from_env() ctx = QuoteContext(config) ctx.subscribe([\"HK.700\", \"AAPL.US\"], [SubType.Depth], is_first_push = True) sleep(5) resp = ctx.realtime_depth(\"HK.700\") print(resp) realtime_brokers(symbol) Get real-time brokers Get real-time brokers of the subscribed symbols, it always returns the data in the local storage. Parameters: Name Type Description Default symbol str Security code required Returns: Type Description SecurityBrokers Security brokers Examples: :: from time import sleep from longbridge.openapi import QuoteContext, Config, SubType config = Config.from_env() ctx = QuoteContext(config) ctx.subscribe([\"HK.700\", \"AAPL.US\"], [SubType.Brokers], is_first_push = True) sleep(5) resp = ctx.realtime_brokers(\"HK.700\") print(resp) realtime_trades(symbol, count) Get real-time trades Get real-time trades of the subscribed symbols, it always returns the data in the local storage. Parameters: Name Type Description Default symbol str Security code required count int Count of trades required Returns: Type Description List [ Trade ] Security trades Examples: :: from time import sleep from longbridge.openapi import QuoteContext, Config, SubType config = Config.from_env() ctx = QuoteContext(config) ctx.subscribe([\"HK.700\", \"AAPL.US\"], [SubType.Trade], is_first_push = False) sleep(5) resp = ctx.realtime_trades(\"HK.700\", 10) print(resp)","title":"QuoteContext"},{"location":"quote_context/#quotecontext","text":"Quote context Parameters: Name Type Description Default config Config Configuration object required handler Optional [ QuoteHandler ] Push message handler None","title":"QuoteContext"},{"location":"quote_context/#longbridge.openapi.QuoteContext.__init__","text":"","title":"__init__()"},{"location":"quote_context/#longbridge.openapi.QuoteContext.subscribe","text":"Subscribe Parameters: Name Type Description Default symbols List [ str ] Security codes required sub_types List [ Type [ SubType ]] Subscribe types required is_first_push bool Whether to perform a data push immediately after subscribing. (trade not supported) False Examples: :: from time import sleep from longbridge.openapi import QuoteContext, Config, SubType class EventHandler: def on_event(self, symbol: str, msg): print(symbol, msg) config = Config.from_env() ctx = QuoteContext(config, EventHandler()) ctx.subscribe([\"700.HK\", \"AAPL.US\"], [SubType.Quote], is_first_push = True) sleep(30)","title":"subscribe()"},{"location":"quote_context/#longbridge.openapi.QuoteContext.unsubscribe","text":"Unsubscribe Parameters: Name Type Description Default symbols List [ str ] Security codes required sub_types List [ Type [ SubType ]] Subscribe types required Examples: :: from longbridge.openapi import QuoteContext, Config, SubType config = Config.from_env() ctx = QuoteContext(config) ctx.subscribe([\"700.HK\", \"AAPL.US\"], [SubType.Quote]) ctx.unsubscribe([\"AAPL.US\"], [SubType.Quote])","title":"unsubscribe()"},{"location":"quote_context/#longbridge.openapi.QuoteContext.subscriptions","text":"Get subscription information Examples: :: from longbridge.openapi import QuoteContext, Config, SubType config = Config.from_env() ctx = QuoteContext(config) ctx.subscribe([\"700.HK\", \"AAPL.US\"], [SubType.Quote]) resp = ctx.subscriptions() print(resp)","title":"subscriptions()"},{"location":"quote_context/#longbridge.openapi.QuoteContext.static_info","text":"Get basic information of securities Parameters: Name Type Description Default symbols List [ str ] Security codes required Returns: Type Description List [ SecurityStaticInfo ] Security info list Examples: :: from longbridge.openapi import QuoteContext, Config config = Config.from_env() ctx = QuoteContext(config) resp = ctx.static_info([\"700.HK\", \"AAPL.US\", \"TSLA.US\", \"NFLX.US\"]) print(resp)","title":"static_info()"},{"location":"quote_context/#longbridge.openapi.QuoteContext.quote","text":"Get quote of securities Parameters: Name Type Description Default symbols List [ str ] Security codes required Returns: Type Description List [ SecurityQuote ] Security quote list Examples: :: from longbridge.openapi import QuoteContext, Config config = Config.from_env() ctx = QuoteContext(config) resp = ctx.quote([\"700.HK\", \"AAPL.US\", \"TSLA.US\", \"NFLX.US\"]) print(resp)","title":"quote()"},{"location":"quote_context/#longbridge.openapi.QuoteContext.option_quote","text":"Get quote of option securities Parameters: Name Type Description Default symbols List [ str ] Security codes required Returns: Type Description List [ OptionQuote ] Option quote list Examples: :: from longbridge.openapi import QuoteContext, Config config = Config.from_env() ctx = QuoteContext(config) resp = ctx.option_quote([\"AAPL230317P160000.US\"]) print(resp)","title":"option_quote()"},{"location":"quote_context/#longbridge.openapi.QuoteContext.warrant_quote","text":"Get quote of warrant securities Parameters: Name Type Description Default symbols List [ str ] Security codes required Returns: Type Description List [ WarrantQuote ] Warrant quote list Examples: :: from longbridge.openapi import QuoteContext, Config config = Config.from_env() ctx = QuoteContext(config) resp = ctx.warrant_quote([\"21125.HK\"]) print(resp)","title":"warrant_quote()"},{"location":"quote_context/#longbridge.openapi.QuoteContext.depth","text":"Get security depth Parameters: Name Type Description Default symbol str Security code required Returns: Type Description SecurityDepth Security depth Examples: :: from longbridge.openapi import QuoteContext, Config config = Config.from_env() ctx = QuoteContext(config) resp = ctx.depth(\"700.HK\") print(resp)","title":"depth()"},{"location":"quote_context/#longbridge.openapi.QuoteContext.brokers","text":"Get security brokers Parameters: Name Type Description Default symbol str Security code required Returns: Type Description SecurityBrokers Security brokers Examples: :: from longbridge.openapi import QuoteContext, Config config = Config.from_env() ctx = QuoteContext(config) resp = ctx.brokers(\"700.HK\") print(resp)","title":"brokers()"},{"location":"quote_context/#longbridge.openapi.QuoteContext.participants","text":"Get participants Returns: Type Description List [ ParticipantInfo ] Participants Examples: :: from longbridge.openapi import QuoteContext, Config config = Config.from_env() ctx = QuoteContext(config) resp = ctx.participants() print(resp)","title":"participants()"},{"location":"quote_context/#longbridge.openapi.QuoteContext.trades","text":"Get security trades Parameters: Name Type Description Default symbol str Security code required count int Count of trades (Maximum is 1000 ) required Returns: Type Description List [ Trade ] Trades Examples: :: from longbridge.openapi import QuoteContext, Config config = Config.from_env() ctx = QuoteContext(config) resp = ctx.trades(\"700.HK\", 10) print(resp)","title":"trades()"},{"location":"quote_context/#longbridge.openapi.QuoteContext.intraday","text":"Get security intraday lines Parameters: Name Type Description Default symbol str Security code required Returns: Type Description List [ IntradayLine ] Intraday lines Examples: :: from longbridge.openapi import QuoteContext, Config config = Config.from_env() ctx = QuoteContext(config) resp = ctx.intraday(\"700.HK\") print(resp)","title":"intraday()"},{"location":"quote_context/#longbridge.openapi.QuoteContext.candlesticks","text":"Get security candlesticks Parameters: Name Type Description Default symbol str Security code required period Type [ Period ] Candlestick period required count int Count of cancdlestick (Maximum is 1000 ) required adjust_type Type [ AdjustType ] Adjustment type required Returns: Type Description List [ Candlestick ] Candlesticks Examples: :: from longbridge.openapi import QuoteContext, Config, Period, AdjustType config = Config.from_env() ctx = QuoteContext(config) resp = ctx.candlesticks(\"700.HK\", Period.Day, 10, AdjustType.NoAdjust) print(resp)","title":"candlesticks()"},{"location":"quote_context/#longbridge.openapi.QuoteContext.option_chain_expiry_date_list","text":"Get option chain expiry date list Parameters: Name Type Description Default symbol str Security code required Returns: Type Description List [ date ] Option chain expiry date list Examples: :: from longbridge.openapi import QuoteContext, Config config = Config.from_env() ctx = QuoteContext(config) resp = ctx.option_chain_expiry_date_list(\"AAPL.US\") print(resp)","title":"option_chain_expiry_date_list()"},{"location":"quote_context/#longbridge.openapi.QuoteContext.option_chain_info_by_date","text":"Get option chain info by date Parameters: Name Type Description Default symbol str Security code required expiry_date date Expiry date required Returns: Type Description List [ StrikePriceInfo ] Option chain info Examples: :: from datetime import date from longbridge.openapi import QuoteContext, Config config = Config.from_env() ctx = QuoteContext(config) resp = ctx.option_chain_info_by_date(\"AAPL.US\", date(2023, 1, 20)) print(resp)","title":"option_chain_info_by_date()"},{"location":"quote_context/#longbridge.openapi.QuoteContext.warrant_issuers","text":"Get warrant issuers Returns: Type Description List [ IssuerInfo ] Warrant issuers Examples: :: from longbridge.openapi import QuoteContext, Config config = Config.from_env() ctx = QuoteContext(config) resp = ctx.warrant_issuers() print(resp)","title":"warrant_issuers()"},{"location":"quote_context/#longbridge.openapi.QuoteContext.trading_session","text":"Get trading session of the day Returns: Type Description List [ MarketTradingSession ] Trading session of the day Examples: :: from longbridge.openapi import QuoteContext, Config config = Config.from_env() ctx = QuoteContext(config) resp = ctx.trading_session() print(resp)","title":"trading_session()"},{"location":"quote_context/#longbridge.openapi.QuoteContext.trading_days","text":"Get trading session of the day The interval must be less than one month, and only the most recent year is supported. Parameters: Name Type Description Default market Type [ Market ] Market required begin date Begin date required end date End date required Returns: Type Description MarketTradingDays Trading days Examples: :: from datetime import date from longbridge.openapi import QuoteContext, Config, Market config = Config.from_env() ctx = QuoteContext(config) resp = ctx.trading_days(Market.HK, date(2022, 1, 1), date(2022, 2, 1)) print(resp)","title":"trading_days()"},{"location":"quote_context/#longbridge.openapi.QuoteContext.realtime_quote","text":"Get real-time quote Get real-time quotes of the subscribed symbols, it always returns the data in the local storage. Parameters: Name Type Description Default symbols List [ str ] Security codes required Returns: Type Description List [ RealtimeQuote ] Quote list Examples: :: from time import sleep from longbridge.openapi import QuoteContext, Config, SubType config = Config.from_env() ctx = QuoteContext(config) ctx.subscribe([\"HK.700\", \"AAPL.US\"], [SubType.Quote], is_first_push = True) sleep(5) resp = ctx.realtime_quote([\"HK.700\", \"AAPL.US\"]) print(resp)","title":"realtime_quote()"},{"location":"quote_context/#longbridge.openapi.QuoteContext.realtime_depth","text":"Get real-time depth Get real-time depth of the subscribed symbols, it always returns the data in the local storage. Parameters: Name Type Description Default symbol str Security code required Returns: Type Description SecurityDepth Security depth Examples: :: from time import sleep from longbridge.openapi import QuoteContext, Config, SubType config = Config.from_env() ctx = QuoteContext(config) ctx.subscribe([\"HK.700\", \"AAPL.US\"], [SubType.Depth], is_first_push = True) sleep(5) resp = ctx.realtime_depth(\"HK.700\") print(resp)","title":"realtime_depth()"},{"location":"quote_context/#longbridge.openapi.QuoteContext.realtime_brokers","text":"Get real-time brokers Get real-time brokers of the subscribed symbols, it always returns the data in the local storage. Parameters: Name Type Description Default symbol str Security code required Returns: Type Description SecurityBrokers Security brokers Examples: :: from time import sleep from longbridge.openapi import QuoteContext, Config, SubType config = Config.from_env() ctx = QuoteContext(config) ctx.subscribe([\"HK.700\", \"AAPL.US\"], [SubType.Brokers], is_first_push = True) sleep(5) resp = ctx.realtime_brokers(\"HK.700\") print(resp)","title":"realtime_brokers()"},{"location":"quote_context/#longbridge.openapi.QuoteContext.realtime_trades","text":"Get real-time trades Get real-time trades of the subscribed symbols, it always returns the data in the local storage. Parameters: Name Type Description Default symbol str Security code required count int Count of trades required Returns: Type Description List [ Trade ] Security trades Examples: :: from time import sleep from longbridge.openapi import QuoteContext, Config, SubType config = Config.from_env() ctx = QuoteContext(config) ctx.subscribe([\"HK.700\", \"AAPL.US\"], [SubType.Trade], is_first_push = False) sleep(5) resp = ctx.realtime_trades(\"HK.700\", 10) print(resp)","title":"realtime_trades()"},{"location":"reference_all/","text":"Code Reference Config Configuration options for Longbridge sdk Parameters: Name Type Description Default app_key str App Key required app_secret str App Secret required access_token str Access Token required http_url str HTTP API url 'https://openapi.longbridgeapp.com' quote_ws_url str Websocket url for quote API 'wss://openapi-quote.longbridgeapp.com' trade_ws_url str Websocket url for trade API 'wss://openapi-trade.longbridgeapp.com' __init__(app_key, app_secret, access_token, http_url='https://openapi.longbridgeapp.com', quote_ws_url='wss://openapi-quote.longbridgeapp.com', trade_ws_url='wss://openapi-trade.longbridgeapp.com') from_env() classmethod Create a new Config from the given environment variables Variables LONGBRIDGE_APP_KEY - App key LONGBRIDGE_APP_SECRET - App secret LONGBRIDGE_ACCESS_TOKEN - Access token LONGBRIDGE_HTTP_URL - HTTP endpoint url LONGBRIDGE_QUOTE_WS_URL - Quote websocket endpoint url LONGBRIDGE_TRADE_WS_URL - Trade websocket endpoint url Market Market Unknown Bases: Market Unknown US Bases: Market US market HK Bases: Market HK market CN Bases: Market CN market SG Bases: Market SG market PushQuote Quote message last_done: Decimal class-attribute Latest price open: Decimal class-attribute Open high: Decimal class-attribute High low: Decimal class-attribute Low timestamp: datetime class-attribute Time of latest price volume: int class-attribute Volume turnover: Decimal class-attribute Turnover trade_status: Type[TradeStatus] class-attribute Security trading status trade_session: Type[TradeSession] class-attribute Trade session PushDepth Depth message asks: List[Depth] class-attribute Ask depth bids: List[Depth] class-attribute Bid depth PushBrokers Brokers message ask_brokers: List[Brokers] class-attribute Ask brokers bid_brokers: List[Brokers] class-attribute Bid brokers PushTrades Trades message trades: List[Trade] class-attribute Trades data QuoteHandler Bases: Protocol Quote push message handler on_event(symbol, msg) Called when a new message is received SubType Subscription flags Quote Bases: SubType Quote Depth Bases: SubType Depth Brokers Bases: SubType Broker Trade Bases: SubType Trade DerivativeType Derivative type Option Bases: DerivativeType US stock options Warrant Bases: DerivativeType HK warrants SecurityStaticInfo The basic information of securities symbol: str class-attribute Security code name_cn: str class-attribute Security name (zh-CN) name_en: str class-attribute Security name (en) name_hk: str class-attribute Security name (zh-HK) exchange: str class-attribute Exchange which the security belongs to currency: str class-attribute Trading currency lot_size: int class-attribute Lot size total_shares: int class-attribute Total shares circulating_shares: int class-attribute Circulating shares hk_shares: int class-attribute HK shares (only HK stocks) eps: Decimal class-attribute Earnings per share eps_ttm: Decimal class-attribute Earnings per share (TTM) bps: Decimal class-attribute Net assets per share dividend_yield: Decimal class-attribute Dividend yield stock_derivatives: List[Type[DerivativeType]] class-attribute Types of supported derivatives TradeStatus Security Status Normal Bases: TradeStatus Normal Halted Bases: TradeStatus Suspension Delisted Bases: TradeStatus Delisted Fuse Bases: TradeStatus Fuse PrepareList Bases: TradeStatus Prepare List CodeMoved Bases: TradeStatus Code Moved ToBeOpened Bases: TradeStatus To Be Opened SplitStockHalts Bases: TradeStatus Split Stock Halts Expired Bases: TradeStatus Expired WarrantPrepareList Bases: TradeStatus Warrant To BeListed SuspendTrade Bases: TradeStatus Suspend PrePostQuote Quote of US pre/post market last_done: Decimal class-attribute Latest price timestamp: datetime class-attribute Time of latest price volume: int class-attribute Volume turnover: Decimal class-attribute Turnover high: Decimal class-attribute High low: Decimal class-attribute Low prev_close: Decimal class-attribute Close of the last trade session SecurityQuote Quote of securitity symbol: str class-attribute Security code last_done: Decimal class-attribute Latest price prev_close: Decimal class-attribute Yesterday's close open: Decimal class-attribute Open high: Decimal class-attribute High low: Decimal class-attribute Low timestamp: datetime class-attribute Time of latest price volume: int class-attribute Volume turnover: Decimal class-attribute Turnover trade_status: Type[TradeStatus] class-attribute Security trading status pre_market_quote: Optional[PrePostQuote] class-attribute Quote of US pre market post_market_quote: Optional[PrePostQuote] class-attribute Quote of US post market OptionType Option type Unknown Bases: OptionType Unknown American Bases: OptionType American Europe Bases: OptionType Europe OptionDirection Option direction Unknown Bases: OptionDirection Unknown Put Bases: OptionDirection Put Call Bases: OptionDirection Call OptionQuote Quote of option symbol: str class-attribute Security code last_done: Decimal class-attribute Latest price prev_close: Decimal class-attribute Yesterday's close open: Decimal class-attribute Open high: Decimal class-attribute High low: Decimal class-attribute Low timestamp: datetime class-attribute Time of latest price volume: int class-attribute Volume turnover: Decimal class-attribute Turnover trade_status: Type[TradeStatus] class-attribute Security trading status implied_volatility: Decimal class-attribute Implied volatility open_interest: int class-attribute Number of open positions expiry_date: date class-attribute Exprity date strike_price: Decimal class-attribute Strike price contract_multiplier: Decimal class-attribute Contract multiplier contract_type: Type[OptionType] class-attribute Option type contract_size: Decimal class-attribute Contract size direction: Type[OptionDirection] class-attribute Option direction historical_volatility: Decimal class-attribute Underlying security historical volatility of the option underlying_symbol: str class-attribute Underlying security symbol of the option WarrantType Warrant type Unknown Bases: WarrantType Unknown Call Bases: WarrantType Call Put Bases: WarrantType Put Bull Bases: WarrantType Bull Bear Bases: WarrantType Bear Inline Bases: WarrantType Inline WarrantQuote Quote of warrant symbol: str class-attribute Security code last_done: Decimal class-attribute Latest price prev_close: Decimal class-attribute Yesterday's close open: Decimal class-attribute Open high: Decimal class-attribute High low: Decimal class-attribute Low timestamp: datetime class-attribute Time of latest price volume: int class-attribute Volume turnover: Decimal class-attribute Turnover trade_status: Type[TradeStatus] class-attribute Security trading status implied_volatility: Decimal class-attribute Implied volatility expiry_date: date class-attribute Exprity date last_trade_date: date class-attribute Last tradalbe date outstanding_ratio: Decimal class-attribute Outstanding ratio outstanding_qty: int class-attribute Outstanding quantity conversion_ratio: Decimal class-attribute Conversion ratio category: Type[WarrantType] class-attribute Warrant type strike_price: Decimal class-attribute Strike price upper_strike_price: Decimal class-attribute Upper bound price lower_strike_price: Decimal class-attribute Lower bound price call_price: Decimal class-attribute Call price underlying_symbol: str class-attribute Underlying security symbol of the warrant Depth Depth position: int class-attribute Position price: Decimal class-attribute Price volume: int class-attribute Volume order_num: int class-attribute Number of orders SecurityDepth Security depth asks: List[Depth] class-attribute Bid depth Brokers Brokers position: int class-attribute Position broker_ids: List[int] class-attribute Broker IDs SecurityBrokers Security brokers ask_brokers: List[Brokers] class-attribute Ask brokers bid_brokers: List[Brokers] class-attribute Bid brokers ParticipantInfo Participant info broker_ids: List[int] class-attribute Broker IDs name_cn: str class-attribute Participant name (zh-CN) name_en: str class-attribute Participant name (en) name_hk: str class-attribute Participant name (zh-HK) TradeDirection Trade direction Neutral Bases: TradeDirection Neutral Down Bases: TradeDirection Down Up Bases: TradeDirection Up TradeSession Trade session Normal Bases: TradeSession Trading Pre Bases: TradeSession Pre-Trading Post Bases: TradeSession Post-Trading Trade Trade price: Decimal class-attribute Price volume: int class-attribute Volume timestamp: datetime class-attribute Time of trading trade_type: str class-attribute Trade type HK * - Overseas trade D - Odd-lot trade M - Non-direct off-exchange trade P - Late trade (Off-exchange previous day) U - Auction trade X - Direct off-exchange trade Y - Automatch internalized <empty string> - Automatch normal US <empty string> - Regular sale A - Acquisition B - Bunched trade D - Distribution F - Intermarket sweep G - Bunched sold trades H - Price variation trade I - Odd lot trade K - Rule 155 trde(NYSE MKT) M - Market center close price P - Prior reference price Q - Market center open price S - Split trade V - Contingent trade W - Average price trade X - Cross trade 1 - Stopped stock(Regular trade) direction: Type[TradeDirection] class-attribute Trade direction trade_session: Type[TradeSession] class-attribute Trade session IntradayLine Intraday line price: Decimal class-attribute Close price of the minute timestamp: datetime class-attribute Start time of the minute volume: int class-attribute Volume turnover: Decimal class-attribute Turnover avg_price: Decimal class-attribute Average price Candlestick Candlestick close: Decimal class-attribute Close price open: Decimal class-attribute Open price low: Decimal class-attribute Low price high: Decimal class-attribute High price volume: int class-attribute Volume turnover: Decimal class-attribute Turnover timestamp: datetime class-attribute Timestamp AdjustType Candlestick adjustment type NoAdjust Bases: AdjustType Actual ForwardAdjust Bases: AdjustType Adjust forward Period Candlestick period Min_1 Bases: Period One Minute Min_5 Bases: Period Five Minutes Min_15 Bases: Period Fifteen Minutes Min_30 Bases: Period Thirty Minutes Min_60 Bases: Period Sixty Minutes Day Bases: Period One Days Week Bases: Period One Week Month Bases: Period One Month Year Bases: Period One Year StrikePriceInfo Strike price info price: Decimal class-attribute Strike price call_symbol: str class-attribute Security code of call option put_symbol: str class-attribute Security code of put option standard: bool class-attribute Is standard IssuerInfo Issuer info issuer_id: int class-attribute Issuer ID name_cn: str class-attribute Issuer name (zh-CN) name_en: str class-attribute Issuer name (en) name_hk: str class-attribute Issuer name (zh-HK) TradingSessionInfo The information of trading session begin_time: time class-attribute Being trading time end_time: time class-attribute End trading time trade_session: Type[TradeSession] class-attribute Trading session MarketTradingSession Market trading session market: Type[Market] class-attribute Market trade_session: List[TradingSessionInfo] class-attribute Trading session MarketTradingDays trading_days: List[date] class-attribute half_trading_days: List[date] class-attribute RealtimeQuote Real-time quote symbol: str class-attribute Security code last_done: Decimal class-attribute Latest price open: Decimal class-attribute Open high: Decimal class-attribute High low: Decimal class-attribute Low timestamp: datetime class-attribute Time of latest price volume: int class-attribute Volume turnover: Decimal class-attribute Turnover trade_status: Type[TradeStatus] class-attribute Security trading status Subscription Subscription symbol: str class-attribute Security code sub_types: List[SubType] class-attribute Subscription types QuoteContext Quote context Parameters: Name Type Description Default config Config Configuration object required handler Optional [ QuoteHandler ] Push message handler None __init__(config, handler=None) subscribe(symbols, sub_types, is_first_push=False) Subscribe Parameters: Name Type Description Default symbols List [ str ] Security codes required sub_types List [ Type [ SubType ]] Subscribe types required is_first_push bool Whether to perform a data push immediately after subscribing. (trade not supported) False Examples: :: from time import sleep from longbridge.openapi import QuoteContext, Config, SubType class EventHandler: def on_event(self, symbol: str, msg): print(symbol, msg) config = Config.from_env() ctx = QuoteContext(config, EventHandler()) ctx.subscribe([\"700.HK\", \"AAPL.US\"], [SubType.Quote], is_first_push = True) sleep(30) unsubscribe(symbols, sub_types) Unsubscribe Parameters: Name Type Description Default symbols List [ str ] Security codes required sub_types List [ Type [ SubType ]] Subscribe types required Examples: :: from longbridge.openapi import QuoteContext, Config, SubType config = Config.from_env() ctx = QuoteContext(config) ctx.subscribe([\"700.HK\", \"AAPL.US\"], [SubType.Quote]) ctx.unsubscribe([\"AAPL.US\"], [SubType.Quote]) subscriptions() Get subscription information Examples: :: from longbridge.openapi import QuoteContext, Config, SubType config = Config.from_env() ctx = QuoteContext(config) ctx.subscribe([\"700.HK\", \"AAPL.US\"], [SubType.Quote]) resp = ctx.subscriptions() print(resp) static_info(symbols) Get basic information of securities Parameters: Name Type Description Default symbols List [ str ] Security codes required Returns: Type Description List [ SecurityStaticInfo ] Security info list Examples: :: from longbridge.openapi import QuoteContext, Config config = Config.from_env() ctx = QuoteContext(config) resp = ctx.static_info([\"700.HK\", \"AAPL.US\", \"TSLA.US\", \"NFLX.US\"]) print(resp) quote(symbols) Get quote of securities Parameters: Name Type Description Default symbols List [ str ] Security codes required Returns: Type Description List [ SecurityQuote ] Security quote list Examples: :: from longbridge.openapi import QuoteContext, Config config = Config.from_env() ctx = QuoteContext(config) resp = ctx.quote([\"700.HK\", \"AAPL.US\", \"TSLA.US\", \"NFLX.US\"]) print(resp) option_quote(symbols) Get quote of option securities Parameters: Name Type Description Default symbols List [ str ] Security codes required Returns: Type Description List [ OptionQuote ] Option quote list Examples: :: from longbridge.openapi import QuoteContext, Config config = Config.from_env() ctx = QuoteContext(config) resp = ctx.option_quote([\"AAPL230317P160000.US\"]) print(resp) warrant_quote(symbols) Get quote of warrant securities Parameters: Name Type Description Default symbols List [ str ] Security codes required Returns: Type Description List [ WarrantQuote ] Warrant quote list Examples: :: from longbridge.openapi import QuoteContext, Config config = Config.from_env() ctx = QuoteContext(config) resp = ctx.warrant_quote([\"21125.HK\"]) print(resp) depth(symbol) Get security depth Parameters: Name Type Description Default symbol str Security code required Returns: Type Description SecurityDepth Security depth Examples: :: from longbridge.openapi import QuoteContext, Config config = Config.from_env() ctx = QuoteContext(config) resp = ctx.depth(\"700.HK\") print(resp) brokers(symbol) Get security brokers Parameters: Name Type Description Default symbol str Security code required Returns: Type Description SecurityBrokers Security brokers Examples: :: from longbridge.openapi import QuoteContext, Config config = Config.from_env() ctx = QuoteContext(config) resp = ctx.brokers(\"700.HK\") print(resp) participants() Get participants Returns: Type Description List [ ParticipantInfo ] Participants Examples: :: from longbridge.openapi import QuoteContext, Config config = Config.from_env() ctx = QuoteContext(config) resp = ctx.participants() print(resp) trades(symbol, count) Get security trades Parameters: Name Type Description Default symbol str Security code required count int Count of trades (Maximum is 1000 ) required Returns: Type Description List [ Trade ] Trades Examples: :: from longbridge.openapi import QuoteContext, Config config = Config.from_env() ctx = QuoteContext(config) resp = ctx.trades(\"700.HK\", 10) print(resp) intraday(symbol) Get security intraday lines Parameters: Name Type Description Default symbol str Security code required Returns: Type Description List [ IntradayLine ] Intraday lines Examples: :: from longbridge.openapi import QuoteContext, Config config = Config.from_env() ctx = QuoteContext(config) resp = ctx.intraday(\"700.HK\") print(resp) candlesticks(symbol, period, count, adjust_type) Get security candlesticks Parameters: Name Type Description Default symbol str Security code required period Type [ Period ] Candlestick period required count int Count of cancdlestick (Maximum is 1000 ) required adjust_type Type [ AdjustType ] Adjustment type required Returns: Type Description List [ Candlestick ] Candlesticks Examples: :: from longbridge.openapi import QuoteContext, Config, Period, AdjustType config = Config.from_env() ctx = QuoteContext(config) resp = ctx.candlesticks(\"700.HK\", Period.Day, 10, AdjustType.NoAdjust) print(resp) option_chain_expiry_date_list(symbol) Get option chain expiry date list Parameters: Name Type Description Default symbol str Security code required Returns: Type Description List [ date ] Option chain expiry date list Examples: :: from longbridge.openapi import QuoteContext, Config config = Config.from_env() ctx = QuoteContext(config) resp = ctx.option_chain_expiry_date_list(\"AAPL.US\") print(resp) option_chain_info_by_date(symbol, expiry_date) Get option chain info by date Parameters: Name Type Description Default symbol str Security code required expiry_date date Expiry date required Returns: Type Description List [ StrikePriceInfo ] Option chain info Examples: :: from datetime import date from longbridge.openapi import QuoteContext, Config config = Config.from_env() ctx = QuoteContext(config) resp = ctx.option_chain_info_by_date(\"AAPL.US\", date(2023, 1, 20)) print(resp) warrant_issuers() Get warrant issuers Returns: Type Description List [ IssuerInfo ] Warrant issuers Examples: :: from longbridge.openapi import QuoteContext, Config config = Config.from_env() ctx = QuoteContext(config) resp = ctx.warrant_issuers() print(resp) trading_session() Get trading session of the day Returns: Type Description List [ MarketTradingSession ] Trading session of the day Examples: :: from longbridge.openapi import QuoteContext, Config config = Config.from_env() ctx = QuoteContext(config) resp = ctx.trading_session() print(resp) trading_days(market, begin, end) Get trading session of the day The interval must be less than one month, and only the most recent year is supported. Parameters: Name Type Description Default market Type [ Market ] Market required begin date Begin date required end date End date required Returns: Type Description MarketTradingDays Trading days Examples: :: from datetime import date from longbridge.openapi import QuoteContext, Config, Market config = Config.from_env() ctx = QuoteContext(config) resp = ctx.trading_days(Market.HK, date(2022, 1, 1), date(2022, 2, 1)) print(resp) realtime_quote(symbols) Get real-time quote Get real-time quotes of the subscribed symbols, it always returns the data in the local storage. Parameters: Name Type Description Default symbols List [ str ] Security codes required Returns: Type Description List [ RealtimeQuote ] Quote list Examples: :: from time import sleep from longbridge.openapi import QuoteContext, Config, SubType config = Config.from_env() ctx = QuoteContext(config) ctx.subscribe([\"HK.700\", \"AAPL.US\"], [SubType.Quote], is_first_push = True) sleep(5) resp = ctx.realtime_quote([\"HK.700\", \"AAPL.US\"]) print(resp) realtime_depth(symbol) Get real-time depth Get real-time depth of the subscribed symbols, it always returns the data in the local storage. Parameters: Name Type Description Default symbol str Security code required Returns: Type Description SecurityDepth Security depth Examples: :: from time import sleep from longbridge.openapi import QuoteContext, Config, SubType config = Config.from_env() ctx = QuoteContext(config) ctx.subscribe([\"HK.700\", \"AAPL.US\"], [SubType.Depth], is_first_push = True) sleep(5) resp = ctx.realtime_depth(\"HK.700\") print(resp) realtime_brokers(symbol) Get real-time brokers Get real-time brokers of the subscribed symbols, it always returns the data in the local storage. Parameters: Name Type Description Default symbol str Security code required Returns: Type Description SecurityBrokers Security brokers Examples: :: from time import sleep from longbridge.openapi import QuoteContext, Config, SubType config = Config.from_env() ctx = QuoteContext(config) ctx.subscribe([\"HK.700\", \"AAPL.US\"], [SubType.Brokers], is_first_push = True) sleep(5) resp = ctx.realtime_brokers(\"HK.700\") print(resp) realtime_trades(symbol, count) Get real-time trades Get real-time trades of the subscribed symbols, it always returns the data in the local storage. Parameters: Name Type Description Default symbol str Security code required count int Count of trades required Returns: Type Description List [ Trade ] Security trades Examples: :: from time import sleep from longbridge.openapi import QuoteContext, Config, SubType config = Config.from_env() ctx = QuoteContext(config) ctx.subscribe([\"HK.700\", \"AAPL.US\"], [SubType.Trade], is_first_push = False) sleep(5) resp = ctx.realtime_trades(\"HK.700\", 10) print(resp) OrderSide Order side Unknown Bases: OrderSide Unknown Buy Bases: OrderSide Buy Sell Bases: OrderSide Sell OrderType Order type Unknown Bases: OrderType Unknown LO Bases: OrderType Limit Order ELO Bases: OrderType Enhanced Limit Order MO Bases: OrderType Market Order AO Bases: OrderType At-auction Order ALO Bases: OrderType At-auction Limit Order ODD Bases: OrderType Odd Lots LIT Bases: OrderType Limit If Touched MIT Bases: OrderType Market If Touched TSLPAMT Bases: OrderType Trailing Limit If Touched (Trailing Amount) TSLPPCT Bases: OrderType Trailing Limit If Touched (Trailing Percent) TSMAMT Bases: OrderType Trailing Market If Touched (Trailing Amount) TSMPCT Bases: OrderType Trailing Market If Touched (Trailing Percent) OrderStatus Order status Unknown Bases: OrderStatus Unknown NotReported Bases: OrderStatus Not reported ReplacedNotReported Bases: OrderStatus Not reported (Replaced Order) ProtectedNotReported Bases: OrderStatus Not reported (Protected Order) VarietiesNotReported Bases: OrderStatus Not reported (Conditional Order) Filled Bases: OrderStatus Filled WaitToNew Bases: OrderStatus Wait To New New Bases: OrderStatus New WaitToReplace Bases: OrderStatus Wait To Replace PendingReplace Bases: OrderStatus Pending Replace Replaced Bases: OrderStatus Replaced PartialFilled Bases: OrderStatus Partial Filled WaitToCancel Bases: OrderStatus Wait To Cancel PendingCancel Bases: OrderStatus Pending Cancel Rejected Bases: OrderStatus Rejected Canceled Bases: OrderStatus Canceled Expired Bases: OrderStatus ExpiredStatus PartialWithdrawal Bases: OrderStatus PartialWithdrawal OrderTag Order tag Unknown Bases: OrderTag Unknown Normal Bases: OrderTag Normal Order LongTerm Bases: OrderTag Long term Order Grey Bases: OrderTag Grey Order TriggerStatus Trigger status Unknown Bases: TriggerStatus Unknown Deactive Bases: TriggerStatus Deactive Active Bases: TriggerStatus Active Released Bases: TriggerStatus Released Execution Execution order_id: str class-attribute Order ID trade_id: str class-attribute Execution ID symbol: str class-attribute Security code trade_done_at: datetime class-attribute Trade done time quantity: Decimal class-attribute Executed quantity price: Decimal class-attribute Executed price PushOrderChanged Order changed message side: Type[OrderSide] class-attribute Order side stock_name: str class-attribute Stock name quantity: str class-attribute Submitted quantity symbol: str class-attribute Order symbol order_type: Type[OrderType] class-attribute Order type price: Decimal class-attribute Submitted price executed_quantity: int class-attribute Executed quantity executed_price: Decimal class-attribute Executed price order_id: str class-attribute Order ID currency: str class-attribute Currency status: Type[OrderStatus] class-attribute Order status submitted_at: datetime class-attribute Submitted time updated_at: datetime class-attribute Last updated time trigger_price: Optional[Decimal] class-attribute Order trigger price msg: str class-attribute Rejected message or remark tag: Type[OrderTag] class-attribute Order tag trigger_status: Optional[Type[TriggerStatus]] class-attribute Conditional order trigger status trigger_at: Optional[datetime] class-attribute Conditional order trigger time trailing_amount: Optional[Decimal] class-attribute Trailing amount trailing_percent: Optional[Decimal] class-attribute Trailing percent limit_offset: Optional[Decimal] class-attribute Limit offset amount account_no: str class-attribute Account no TimeInForceType Time in force type Unknown Bases: TimeInForceType Unknown Day Bases: TimeInForceType Day Order GoodTilCanceled Bases: TimeInForceType Good Til Canceled Order GoodTilDate Bases: TimeInForceType Good Til Date Order OutsideRTH Enable or disable outside regular trading hours Unknown Bases: OutsideRTH Unknown RTHOnly Bases: OutsideRTH Regular trading hour only AnyTime Bases: OutsideRTH Any time Order Order order_id: str class-attribute Order ID status: Type[OrderStatus] class-attribute Order status stock_name: str class-attribute Stock name quantity: Decimal class-attribute Submitted quantity executed_quantity: Decimal class-attribute Executed quantity price: Optional[Decimal] class-attribute Submitted price executed_price: Optional[Decimal] class-attribute Executed price submitted_at: datetime class-attribute Submitted time side: Type[OrderSide] class-attribute Order side symbol: str class-attribute Security code order_type: Type[OrderType] class-attribute Order type last_done: Optional[Decimal] class-attribute Last done trigger_price: Optional[Decimal] class-attribute LIT / MIT Order Trigger Price msg: str class-attribute Rejected Message or remark tag: Type[OrderTag] class-attribute Order tag time_in_force: Type[TimeInForceType] class-attribute Time in force type expire_date: Optional[date] class-attribute Long term order expire date updated_at: Optional[datetime] class-attribute Last updated time trigger_at: Optional[datetime] class-attribute Conditional order trigger time trailing_amount: Optional[Decimal] class-attribute TSMAMT / TSLPAMT order trailing amount trailing_percent: Optional[Decimal] class-attribute TSMPCT / TSLPPCT order trailing percent limit_offset: Optional[Decimal] class-attribute TSLPAMT / TSLPPCT order limit offset amount trigger_status: Optional[Type[TriggerStatus]] class-attribute Conditional order trigger status currency: str class-attribute Currency outside_rth: Optional[Type[OutsideRTH]] class-attribute Enable or disable outside regular trading hours TradeHandler Bases: Protocol Trade push message handler on_event(symbol, msg) Called when a new message is received SubmitOrderResponse Response for withdraw order request order_id: str class-attribute Order id CashInfo CashInfo withdraw_cash: Decimal class-attribute Withdraw cash available_cash: Decimal class-attribute Available cash frozen_cash: Decimal class-attribute Frozen cash settling_cash: Decimal class-attribute Cash to be settled currency: str class-attribute Currency AccountBalance Account balance total_cash: Decimal class-attribute Total cash max_finance_amount: Decimal class-attribute Maximum financing amount remaining_finance_amount: Decimal class-attribute Remaining financing amount risk_level: int class-attribute Risk control level margin_call: Decimal class-attribute Margin call currency: str class-attribute Currency cash_infos: List[CashInfo] class-attribute Cash details BalanceType Unknown Bases: BalanceType Cash Bases: BalanceType Stock Bases: BalanceType Fund Bases: BalanceType CashFlowDirection Cash flow direction Unknown Bases: CashFlowDirection Unknown Out Bases: CashFlowDirection Out In Bases: CashFlowDirection Stock CashFlow Cash flow transaction_flow_name: str class-attribute Cash flow name direction: Type[CashFlowDirection] class-attribute Outflow direction business_type: Type[BalanceType] class-attribute Balance type balance: Decimal class-attribute Cash amount currency: str class-attribute Cash currency business_time: datetime class-attribute Business time symbol: Optional[str] class-attribute Associated Stock code information description: str class-attribute Cash flow description FundPosition Fund position symbol: str class-attribute Fund ISIN code current_net_asset_value: Decimal class-attribute Current equity net_asset_value_day: datetime class-attribute Current equity PyDecimal symbol_name: str class-attribute Fund name currency: str class-attribute Currency cost_net_asset_value: Decimal class-attribute Net cost holding_units: Decimal class-attribute Holding units FundPositionChannel Fund position channel account_channel: str class-attribute Account type positions: List[FundPosition] class-attribute Fund positions FundPositionsResponse Fund positions response channels: List[FundPositionChannel] class-attribute Channels StockPosition Stock position symbol: str class-attribute Stock code symbol_name: str class-attribute Stock name quantity: Decimal class-attribute The number of holdings available_quality: Decimal class-attribute Available quantity currency: str class-attribute Currency cost_price: Decimal class-attribute Cost Price(According to the client's choice of average purchase or diluted cost) StockPositionChannel Stock position channel account_channel: str class-attribute Account type positions: List[StockPosition] class-attribute Stock positions StockPositionsResponse Stock positions response channels: List[StockPositionChannel] class-attribute Channels TopicType Topic type Private Bases: TopicType Private notification for trade TradeContext Trade context Parameters: Name Type Description Default config Config Configuration object required handler Optional [ TradeHandler ] Push message handler None __init__(config, handler=None) subscribe(topics) Subscribe Parameters: Name Type Description Default topics List [ str ] Topic list required unsubscribe(topics) Unsubscribe Parameters: Name Type Description Default topics List [ str ] Topic list required history_executions(symbol=None, start_at=None, end_at=None) Get history executions Parameters: Name Type Description Default symbol Optional [ str ] Filter by security code, example: 700.HK , AAPL.US None start_at Optional [ date ] Start time None end_at Optional [ date ] End time None Returns: Type Description List [ Execution ] Execution list Examples: :: from datetime import datetime from longbridge.openapi import TradeContext, Config config = Config.from_env() ctx = TradeContext(config) resp = ctx.history_executions( symbol = \"700.HK\", start_at = datetime(2022, 5, 9), end_at = datetime(2022, 5, 12), ) print(resp) today_executions(symbol=None, order_id=None) Get today executions Parameters: Name Type Description Default symbol Optional [ str ] Filter by security code None order_id Optional [ str ] Filter by Order ID None Returns: Type Description List [ Execution ] Execution list Examples: :: from longbridge.openapi import TradeContext, Config config = Config.from_env() ctx = TradeContext(config) resp = ctx.today_executions(symbol = \"700.HK\") print(resp) history_orders(symbol=None, status=[], side=None, market=None, start_at=None, end_at=None) Get history orders Parameters: Name Type Description Default symbol Optional [ str ] Filter by security code None status List [ Type [ OrderStatus ]] Filter by order status [] side Optional [ Type [ OrderSide ]] Filter by order side None market Optional [ Type [ Market ]] Filter by market type None start_at Optional [ date ] Start time None end_at Optional [ date ] End time None Returns: Type Description List [ Order ] Order list Examples: :: from datetime import datetime from longbridge.openapi import TradeContext, Config, OrderStatus, OrderSide, Market config = Config.from_env() ctx = TradeContext(config) resp = ctx.history_orders( symbol = \"700.HK\", status = [OrderStatus.Filled, OrderStatus.New], side = OrderSide.Buy, market = Market.HK, start_at = datetime(2022, 5, 9), end_at = datetime(2022, 5, 12), ) print(resp) today_orders(symbol=None, status=[], side=None, market=None) Get today orders Parameters: Name Type Description Default symbol Optional [ str ] Filter by security code None status List [ Type [ OrderStatus ]] Filter by order status [] side Optional [ Type [ OrderSide ]] Filter by order side None market Optional [ Type [ Market ]] Filter by market type None Returns: Type Description List [ Order ] Order list Examples: :: from longbridge.openapi import TradeContext, Config, OrderStatus, OrderSide, Market config = Config.from_env() ctx = TradeContext(config) resp = ctx.today_orders( symbol = \"700.HK\", status = [OrderStatus.Filled, OrderStatus.New], side = OrderSide.Buy, market = Market.HK, ) print(resp) replace_order(order_id, quantity, price=None, trigger_price=None, limit_offset=None, trailing_amount=None, trailing_percent=None, remark=None) Replace order Parameters: Name Type Description Default quantity Decimal Replaced quantity required price Optional [ Decimal ] Replaced price None trigger_price Optional [ Decimal ] Trigger price ( LIT / MIT Order Required) None limit_offset Optional [ Decimal ] Limit offset amount ( TSLPAMT / TSLPPCT Required) None trailing_amount Optional [ Decimal ] Trailing amount ( TSLPAMT / TSMAMT Required) None trailing_percent Optional [ Decimal ] Trailing percent ( TSLPPCT / TSMAPCT Required) None remark Optional [ str ] Remark (Maximum 64 characters) None Examples: :: from decimal import Decimal from longbridge.openapi import TradeContext, Config config = Config.from_env() ctx = TradeContext(config) ctx.replace_order( order_id = \"709043056541253632\", quantity = Decimal(\"100\"), price = Decimal(\"100\"), ) submit_order(symbol, order_type, side, submitted_quantity, time_in_force, submitted_price=None, trigger_price=None, limit_offset=None, trailing_amount=None, trailing_percent=None, expire_date=None, outside_rth=None, remark=None) Submit order Parameters: Name Type Description Default symbol str Security code required order_type Type [ OrderType ] Order type required side Type [ OrderSide ] Order Side required submitted_quantity Decimal Submitted quantity required time_in_force Type [ TimeInForceType ] Time in force type required submitted_price Optional [ Decimal ] Submitted price None trigger_price Optional [ Decimal ] Trigger price ( LIT / MIT Required) None limit_offset Optional [ Decimal ] Limit offset amount ( TSLPAMT / TSLPPCT Required) None trailing_amount Optional [ Decimal ] Trailing amount ( TSLPAMT / TSMAMT Required) None trailing_percent Optional [ Decimal ] Trailing percent ( TSLPPCT / TSMAPCT Required) None expire_date Optional [ date ] Long term order expire date (Required when time_in_force is GoodTilDate ) None outside_rth Optional [ Type [ OutsideRTH ]] Enable or disable outside regular trading hours None remark Optional [ str ] Remark (Maximum 64 characters) None Returns: Type Description SubmitOrderResponse Response Examples: :: from decimal import Decimal from longbridge.openapi import TradeContext, Config, OrderSide, OrderType, TimeInForceType config = Config.from_env() ctx = TradeContext(config) resp = ctx.submit_order( side = OrderSide.Buy, symbol = \"700.HK\", order_type = OrderType.LO, submitted_price = Decimal(\"50\"), submitted_quantity = Decimal(\"200\"), time_in_force = TimeInForceType.Day, remark = \"Hello from Python SDK\", ) print(resp) withdraw_order(order_id) Withdraw order Parameters: Name Type Description Default order_id str Order ID required Examples: :: from longbridge.openapi import TradeContext, Config config = Config.from_env() ctx = TradeContext(config) ctx.withdraw_order(\"709043056541253632\") account_balance() Get account balance Returns: Type Description List [ AccountBalance ] Account list Examples: :: from longbridge.openapi import TradeContext, Config config = Config.from_env() ctx = TradeContext(config) resp = ctx.account_balance() print(resp) cash_flow(start_at, end_at, business_type=None, symbol=None, page=None, size=None) Get cash flow Parameters: Name Type Description Default start_at datetime Start time required end_at datetime End time required business_type Optional [ Type [ BalanceType ]] Balance type None symbol Optional [ str ] Target security code None page Optional [ int ] Start page (Default: 1) None size Optional [ int ] Page size (Default: 50) None Returns: Type Description List [ CashFlow ] Cash flow list Examples: :: from datetime import datetime from longbridge.openapi import TradeContext, Config config = Config.from_env() ctx = TradeContext(config) resp = ctx.cash_flow( start_at = datetime(2022, 5, 9), end_at = datetime(2022, 5, 12), ) print(resp) fund_positions(symbols=[]) Get fund positions Parameters: Name Type Description Default symbols List [ str ] Filter by fund codes [] Returns: Type Description FundPositionsResponse Fund positions Examples: :: from longbridge.openapi import TradeContext, Config config = Config.from_env() ctx = TradeContext(config) resp = ctx.fund_positions() print(resp) stock_positions(symbols=[]) Get stock positions Parameters: Name Type Description Default symbols List [ str ] Filter by stock codes [] Returns: Type Description StockPositionsResponse Stock positions Examples: :: from longbridge.openapi import TradeContext, Config config = Config.from_env() ctx = TradeContext(config) resp = ctx.stock_positions() print(resp)","title":"All"},{"location":"reference_all/#code-reference","text":"","title":"Code Reference"},{"location":"reference_all/#longbridge.openapi.Config","text":"Configuration options for Longbridge sdk Parameters: Name Type Description Default app_key str App Key required app_secret str App Secret required access_token str Access Token required http_url str HTTP API url 'https://openapi.longbridgeapp.com' quote_ws_url str Websocket url for quote API 'wss://openapi-quote.longbridgeapp.com' trade_ws_url str Websocket url for trade API 'wss://openapi-trade.longbridgeapp.com'","title":"Config"},{"location":"reference_all/#longbridge.openapi.Config.__init__","text":"","title":"__init__()"},{"location":"reference_all/#longbridge.openapi.Config.from_env","text":"Create a new Config from the given environment variables","title":"from_env()"},{"location":"reference_all/#longbridge.openapi.Config.from_env--variables","text":"LONGBRIDGE_APP_KEY - App key LONGBRIDGE_APP_SECRET - App secret LONGBRIDGE_ACCESS_TOKEN - Access token LONGBRIDGE_HTTP_URL - HTTP endpoint url LONGBRIDGE_QUOTE_WS_URL - Quote websocket endpoint url LONGBRIDGE_TRADE_WS_URL - Trade websocket endpoint url","title":"Variables"},{"location":"reference_all/#longbridge.openapi.Market","text":"Market","title":"Market"},{"location":"reference_all/#longbridge.openapi.Market.Unknown","text":"Bases: Market Unknown","title":"Unknown"},{"location":"reference_all/#longbridge.openapi.Market.US","text":"Bases: Market US market","title":"US"},{"location":"reference_all/#longbridge.openapi.Market.HK","text":"Bases: Market HK market","title":"HK"},{"location":"reference_all/#longbridge.openapi.Market.CN","text":"Bases: Market CN market","title":"CN"},{"location":"reference_all/#longbridge.openapi.Market.SG","text":"Bases: Market SG market","title":"SG"},{"location":"reference_all/#longbridge.openapi.PushQuote","text":"Quote message","title":"PushQuote"},{"location":"reference_all/#longbridge.openapi.PushQuote.last_done","text":"Latest price","title":"last_done"},{"location":"reference_all/#longbridge.openapi.PushQuote.open","text":"Open","title":"open"},{"location":"reference_all/#longbridge.openapi.PushQuote.high","text":"High","title":"high"},{"location":"reference_all/#longbridge.openapi.PushQuote.low","text":"Low","title":"low"},{"location":"reference_all/#longbridge.openapi.PushQuote.timestamp","text":"Time of latest price","title":"timestamp"},{"location":"reference_all/#longbridge.openapi.PushQuote.volume","text":"Volume","title":"volume"},{"location":"reference_all/#longbridge.openapi.PushQuote.turnover","text":"Turnover","title":"turnover"},{"location":"reference_all/#longbridge.openapi.PushQuote.trade_status","text":"Security trading status","title":"trade_status"},{"location":"reference_all/#longbridge.openapi.PushQuote.trade_session","text":"Trade session","title":"trade_session"},{"location":"reference_all/#longbridge.openapi.PushDepth","text":"Depth message","title":"PushDepth"},{"location":"reference_all/#longbridge.openapi.PushDepth.asks","text":"Ask depth","title":"asks"},{"location":"reference_all/#longbridge.openapi.PushDepth.bids","text":"Bid depth","title":"bids"},{"location":"reference_all/#longbridge.openapi.PushBrokers","text":"Brokers message","title":"PushBrokers"},{"location":"reference_all/#longbridge.openapi.PushBrokers.ask_brokers","text":"Ask brokers","title":"ask_brokers"},{"location":"reference_all/#longbridge.openapi.PushBrokers.bid_brokers","text":"Bid brokers","title":"bid_brokers"},{"location":"reference_all/#longbridge.openapi.PushTrades","text":"Trades message","title":"PushTrades"},{"location":"reference_all/#longbridge.openapi.PushTrades.trades","text":"Trades data","title":"trades"},{"location":"reference_all/#longbridge.openapi.QuoteHandler","text":"Bases: Protocol Quote push message handler","title":"QuoteHandler"},{"location":"reference_all/#longbridge.openapi.QuoteHandler.on_event","text":"Called when a new message is received","title":"on_event()"},{"location":"reference_all/#longbridge.openapi.SubType","text":"Subscription flags","title":"SubType"},{"location":"reference_all/#longbridge.openapi.SubType.Quote","text":"Bases: SubType Quote","title":"Quote"},{"location":"reference_all/#longbridge.openapi.SubType.Depth","text":"Bases: SubType Depth","title":"Depth"},{"location":"reference_all/#longbridge.openapi.SubType.Brokers","text":"Bases: SubType Broker","title":"Brokers"},{"location":"reference_all/#longbridge.openapi.SubType.Trade","text":"Bases: SubType Trade","title":"Trade"},{"location":"reference_all/#longbridge.openapi.DerivativeType","text":"Derivative type","title":"DerivativeType"},{"location":"reference_all/#longbridge.openapi.DerivativeType.Option","text":"Bases: DerivativeType US stock options","title":"Option"},{"location":"reference_all/#longbridge.openapi.DerivativeType.Warrant","text":"Bases: DerivativeType HK warrants","title":"Warrant"},{"location":"reference_all/#longbridge.openapi.SecurityStaticInfo","text":"The basic information of securities","title":"SecurityStaticInfo"},{"location":"reference_all/#longbridge.openapi.SecurityStaticInfo.symbol","text":"Security code","title":"symbol"},{"location":"reference_all/#longbridge.openapi.SecurityStaticInfo.name_cn","text":"Security name (zh-CN)","title":"name_cn"},{"location":"reference_all/#longbridge.openapi.SecurityStaticInfo.name_en","text":"Security name (en)","title":"name_en"},{"location":"reference_all/#longbridge.openapi.SecurityStaticInfo.name_hk","text":"Security name (zh-HK)","title":"name_hk"},{"location":"reference_all/#longbridge.openapi.SecurityStaticInfo.exchange","text":"Exchange which the security belongs to","title":"exchange"},{"location":"reference_all/#longbridge.openapi.SecurityStaticInfo.currency","text":"Trading currency","title":"currency"},{"location":"reference_all/#longbridge.openapi.SecurityStaticInfo.lot_size","text":"Lot size","title":"lot_size"},{"location":"reference_all/#longbridge.openapi.SecurityStaticInfo.total_shares","text":"Total shares","title":"total_shares"},{"location":"reference_all/#longbridge.openapi.SecurityStaticInfo.circulating_shares","text":"Circulating shares","title":"circulating_shares"},{"location":"reference_all/#longbridge.openapi.SecurityStaticInfo.hk_shares","text":"HK shares (only HK stocks)","title":"hk_shares"},{"location":"reference_all/#longbridge.openapi.SecurityStaticInfo.eps","text":"Earnings per share","title":"eps"},{"location":"reference_all/#longbridge.openapi.SecurityStaticInfo.eps_ttm","text":"Earnings per share (TTM)","title":"eps_ttm"},{"location":"reference_all/#longbridge.openapi.SecurityStaticInfo.bps","text":"Net assets per share","title":"bps"},{"location":"reference_all/#longbridge.openapi.SecurityStaticInfo.dividend_yield","text":"Dividend yield","title":"dividend_yield"},{"location":"reference_all/#longbridge.openapi.SecurityStaticInfo.stock_derivatives","text":"Types of supported derivatives","title":"stock_derivatives"},{"location":"reference_all/#longbridge.openapi.TradeStatus","text":"Security Status","title":"TradeStatus"},{"location":"reference_all/#longbridge.openapi.TradeStatus.Normal","text":"Bases: TradeStatus Normal","title":"Normal"},{"location":"reference_all/#longbridge.openapi.TradeStatus.Halted","text":"Bases: TradeStatus Suspension","title":"Halted"},{"location":"reference_all/#longbridge.openapi.TradeStatus.Delisted","text":"Bases: TradeStatus Delisted","title":"Delisted"},{"location":"reference_all/#longbridge.openapi.TradeStatus.Fuse","text":"Bases: TradeStatus Fuse","title":"Fuse"},{"location":"reference_all/#longbridge.openapi.TradeStatus.PrepareList","text":"Bases: TradeStatus Prepare List","title":"PrepareList"},{"location":"reference_all/#longbridge.openapi.TradeStatus.CodeMoved","text":"Bases: TradeStatus Code Moved","title":"CodeMoved"},{"location":"reference_all/#longbridge.openapi.TradeStatus.ToBeOpened","text":"Bases: TradeStatus To Be Opened","title":"ToBeOpened"},{"location":"reference_all/#longbridge.openapi.TradeStatus.SplitStockHalts","text":"Bases: TradeStatus Split Stock Halts","title":"SplitStockHalts"},{"location":"reference_all/#longbridge.openapi.TradeStatus.Expired","text":"Bases: TradeStatus Expired","title":"Expired"},{"location":"reference_all/#longbridge.openapi.TradeStatus.WarrantPrepareList","text":"Bases: TradeStatus Warrant To BeListed","title":"WarrantPrepareList"},{"location":"reference_all/#longbridge.openapi.TradeStatus.SuspendTrade","text":"Bases: TradeStatus Suspend","title":"SuspendTrade"},{"location":"reference_all/#longbridge.openapi.PrePostQuote","text":"Quote of US pre/post market","title":"PrePostQuote"},{"location":"reference_all/#longbridge.openapi.PrePostQuote.last_done","text":"Latest price","title":"last_done"},{"location":"reference_all/#longbridge.openapi.PrePostQuote.timestamp","text":"Time of latest price","title":"timestamp"},{"location":"reference_all/#longbridge.openapi.PrePostQuote.volume","text":"Volume","title":"volume"},{"location":"reference_all/#longbridge.openapi.PrePostQuote.turnover","text":"Turnover","title":"turnover"},{"location":"reference_all/#longbridge.openapi.PrePostQuote.high","text":"High","title":"high"},{"location":"reference_all/#longbridge.openapi.PrePostQuote.low","text":"Low","title":"low"},{"location":"reference_all/#longbridge.openapi.PrePostQuote.prev_close","text":"Close of the last trade session","title":"prev_close"},{"location":"reference_all/#longbridge.openapi.SecurityQuote","text":"Quote of securitity","title":"SecurityQuote"},{"location":"reference_all/#longbridge.openapi.SecurityQuote.symbol","text":"Security code","title":"symbol"},{"location":"reference_all/#longbridge.openapi.SecurityQuote.last_done","text":"Latest price","title":"last_done"},{"location":"reference_all/#longbridge.openapi.SecurityQuote.prev_close","text":"Yesterday's close","title":"prev_close"},{"location":"reference_all/#longbridge.openapi.SecurityQuote.open","text":"Open","title":"open"},{"location":"reference_all/#longbridge.openapi.SecurityQuote.high","text":"High","title":"high"},{"location":"reference_all/#longbridge.openapi.SecurityQuote.low","text":"Low","title":"low"},{"location":"reference_all/#longbridge.openapi.SecurityQuote.timestamp","text":"Time of latest price","title":"timestamp"},{"location":"reference_all/#longbridge.openapi.SecurityQuote.volume","text":"Volume","title":"volume"},{"location":"reference_all/#longbridge.openapi.SecurityQuote.turnover","text":"Turnover","title":"turnover"},{"location":"reference_all/#longbridge.openapi.SecurityQuote.trade_status","text":"Security trading status","title":"trade_status"},{"location":"reference_all/#longbridge.openapi.SecurityQuote.pre_market_quote","text":"Quote of US pre market","title":"pre_market_quote"},{"location":"reference_all/#longbridge.openapi.SecurityQuote.post_market_quote","text":"Quote of US post market","title":"post_market_quote"},{"location":"reference_all/#longbridge.openapi.OptionType","text":"Option type","title":"OptionType"},{"location":"reference_all/#longbridge.openapi.OptionType.Unknown","text":"Bases: OptionType Unknown","title":"Unknown"},{"location":"reference_all/#longbridge.openapi.OptionType.American","text":"Bases: OptionType American","title":"American"},{"location":"reference_all/#longbridge.openapi.OptionType.Europe","text":"Bases: OptionType Europe","title":"Europe"},{"location":"reference_all/#longbridge.openapi.OptionDirection","text":"Option direction","title":"OptionDirection"},{"location":"reference_all/#longbridge.openapi.OptionDirection.Unknown","text":"Bases: OptionDirection Unknown","title":"Unknown"},{"location":"reference_all/#longbridge.openapi.OptionDirection.Put","text":"Bases: OptionDirection Put","title":"Put"},{"location":"reference_all/#longbridge.openapi.OptionDirection.Call","text":"Bases: OptionDirection Call","title":"Call"},{"location":"reference_all/#longbridge.openapi.OptionQuote","text":"Quote of option","title":"OptionQuote"},{"location":"reference_all/#longbridge.openapi.OptionQuote.symbol","text":"Security code","title":"symbol"},{"location":"reference_all/#longbridge.openapi.OptionQuote.last_done","text":"Latest price","title":"last_done"},{"location":"reference_all/#longbridge.openapi.OptionQuote.prev_close","text":"Yesterday's close","title":"prev_close"},{"location":"reference_all/#longbridge.openapi.OptionQuote.open","text":"Open","title":"open"},{"location":"reference_all/#longbridge.openapi.OptionQuote.high","text":"High","title":"high"},{"location":"reference_all/#longbridge.openapi.OptionQuote.low","text":"Low","title":"low"},{"location":"reference_all/#longbridge.openapi.OptionQuote.timestamp","text":"Time of latest price","title":"timestamp"},{"location":"reference_all/#longbridge.openapi.OptionQuote.volume","text":"Volume","title":"volume"},{"location":"reference_all/#longbridge.openapi.OptionQuote.turnover","text":"Turnover","title":"turnover"},{"location":"reference_all/#longbridge.openapi.OptionQuote.trade_status","text":"Security trading status","title":"trade_status"},{"location":"reference_all/#longbridge.openapi.OptionQuote.implied_volatility","text":"Implied volatility","title":"implied_volatility"},{"location":"reference_all/#longbridge.openapi.OptionQuote.open_interest","text":"Number of open positions","title":"open_interest"},{"location":"reference_all/#longbridge.openapi.OptionQuote.expiry_date","text":"Exprity date","title":"expiry_date"},{"location":"reference_all/#longbridge.openapi.OptionQuote.strike_price","text":"Strike price","title":"strike_price"},{"location":"reference_all/#longbridge.openapi.OptionQuote.contract_multiplier","text":"Contract multiplier","title":"contract_multiplier"},{"location":"reference_all/#longbridge.openapi.OptionQuote.contract_type","text":"Option type","title":"contract_type"},{"location":"reference_all/#longbridge.openapi.OptionQuote.contract_size","text":"Contract size","title":"contract_size"},{"location":"reference_all/#longbridge.openapi.OptionQuote.direction","text":"Option direction","title":"direction"},{"location":"reference_all/#longbridge.openapi.OptionQuote.historical_volatility","text":"Underlying security historical volatility of the option","title":"historical_volatility"},{"location":"reference_all/#longbridge.openapi.OptionQuote.underlying_symbol","text":"Underlying security symbol of the option","title":"underlying_symbol"},{"location":"reference_all/#longbridge.openapi.WarrantType","text":"Warrant type","title":"WarrantType"},{"location":"reference_all/#longbridge.openapi.WarrantType.Unknown","text":"Bases: WarrantType Unknown","title":"Unknown"},{"location":"reference_all/#longbridge.openapi.WarrantType.Call","text":"Bases: WarrantType Call","title":"Call"},{"location":"reference_all/#longbridge.openapi.WarrantType.Put","text":"Bases: WarrantType Put","title":"Put"},{"location":"reference_all/#longbridge.openapi.WarrantType.Bull","text":"Bases: WarrantType Bull","title":"Bull"},{"location":"reference_all/#longbridge.openapi.WarrantType.Bear","text":"Bases: WarrantType Bear","title":"Bear"},{"location":"reference_all/#longbridge.openapi.WarrantType.Inline","text":"Bases: WarrantType Inline","title":"Inline"},{"location":"reference_all/#longbridge.openapi.WarrantQuote","text":"Quote of warrant","title":"WarrantQuote"},{"location":"reference_all/#longbridge.openapi.WarrantQuote.symbol","text":"Security code","title":"symbol"},{"location":"reference_all/#longbridge.openapi.WarrantQuote.last_done","text":"Latest price","title":"last_done"},{"location":"reference_all/#longbridge.openapi.WarrantQuote.prev_close","text":"Yesterday's close","title":"prev_close"},{"location":"reference_all/#longbridge.openapi.WarrantQuote.open","text":"Open","title":"open"},{"location":"reference_all/#longbridge.openapi.WarrantQuote.high","text":"High","title":"high"},{"location":"reference_all/#longbridge.openapi.WarrantQuote.low","text":"Low","title":"low"},{"location":"reference_all/#longbridge.openapi.WarrantQuote.timestamp","text":"Time of latest price","title":"timestamp"},{"location":"reference_all/#longbridge.openapi.WarrantQuote.volume","text":"Volume","title":"volume"},{"location":"reference_all/#longbridge.openapi.WarrantQuote.turnover","text":"Turnover","title":"turnover"},{"location":"reference_all/#longbridge.openapi.WarrantQuote.trade_status","text":"Security trading status","title":"trade_status"},{"location":"reference_all/#longbridge.openapi.WarrantQuote.implied_volatility","text":"Implied volatility","title":"implied_volatility"},{"location":"reference_all/#longbridge.openapi.WarrantQuote.expiry_date","text":"Exprity date","title":"expiry_date"},{"location":"reference_all/#longbridge.openapi.WarrantQuote.last_trade_date","text":"Last tradalbe date","title":"last_trade_date"},{"location":"reference_all/#longbridge.openapi.WarrantQuote.outstanding_ratio","text":"Outstanding ratio","title":"outstanding_ratio"},{"location":"reference_all/#longbridge.openapi.WarrantQuote.outstanding_qty","text":"Outstanding quantity","title":"outstanding_qty"},{"location":"reference_all/#longbridge.openapi.WarrantQuote.conversion_ratio","text":"Conversion ratio","title":"conversion_ratio"},{"location":"reference_all/#longbridge.openapi.WarrantQuote.category","text":"Warrant type","title":"category"},{"location":"reference_all/#longbridge.openapi.WarrantQuote.strike_price","text":"Strike price","title":"strike_price"},{"location":"reference_all/#longbridge.openapi.WarrantQuote.upper_strike_price","text":"Upper bound price","title":"upper_strike_price"},{"location":"reference_all/#longbridge.openapi.WarrantQuote.lower_strike_price","text":"Lower bound price","title":"lower_strike_price"},{"location":"reference_all/#longbridge.openapi.WarrantQuote.call_price","text":"Call price","title":"call_price"},{"location":"reference_all/#longbridge.openapi.WarrantQuote.underlying_symbol","text":"Underlying security symbol of the warrant","title":"underlying_symbol"},{"location":"reference_all/#longbridge.openapi.Depth","text":"Depth","title":"Depth"},{"location":"reference_all/#longbridge.openapi.Depth.position","text":"Position","title":"position"},{"location":"reference_all/#longbridge.openapi.Depth.price","text":"Price","title":"price"},{"location":"reference_all/#longbridge.openapi.Depth.volume","text":"Volume","title":"volume"},{"location":"reference_all/#longbridge.openapi.Depth.order_num","text":"Number of orders","title":"order_num"},{"location":"reference_all/#longbridge.openapi.SecurityDepth","text":"Security depth","title":"SecurityDepth"},{"location":"reference_all/#longbridge.openapi.SecurityDepth.asks","text":"Bid depth","title":"asks"},{"location":"reference_all/#longbridge.openapi.Brokers","text":"Brokers","title":"Brokers"},{"location":"reference_all/#longbridge.openapi.Brokers.position","text":"Position","title":"position"},{"location":"reference_all/#longbridge.openapi.Brokers.broker_ids","text":"Broker IDs","title":"broker_ids"},{"location":"reference_all/#longbridge.openapi.SecurityBrokers","text":"Security brokers","title":"SecurityBrokers"},{"location":"reference_all/#longbridge.openapi.SecurityBrokers.ask_brokers","text":"Ask brokers","title":"ask_brokers"},{"location":"reference_all/#longbridge.openapi.SecurityBrokers.bid_brokers","text":"Bid brokers","title":"bid_brokers"},{"location":"reference_all/#longbridge.openapi.ParticipantInfo","text":"Participant info","title":"ParticipantInfo"},{"location":"reference_all/#longbridge.openapi.ParticipantInfo.broker_ids","text":"Broker IDs","title":"broker_ids"},{"location":"reference_all/#longbridge.openapi.ParticipantInfo.name_cn","text":"Participant name (zh-CN)","title":"name_cn"},{"location":"reference_all/#longbridge.openapi.ParticipantInfo.name_en","text":"Participant name (en)","title":"name_en"},{"location":"reference_all/#longbridge.openapi.ParticipantInfo.name_hk","text":"Participant name (zh-HK)","title":"name_hk"},{"location":"reference_all/#longbridge.openapi.TradeDirection","text":"Trade direction","title":"TradeDirection"},{"location":"reference_all/#longbridge.openapi.TradeDirection.Neutral","text":"Bases: TradeDirection Neutral","title":"Neutral"},{"location":"reference_all/#longbridge.openapi.TradeDirection.Down","text":"Bases: TradeDirection Down","title":"Down"},{"location":"reference_all/#longbridge.openapi.TradeDirection.Up","text":"Bases: TradeDirection Up","title":"Up"},{"location":"reference_all/#longbridge.openapi.TradeSession","text":"Trade session","title":"TradeSession"},{"location":"reference_all/#longbridge.openapi.TradeSession.Normal","text":"Bases: TradeSession Trading","title":"Normal"},{"location":"reference_all/#longbridge.openapi.TradeSession.Pre","text":"Bases: TradeSession Pre-Trading","title":"Pre"},{"location":"reference_all/#longbridge.openapi.TradeSession.Post","text":"Bases: TradeSession Post-Trading","title":"Post"},{"location":"reference_all/#longbridge.openapi.Trade","text":"Trade","title":"Trade"},{"location":"reference_all/#longbridge.openapi.Trade.price","text":"Price","title":"price"},{"location":"reference_all/#longbridge.openapi.Trade.volume","text":"Volume","title":"volume"},{"location":"reference_all/#longbridge.openapi.Trade.timestamp","text":"Time of trading","title":"timestamp"},{"location":"reference_all/#longbridge.openapi.Trade.trade_type","text":"Trade type HK * - Overseas trade D - Odd-lot trade M - Non-direct off-exchange trade P - Late trade (Off-exchange previous day) U - Auction trade X - Direct off-exchange trade Y - Automatch internalized <empty string> - Automatch normal US <empty string> - Regular sale A - Acquisition B - Bunched trade D - Distribution F - Intermarket sweep G - Bunched sold trades H - Price variation trade I - Odd lot trade K - Rule 155 trde(NYSE MKT) M - Market center close price P - Prior reference price Q - Market center open price S - Split trade V - Contingent trade W - Average price trade X - Cross trade 1 - Stopped stock(Regular trade)","title":"trade_type"},{"location":"reference_all/#longbridge.openapi.Trade.direction","text":"Trade direction","title":"direction"},{"location":"reference_all/#longbridge.openapi.Trade.trade_session","text":"Trade session","title":"trade_session"},{"location":"reference_all/#longbridge.openapi.IntradayLine","text":"Intraday line","title":"IntradayLine"},{"location":"reference_all/#longbridge.openapi.IntradayLine.price","text":"Close price of the minute","title":"price"},{"location":"reference_all/#longbridge.openapi.IntradayLine.timestamp","text":"Start time of the minute","title":"timestamp"},{"location":"reference_all/#longbridge.openapi.IntradayLine.volume","text":"Volume","title":"volume"},{"location":"reference_all/#longbridge.openapi.IntradayLine.turnover","text":"Turnover","title":"turnover"},{"location":"reference_all/#longbridge.openapi.IntradayLine.avg_price","text":"Average price","title":"avg_price"},{"location":"reference_all/#longbridge.openapi.Candlestick","text":"Candlestick","title":"Candlestick"},{"location":"reference_all/#longbridge.openapi.Candlestick.close","text":"Close price","title":"close"},{"location":"reference_all/#longbridge.openapi.Candlestick.open","text":"Open price","title":"open"},{"location":"reference_all/#longbridge.openapi.Candlestick.low","text":"Low price","title":"low"},{"location":"reference_all/#longbridge.openapi.Candlestick.high","text":"High price","title":"high"},{"location":"reference_all/#longbridge.openapi.Candlestick.volume","text":"Volume","title":"volume"},{"location":"reference_all/#longbridge.openapi.Candlestick.turnover","text":"Turnover","title":"turnover"},{"location":"reference_all/#longbridge.openapi.Candlestick.timestamp","text":"Timestamp","title":"timestamp"},{"location":"reference_all/#longbridge.openapi.AdjustType","text":"Candlestick adjustment type","title":"AdjustType"},{"location":"reference_all/#longbridge.openapi.AdjustType.NoAdjust","text":"Bases: AdjustType Actual","title":"NoAdjust"},{"location":"reference_all/#longbridge.openapi.AdjustType.ForwardAdjust","text":"Bases: AdjustType Adjust forward","title":"ForwardAdjust"},{"location":"reference_all/#longbridge.openapi.Period","text":"Candlestick period","title":"Period"},{"location":"reference_all/#longbridge.openapi.Period.Min_1","text":"Bases: Period One Minute","title":"Min_1"},{"location":"reference_all/#longbridge.openapi.Period.Min_5","text":"Bases: Period Five Minutes","title":"Min_5"},{"location":"reference_all/#longbridge.openapi.Period.Min_15","text":"Bases: Period Fifteen Minutes","title":"Min_15"},{"location":"reference_all/#longbridge.openapi.Period.Min_30","text":"Bases: Period Thirty Minutes","title":"Min_30"},{"location":"reference_all/#longbridge.openapi.Period.Min_60","text":"Bases: Period Sixty Minutes","title":"Min_60"},{"location":"reference_all/#longbridge.openapi.Period.Day","text":"Bases: Period One Days","title":"Day"},{"location":"reference_all/#longbridge.openapi.Period.Week","text":"Bases: Period One Week","title":"Week"},{"location":"reference_all/#longbridge.openapi.Period.Month","text":"Bases: Period One Month","title":"Month"},{"location":"reference_all/#longbridge.openapi.Period.Year","text":"Bases: Period One Year","title":"Year"},{"location":"reference_all/#longbridge.openapi.StrikePriceInfo","text":"Strike price info","title":"StrikePriceInfo"},{"location":"reference_all/#longbridge.openapi.StrikePriceInfo.price","text":"Strike price","title":"price"},{"location":"reference_all/#longbridge.openapi.StrikePriceInfo.call_symbol","text":"Security code of call option","title":"call_symbol"},{"location":"reference_all/#longbridge.openapi.StrikePriceInfo.put_symbol","text":"Security code of put option","title":"put_symbol"},{"location":"reference_all/#longbridge.openapi.StrikePriceInfo.standard","text":"Is standard","title":"standard"},{"location":"reference_all/#longbridge.openapi.IssuerInfo","text":"Issuer info","title":"IssuerInfo"},{"location":"reference_all/#longbridge.openapi.IssuerInfo.issuer_id","text":"Issuer ID","title":"issuer_id"},{"location":"reference_all/#longbridge.openapi.IssuerInfo.name_cn","text":"Issuer name (zh-CN)","title":"name_cn"},{"location":"reference_all/#longbridge.openapi.IssuerInfo.name_en","text":"Issuer name (en)","title":"name_en"},{"location":"reference_all/#longbridge.openapi.IssuerInfo.name_hk","text":"Issuer name (zh-HK)","title":"name_hk"},{"location":"reference_all/#longbridge.openapi.TradingSessionInfo","text":"The information of trading session","title":"TradingSessionInfo"},{"location":"reference_all/#longbridge.openapi.TradingSessionInfo.begin_time","text":"Being trading time","title":"begin_time"},{"location":"reference_all/#longbridge.openapi.TradingSessionInfo.end_time","text":"End trading time","title":"end_time"},{"location":"reference_all/#longbridge.openapi.TradingSessionInfo.trade_session","text":"Trading session","title":"trade_session"},{"location":"reference_all/#longbridge.openapi.MarketTradingSession","text":"Market trading session","title":"MarketTradingSession"},{"location":"reference_all/#longbridge.openapi.MarketTradingSession.market","text":"Market","title":"market"},{"location":"reference_all/#longbridge.openapi.MarketTradingSession.trade_session","text":"Trading session","title":"trade_session"},{"location":"reference_all/#longbridge.openapi.MarketTradingDays","text":"","title":"MarketTradingDays"},{"location":"reference_all/#longbridge.openapi.MarketTradingDays.trading_days","text":"","title":"trading_days"},{"location":"reference_all/#longbridge.openapi.MarketTradingDays.half_trading_days","text":"","title":"half_trading_days"},{"location":"reference_all/#longbridge.openapi.RealtimeQuote","text":"Real-time quote","title":"RealtimeQuote"},{"location":"reference_all/#longbridge.openapi.RealtimeQuote.symbol","text":"Security code","title":"symbol"},{"location":"reference_all/#longbridge.openapi.RealtimeQuote.last_done","text":"Latest price","title":"last_done"},{"location":"reference_all/#longbridge.openapi.RealtimeQuote.open","text":"Open","title":"open"},{"location":"reference_all/#longbridge.openapi.RealtimeQuote.high","text":"High","title":"high"},{"location":"reference_all/#longbridge.openapi.RealtimeQuote.low","text":"Low","title":"low"},{"location":"reference_all/#longbridge.openapi.RealtimeQuote.timestamp","text":"Time of latest price","title":"timestamp"},{"location":"reference_all/#longbridge.openapi.RealtimeQuote.volume","text":"Volume","title":"volume"},{"location":"reference_all/#longbridge.openapi.RealtimeQuote.turnover","text":"Turnover","title":"turnover"},{"location":"reference_all/#longbridge.openapi.RealtimeQuote.trade_status","text":"Security trading status","title":"trade_status"},{"location":"reference_all/#longbridge.openapi.Subscription","text":"Subscription","title":"Subscription"},{"location":"reference_all/#longbridge.openapi.Subscription.symbol","text":"Security code","title":"symbol"},{"location":"reference_all/#longbridge.openapi.Subscription.sub_types","text":"Subscription types","title":"sub_types"},{"location":"reference_all/#longbridge.openapi.QuoteContext","text":"Quote context Parameters: Name Type Description Default config Config Configuration object required handler Optional [ QuoteHandler ] Push message handler None","title":"QuoteContext"},{"location":"reference_all/#longbridge.openapi.QuoteContext.__init__","text":"","title":"__init__()"},{"location":"reference_all/#longbridge.openapi.QuoteContext.subscribe","text":"Subscribe Parameters: Name Type Description Default symbols List [ str ] Security codes required sub_types List [ Type [ SubType ]] Subscribe types required is_first_push bool Whether to perform a data push immediately after subscribing. (trade not supported) False Examples: :: from time import sleep from longbridge.openapi import QuoteContext, Config, SubType class EventHandler: def on_event(self, symbol: str, msg): print(symbol, msg) config = Config.from_env() ctx = QuoteContext(config, EventHandler()) ctx.subscribe([\"700.HK\", \"AAPL.US\"], [SubType.Quote], is_first_push = True) sleep(30)","title":"subscribe()"},{"location":"reference_all/#longbridge.openapi.QuoteContext.unsubscribe","text":"Unsubscribe Parameters: Name Type Description Default symbols List [ str ] Security codes required sub_types List [ Type [ SubType ]] Subscribe types required Examples: :: from longbridge.openapi import QuoteContext, Config, SubType config = Config.from_env() ctx = QuoteContext(config) ctx.subscribe([\"700.HK\", \"AAPL.US\"], [SubType.Quote]) ctx.unsubscribe([\"AAPL.US\"], [SubType.Quote])","title":"unsubscribe()"},{"location":"reference_all/#longbridge.openapi.QuoteContext.subscriptions","text":"Get subscription information Examples: :: from longbridge.openapi import QuoteContext, Config, SubType config = Config.from_env() ctx = QuoteContext(config) ctx.subscribe([\"700.HK\", \"AAPL.US\"], [SubType.Quote]) resp = ctx.subscriptions() print(resp)","title":"subscriptions()"},{"location":"reference_all/#longbridge.openapi.QuoteContext.static_info","text":"Get basic information of securities Parameters: Name Type Description Default symbols List [ str ] Security codes required Returns: Type Description List [ SecurityStaticInfo ] Security info list Examples: :: from longbridge.openapi import QuoteContext, Config config = Config.from_env() ctx = QuoteContext(config) resp = ctx.static_info([\"700.HK\", \"AAPL.US\", \"TSLA.US\", \"NFLX.US\"]) print(resp)","title":"static_info()"},{"location":"reference_all/#longbridge.openapi.QuoteContext.quote","text":"Get quote of securities Parameters: Name Type Description Default symbols List [ str ] Security codes required Returns: Type Description List [ SecurityQuote ] Security quote list Examples: :: from longbridge.openapi import QuoteContext, Config config = Config.from_env() ctx = QuoteContext(config) resp = ctx.quote([\"700.HK\", \"AAPL.US\", \"TSLA.US\", \"NFLX.US\"]) print(resp)","title":"quote()"},{"location":"reference_all/#longbridge.openapi.QuoteContext.option_quote","text":"Get quote of option securities Parameters: Name Type Description Default symbols List [ str ] Security codes required Returns: Type Description List [ OptionQuote ] Option quote list Examples: :: from longbridge.openapi import QuoteContext, Config config = Config.from_env() ctx = QuoteContext(config) resp = ctx.option_quote([\"AAPL230317P160000.US\"]) print(resp)","title":"option_quote()"},{"location":"reference_all/#longbridge.openapi.QuoteContext.warrant_quote","text":"Get quote of warrant securities Parameters: Name Type Description Default symbols List [ str ] Security codes required Returns: Type Description List [ WarrantQuote ] Warrant quote list Examples: :: from longbridge.openapi import QuoteContext, Config config = Config.from_env() ctx = QuoteContext(config) resp = ctx.warrant_quote([\"21125.HK\"]) print(resp)","title":"warrant_quote()"},{"location":"reference_all/#longbridge.openapi.QuoteContext.depth","text":"Get security depth Parameters: Name Type Description Default symbol str Security code required Returns: Type Description SecurityDepth Security depth Examples: :: from longbridge.openapi import QuoteContext, Config config = Config.from_env() ctx = QuoteContext(config) resp = ctx.depth(\"700.HK\") print(resp)","title":"depth()"},{"location":"reference_all/#longbridge.openapi.QuoteContext.brokers","text":"Get security brokers Parameters: Name Type Description Default symbol str Security code required Returns: Type Description SecurityBrokers Security brokers Examples: :: from longbridge.openapi import QuoteContext, Config config = Config.from_env() ctx = QuoteContext(config) resp = ctx.brokers(\"700.HK\") print(resp)","title":"brokers()"},{"location":"reference_all/#longbridge.openapi.QuoteContext.participants","text":"Get participants Returns: Type Description List [ ParticipantInfo ] Participants Examples: :: from longbridge.openapi import QuoteContext, Config config = Config.from_env() ctx = QuoteContext(config) resp = ctx.participants() print(resp)","title":"participants()"},{"location":"reference_all/#longbridge.openapi.QuoteContext.trades","text":"Get security trades Parameters: Name Type Description Default symbol str Security code required count int Count of trades (Maximum is 1000 ) required Returns: Type Description List [ Trade ] Trades Examples: :: from longbridge.openapi import QuoteContext, Config config = Config.from_env() ctx = QuoteContext(config) resp = ctx.trades(\"700.HK\", 10) print(resp)","title":"trades()"},{"location":"reference_all/#longbridge.openapi.QuoteContext.intraday","text":"Get security intraday lines Parameters: Name Type Description Default symbol str Security code required Returns: Type Description List [ IntradayLine ] Intraday lines Examples: :: from longbridge.openapi import QuoteContext, Config config = Config.from_env() ctx = QuoteContext(config) resp = ctx.intraday(\"700.HK\") print(resp)","title":"intraday()"},{"location":"reference_all/#longbridge.openapi.QuoteContext.candlesticks","text":"Get security candlesticks Parameters: Name Type Description Default symbol str Security code required period Type [ Period ] Candlestick period required count int Count of cancdlestick (Maximum is 1000 ) required adjust_type Type [ AdjustType ] Adjustment type required Returns: Type Description List [ Candlestick ] Candlesticks Examples: :: from longbridge.openapi import QuoteContext, Config, Period, AdjustType config = Config.from_env() ctx = QuoteContext(config) resp = ctx.candlesticks(\"700.HK\", Period.Day, 10, AdjustType.NoAdjust) print(resp)","title":"candlesticks()"},{"location":"reference_all/#longbridge.openapi.QuoteContext.option_chain_expiry_date_list","text":"Get option chain expiry date list Parameters: Name Type Description Default symbol str Security code required Returns: Type Description List [ date ] Option chain expiry date list Examples: :: from longbridge.openapi import QuoteContext, Config config = Config.from_env() ctx = QuoteContext(config) resp = ctx.option_chain_expiry_date_list(\"AAPL.US\") print(resp)","title":"option_chain_expiry_date_list()"},{"location":"reference_all/#longbridge.openapi.QuoteContext.option_chain_info_by_date","text":"Get option chain info by date Parameters: Name Type Description Default symbol str Security code required expiry_date date Expiry date required Returns: Type Description List [ StrikePriceInfo ] Option chain info Examples: :: from datetime import date from longbridge.openapi import QuoteContext, Config config = Config.from_env() ctx = QuoteContext(config) resp = ctx.option_chain_info_by_date(\"AAPL.US\", date(2023, 1, 20)) print(resp)","title":"option_chain_info_by_date()"},{"location":"reference_all/#longbridge.openapi.QuoteContext.warrant_issuers","text":"Get warrant issuers Returns: Type Description List [ IssuerInfo ] Warrant issuers Examples: :: from longbridge.openapi import QuoteContext, Config config = Config.from_env() ctx = QuoteContext(config) resp = ctx.warrant_issuers() print(resp)","title":"warrant_issuers()"},{"location":"reference_all/#longbridge.openapi.QuoteContext.trading_session","text":"Get trading session of the day Returns: Type Description List [ MarketTradingSession ] Trading session of the day Examples: :: from longbridge.openapi import QuoteContext, Config config = Config.from_env() ctx = QuoteContext(config) resp = ctx.trading_session() print(resp)","title":"trading_session()"},{"location":"reference_all/#longbridge.openapi.QuoteContext.trading_days","text":"Get trading session of the day The interval must be less than one month, and only the most recent year is supported. Parameters: Name Type Description Default market Type [ Market ] Market required begin date Begin date required end date End date required Returns: Type Description MarketTradingDays Trading days Examples: :: from datetime import date from longbridge.openapi import QuoteContext, Config, Market config = Config.from_env() ctx = QuoteContext(config) resp = ctx.trading_days(Market.HK, date(2022, 1, 1), date(2022, 2, 1)) print(resp)","title":"trading_days()"},{"location":"reference_all/#longbridge.openapi.QuoteContext.realtime_quote","text":"Get real-time quote Get real-time quotes of the subscribed symbols, it always returns the data in the local storage. Parameters: Name Type Description Default symbols List [ str ] Security codes required Returns: Type Description List [ RealtimeQuote ] Quote list Examples: :: from time import sleep from longbridge.openapi import QuoteContext, Config, SubType config = Config.from_env() ctx = QuoteContext(config) ctx.subscribe([\"HK.700\", \"AAPL.US\"], [SubType.Quote], is_first_push = True) sleep(5) resp = ctx.realtime_quote([\"HK.700\", \"AAPL.US\"]) print(resp)","title":"realtime_quote()"},{"location":"reference_all/#longbridge.openapi.QuoteContext.realtime_depth","text":"Get real-time depth Get real-time depth of the subscribed symbols, it always returns the data in the local storage. Parameters: Name Type Description Default symbol str Security code required Returns: Type Description SecurityDepth Security depth Examples: :: from time import sleep from longbridge.openapi import QuoteContext, Config, SubType config = Config.from_env() ctx = QuoteContext(config) ctx.subscribe([\"HK.700\", \"AAPL.US\"], [SubType.Depth], is_first_push = True) sleep(5) resp = ctx.realtime_depth(\"HK.700\") print(resp)","title":"realtime_depth()"},{"location":"reference_all/#longbridge.openapi.QuoteContext.realtime_brokers","text":"Get real-time brokers Get real-time brokers of the subscribed symbols, it always returns the data in the local storage. Parameters: Name Type Description Default symbol str Security code required Returns: Type Description SecurityBrokers Security brokers Examples: :: from time import sleep from longbridge.openapi import QuoteContext, Config, SubType config = Config.from_env() ctx = QuoteContext(config) ctx.subscribe([\"HK.700\", \"AAPL.US\"], [SubType.Brokers], is_first_push = True) sleep(5) resp = ctx.realtime_brokers(\"HK.700\") print(resp)","title":"realtime_brokers()"},{"location":"reference_all/#longbridge.openapi.QuoteContext.realtime_trades","text":"Get real-time trades Get real-time trades of the subscribed symbols, it always returns the data in the local storage. Parameters: Name Type Description Default symbol str Security code required count int Count of trades required Returns: Type Description List [ Trade ] Security trades Examples: :: from time import sleep from longbridge.openapi import QuoteContext, Config, SubType config = Config.from_env() ctx = QuoteContext(config) ctx.subscribe([\"HK.700\", \"AAPL.US\"], [SubType.Trade], is_first_push = False) sleep(5) resp = ctx.realtime_trades(\"HK.700\", 10) print(resp)","title":"realtime_trades()"},{"location":"reference_all/#longbridge.openapi.OrderSide","text":"Order side","title":"OrderSide"},{"location":"reference_all/#longbridge.openapi.OrderSide.Unknown","text":"Bases: OrderSide Unknown","title":"Unknown"},{"location":"reference_all/#longbridge.openapi.OrderSide.Buy","text":"Bases: OrderSide Buy","title":"Buy"},{"location":"reference_all/#longbridge.openapi.OrderSide.Sell","text":"Bases: OrderSide Sell","title":"Sell"},{"location":"reference_all/#longbridge.openapi.OrderType","text":"Order type","title":"OrderType"},{"location":"reference_all/#longbridge.openapi.OrderType.Unknown","text":"Bases: OrderType Unknown","title":"Unknown"},{"location":"reference_all/#longbridge.openapi.OrderType.LO","text":"Bases: OrderType Limit Order","title":"LO"},{"location":"reference_all/#longbridge.openapi.OrderType.ELO","text":"Bases: OrderType Enhanced Limit Order","title":"ELO"},{"location":"reference_all/#longbridge.openapi.OrderType.MO","text":"Bases: OrderType Market Order","title":"MO"},{"location":"reference_all/#longbridge.openapi.OrderType.AO","text":"Bases: OrderType At-auction Order","title":"AO"},{"location":"reference_all/#longbridge.openapi.OrderType.ALO","text":"Bases: OrderType At-auction Limit Order","title":"ALO"},{"location":"reference_all/#longbridge.openapi.OrderType.ODD","text":"Bases: OrderType Odd Lots","title":"ODD"},{"location":"reference_all/#longbridge.openapi.OrderType.LIT","text":"Bases: OrderType Limit If Touched","title":"LIT"},{"location":"reference_all/#longbridge.openapi.OrderType.MIT","text":"Bases: OrderType Market If Touched","title":"MIT"},{"location":"reference_all/#longbridge.openapi.OrderType.TSLPAMT","text":"Bases: OrderType Trailing Limit If Touched (Trailing Amount)","title":"TSLPAMT"},{"location":"reference_all/#longbridge.openapi.OrderType.TSLPPCT","text":"Bases: OrderType Trailing Limit If Touched (Trailing Percent)","title":"TSLPPCT"},{"location":"reference_all/#longbridge.openapi.OrderType.TSMAMT","text":"Bases: OrderType Trailing Market If Touched (Trailing Amount)","title":"TSMAMT"},{"location":"reference_all/#longbridge.openapi.OrderType.TSMPCT","text":"Bases: OrderType Trailing Market If Touched (Trailing Percent)","title":"TSMPCT"},{"location":"reference_all/#longbridge.openapi.OrderStatus","text":"Order status","title":"OrderStatus"},{"location":"reference_all/#longbridge.openapi.OrderStatus.Unknown","text":"Bases: OrderStatus Unknown","title":"Unknown"},{"location":"reference_all/#longbridge.openapi.OrderStatus.NotReported","text":"Bases: OrderStatus Not reported","title":"NotReported"},{"location":"reference_all/#longbridge.openapi.OrderStatus.ReplacedNotReported","text":"Bases: OrderStatus Not reported (Replaced Order)","title":"ReplacedNotReported"},{"location":"reference_all/#longbridge.openapi.OrderStatus.ProtectedNotReported","text":"Bases: OrderStatus Not reported (Protected Order)","title":"ProtectedNotReported"},{"location":"reference_all/#longbridge.openapi.OrderStatus.VarietiesNotReported","text":"Bases: OrderStatus Not reported (Conditional Order)","title":"VarietiesNotReported"},{"location":"reference_all/#longbridge.openapi.OrderStatus.Filled","text":"Bases: OrderStatus Filled","title":"Filled"},{"location":"reference_all/#longbridge.openapi.OrderStatus.WaitToNew","text":"Bases: OrderStatus Wait To New","title":"WaitToNew"},{"location":"reference_all/#longbridge.openapi.OrderStatus.New","text":"Bases: OrderStatus New","title":"New"},{"location":"reference_all/#longbridge.openapi.OrderStatus.WaitToReplace","text":"Bases: OrderStatus Wait To Replace","title":"WaitToReplace"},{"location":"reference_all/#longbridge.openapi.OrderStatus.PendingReplace","text":"Bases: OrderStatus Pending Replace","title":"PendingReplace"},{"location":"reference_all/#longbridge.openapi.OrderStatus.Replaced","text":"Bases: OrderStatus Replaced","title":"Replaced"},{"location":"reference_all/#longbridge.openapi.OrderStatus.PartialFilled","text":"Bases: OrderStatus Partial Filled","title":"PartialFilled"},{"location":"reference_all/#longbridge.openapi.OrderStatus.WaitToCancel","text":"Bases: OrderStatus Wait To Cancel","title":"WaitToCancel"},{"location":"reference_all/#longbridge.openapi.OrderStatus.PendingCancel","text":"Bases: OrderStatus Pending Cancel","title":"PendingCancel"},{"location":"reference_all/#longbridge.openapi.OrderStatus.Rejected","text":"Bases: OrderStatus Rejected","title":"Rejected"},{"location":"reference_all/#longbridge.openapi.OrderStatus.Canceled","text":"Bases: OrderStatus Canceled","title":"Canceled"},{"location":"reference_all/#longbridge.openapi.OrderStatus.Expired","text":"Bases: OrderStatus ExpiredStatus","title":"Expired"},{"location":"reference_all/#longbridge.openapi.OrderStatus.PartialWithdrawal","text":"Bases: OrderStatus PartialWithdrawal","title":"PartialWithdrawal"},{"location":"reference_all/#longbridge.openapi.OrderTag","text":"Order tag","title":"OrderTag"},{"location":"reference_all/#longbridge.openapi.OrderTag.Unknown","text":"Bases: OrderTag Unknown","title":"Unknown"},{"location":"reference_all/#longbridge.openapi.OrderTag.Normal","text":"Bases: OrderTag Normal Order","title":"Normal"},{"location":"reference_all/#longbridge.openapi.OrderTag.LongTerm","text":"Bases: OrderTag Long term Order","title":"LongTerm"},{"location":"reference_all/#longbridge.openapi.OrderTag.Grey","text":"Bases: OrderTag Grey Order","title":"Grey"},{"location":"reference_all/#longbridge.openapi.TriggerStatus","text":"Trigger status","title":"TriggerStatus"},{"location":"reference_all/#longbridge.openapi.TriggerStatus.Unknown","text":"Bases: TriggerStatus Unknown","title":"Unknown"},{"location":"reference_all/#longbridge.openapi.TriggerStatus.Deactive","text":"Bases: TriggerStatus Deactive","title":"Deactive"},{"location":"reference_all/#longbridge.openapi.TriggerStatus.Active","text":"Bases: TriggerStatus Active","title":"Active"},{"location":"reference_all/#longbridge.openapi.TriggerStatus.Released","text":"Bases: TriggerStatus Released","title":"Released"},{"location":"reference_all/#longbridge.openapi.Execution","text":"Execution","title":"Execution"},{"location":"reference_all/#longbridge.openapi.Execution.order_id","text":"Order ID","title":"order_id"},{"location":"reference_all/#longbridge.openapi.Execution.trade_id","text":"Execution ID","title":"trade_id"},{"location":"reference_all/#longbridge.openapi.Execution.symbol","text":"Security code","title":"symbol"},{"location":"reference_all/#longbridge.openapi.Execution.trade_done_at","text":"Trade done time","title":"trade_done_at"},{"location":"reference_all/#longbridge.openapi.Execution.quantity","text":"Executed quantity","title":"quantity"},{"location":"reference_all/#longbridge.openapi.Execution.price","text":"Executed price","title":"price"},{"location":"reference_all/#longbridge.openapi.PushOrderChanged","text":"Order changed message","title":"PushOrderChanged"},{"location":"reference_all/#longbridge.openapi.PushOrderChanged.side","text":"Order side","title":"side"},{"location":"reference_all/#longbridge.openapi.PushOrderChanged.stock_name","text":"Stock name","title":"stock_name"},{"location":"reference_all/#longbridge.openapi.PushOrderChanged.quantity","text":"Submitted quantity","title":"quantity"},{"location":"reference_all/#longbridge.openapi.PushOrderChanged.symbol","text":"Order symbol","title":"symbol"},{"location":"reference_all/#longbridge.openapi.PushOrderChanged.order_type","text":"Order type","title":"order_type"},{"location":"reference_all/#longbridge.openapi.PushOrderChanged.price","text":"Submitted price","title":"price"},{"location":"reference_all/#longbridge.openapi.PushOrderChanged.executed_quantity","text":"Executed quantity","title":"executed_quantity"},{"location":"reference_all/#longbridge.openapi.PushOrderChanged.executed_price","text":"Executed price","title":"executed_price"},{"location":"reference_all/#longbridge.openapi.PushOrderChanged.order_id","text":"Order ID","title":"order_id"},{"location":"reference_all/#longbridge.openapi.PushOrderChanged.currency","text":"Currency","title":"currency"},{"location":"reference_all/#longbridge.openapi.PushOrderChanged.status","text":"Order status","title":"status"},{"location":"reference_all/#longbridge.openapi.PushOrderChanged.submitted_at","text":"Submitted time","title":"submitted_at"},{"location":"reference_all/#longbridge.openapi.PushOrderChanged.updated_at","text":"Last updated time","title":"updated_at"},{"location":"reference_all/#longbridge.openapi.PushOrderChanged.trigger_price","text":"Order trigger price","title":"trigger_price"},{"location":"reference_all/#longbridge.openapi.PushOrderChanged.msg","text":"Rejected message or remark","title":"msg"},{"location":"reference_all/#longbridge.openapi.PushOrderChanged.tag","text":"Order tag","title":"tag"},{"location":"reference_all/#longbridge.openapi.PushOrderChanged.trigger_status","text":"Conditional order trigger status","title":"trigger_status"},{"location":"reference_all/#longbridge.openapi.PushOrderChanged.trigger_at","text":"Conditional order trigger time","title":"trigger_at"},{"location":"reference_all/#longbridge.openapi.PushOrderChanged.trailing_amount","text":"Trailing amount","title":"trailing_amount"},{"location":"reference_all/#longbridge.openapi.PushOrderChanged.trailing_percent","text":"Trailing percent","title":"trailing_percent"},{"location":"reference_all/#longbridge.openapi.PushOrderChanged.limit_offset","text":"Limit offset amount","title":"limit_offset"},{"location":"reference_all/#longbridge.openapi.PushOrderChanged.account_no","text":"Account no","title":"account_no"},{"location":"reference_all/#longbridge.openapi.TimeInForceType","text":"Time in force type","title":"TimeInForceType"},{"location":"reference_all/#longbridge.openapi.TimeInForceType.Unknown","text":"Bases: TimeInForceType Unknown","title":"Unknown"},{"location":"reference_all/#longbridge.openapi.TimeInForceType.Day","text":"Bases: TimeInForceType Day Order","title":"Day"},{"location":"reference_all/#longbridge.openapi.TimeInForceType.GoodTilCanceled","text":"Bases: TimeInForceType Good Til Canceled Order","title":"GoodTilCanceled"},{"location":"reference_all/#longbridge.openapi.TimeInForceType.GoodTilDate","text":"Bases: TimeInForceType Good Til Date Order","title":"GoodTilDate"},{"location":"reference_all/#longbridge.openapi.OutsideRTH","text":"Enable or disable outside regular trading hours","title":"OutsideRTH"},{"location":"reference_all/#longbridge.openapi.OutsideRTH.Unknown","text":"Bases: OutsideRTH Unknown","title":"Unknown"},{"location":"reference_all/#longbridge.openapi.OutsideRTH.RTHOnly","text":"Bases: OutsideRTH Regular trading hour only","title":"RTHOnly"},{"location":"reference_all/#longbridge.openapi.OutsideRTH.AnyTime","text":"Bases: OutsideRTH Any time","title":"AnyTime"},{"location":"reference_all/#longbridge.openapi.Order","text":"Order","title":"Order"},{"location":"reference_all/#longbridge.openapi.Order.order_id","text":"Order ID","title":"order_id"},{"location":"reference_all/#longbridge.openapi.Order.status","text":"Order status","title":"status"},{"location":"reference_all/#longbridge.openapi.Order.stock_name","text":"Stock name","title":"stock_name"},{"location":"reference_all/#longbridge.openapi.Order.quantity","text":"Submitted quantity","title":"quantity"},{"location":"reference_all/#longbridge.openapi.Order.executed_quantity","text":"Executed quantity","title":"executed_quantity"},{"location":"reference_all/#longbridge.openapi.Order.price","text":"Submitted price","title":"price"},{"location":"reference_all/#longbridge.openapi.Order.executed_price","text":"Executed price","title":"executed_price"},{"location":"reference_all/#longbridge.openapi.Order.submitted_at","text":"Submitted time","title":"submitted_at"},{"location":"reference_all/#longbridge.openapi.Order.side","text":"Order side","title":"side"},{"location":"reference_all/#longbridge.openapi.Order.symbol","text":"Security code","title":"symbol"},{"location":"reference_all/#longbridge.openapi.Order.order_type","text":"Order type","title":"order_type"},{"location":"reference_all/#longbridge.openapi.Order.last_done","text":"Last done","title":"last_done"},{"location":"reference_all/#longbridge.openapi.Order.trigger_price","text":"LIT / MIT Order Trigger Price","title":"trigger_price"},{"location":"reference_all/#longbridge.openapi.Order.msg","text":"Rejected Message or remark","title":"msg"},{"location":"reference_all/#longbridge.openapi.Order.tag","text":"Order tag","title":"tag"},{"location":"reference_all/#longbridge.openapi.Order.time_in_force","text":"Time in force type","title":"time_in_force"},{"location":"reference_all/#longbridge.openapi.Order.expire_date","text":"Long term order expire date","title":"expire_date"},{"location":"reference_all/#longbridge.openapi.Order.updated_at","text":"Last updated time","title":"updated_at"},{"location":"reference_all/#longbridge.openapi.Order.trigger_at","text":"Conditional order trigger time","title":"trigger_at"},{"location":"reference_all/#longbridge.openapi.Order.trailing_amount","text":"TSMAMT / TSLPAMT order trailing amount","title":"trailing_amount"},{"location":"reference_all/#longbridge.openapi.Order.trailing_percent","text":"TSMPCT / TSLPPCT order trailing percent","title":"trailing_percent"},{"location":"reference_all/#longbridge.openapi.Order.limit_offset","text":"TSLPAMT / TSLPPCT order limit offset amount","title":"limit_offset"},{"location":"reference_all/#longbridge.openapi.Order.trigger_status","text":"Conditional order trigger status","title":"trigger_status"},{"location":"reference_all/#longbridge.openapi.Order.currency","text":"Currency","title":"currency"},{"location":"reference_all/#longbridge.openapi.Order.outside_rth","text":"Enable or disable outside regular trading hours","title":"outside_rth"},{"location":"reference_all/#longbridge.openapi.TradeHandler","text":"Bases: Protocol Trade push message handler","title":"TradeHandler"},{"location":"reference_all/#longbridge.openapi.TradeHandler.on_event","text":"Called when a new message is received","title":"on_event()"},{"location":"reference_all/#longbridge.openapi.SubmitOrderResponse","text":"Response for withdraw order request","title":"SubmitOrderResponse"},{"location":"reference_all/#longbridge.openapi.SubmitOrderResponse.order_id","text":"Order id","title":"order_id"},{"location":"reference_all/#longbridge.openapi.CashInfo","text":"CashInfo","title":"CashInfo"},{"location":"reference_all/#longbridge.openapi.CashInfo.withdraw_cash","text":"Withdraw cash","title":"withdraw_cash"},{"location":"reference_all/#longbridge.openapi.CashInfo.available_cash","text":"Available cash","title":"available_cash"},{"location":"reference_all/#longbridge.openapi.CashInfo.frozen_cash","text":"Frozen cash","title":"frozen_cash"},{"location":"reference_all/#longbridge.openapi.CashInfo.settling_cash","text":"Cash to be settled","title":"settling_cash"},{"location":"reference_all/#longbridge.openapi.CashInfo.currency","text":"Currency","title":"currency"},{"location":"reference_all/#longbridge.openapi.AccountBalance","text":"Account balance","title":"AccountBalance"},{"location":"reference_all/#longbridge.openapi.AccountBalance.total_cash","text":"Total cash","title":"total_cash"},{"location":"reference_all/#longbridge.openapi.AccountBalance.max_finance_amount","text":"Maximum financing amount","title":"max_finance_amount"},{"location":"reference_all/#longbridge.openapi.AccountBalance.remaining_finance_amount","text":"Remaining financing amount","title":"remaining_finance_amount"},{"location":"reference_all/#longbridge.openapi.AccountBalance.risk_level","text":"Risk control level","title":"risk_level"},{"location":"reference_all/#longbridge.openapi.AccountBalance.margin_call","text":"Margin call","title":"margin_call"},{"location":"reference_all/#longbridge.openapi.AccountBalance.currency","text":"Currency","title":"currency"},{"location":"reference_all/#longbridge.openapi.AccountBalance.cash_infos","text":"Cash details","title":"cash_infos"},{"location":"reference_all/#longbridge.openapi.BalanceType","text":"","title":"BalanceType"},{"location":"reference_all/#longbridge.openapi.BalanceType.Unknown","text":"Bases: BalanceType","title":"Unknown"},{"location":"reference_all/#longbridge.openapi.BalanceType.Cash","text":"Bases: BalanceType","title":"Cash"},{"location":"reference_all/#longbridge.openapi.BalanceType.Stock","text":"Bases: BalanceType","title":"Stock"},{"location":"reference_all/#longbridge.openapi.BalanceType.Fund","text":"Bases: BalanceType","title":"Fund"},{"location":"reference_all/#longbridge.openapi.CashFlowDirection","text":"Cash flow direction","title":"CashFlowDirection"},{"location":"reference_all/#longbridge.openapi.CashFlowDirection.Unknown","text":"Bases: CashFlowDirection Unknown","title":"Unknown"},{"location":"reference_all/#longbridge.openapi.CashFlowDirection.Out","text":"Bases: CashFlowDirection Out","title":"Out"},{"location":"reference_all/#longbridge.openapi.CashFlowDirection.In","text":"Bases: CashFlowDirection Stock","title":"In"},{"location":"reference_all/#longbridge.openapi.CashFlow","text":"Cash flow","title":"CashFlow"},{"location":"reference_all/#longbridge.openapi.CashFlow.transaction_flow_name","text":"Cash flow name","title":"transaction_flow_name"},{"location":"reference_all/#longbridge.openapi.CashFlow.direction","text":"Outflow direction","title":"direction"},{"location":"reference_all/#longbridge.openapi.CashFlow.business_type","text":"Balance type","title":"business_type"},{"location":"reference_all/#longbridge.openapi.CashFlow.balance","text":"Cash amount","title":"balance"},{"location":"reference_all/#longbridge.openapi.CashFlow.currency","text":"Cash currency","title":"currency"},{"location":"reference_all/#longbridge.openapi.CashFlow.business_time","text":"Business time","title":"business_time"},{"location":"reference_all/#longbridge.openapi.CashFlow.symbol","text":"Associated Stock code information","title":"symbol"},{"location":"reference_all/#longbridge.openapi.CashFlow.description","text":"Cash flow description","title":"description"},{"location":"reference_all/#longbridge.openapi.FundPosition","text":"Fund position","title":"FundPosition"},{"location":"reference_all/#longbridge.openapi.FundPosition.symbol","text":"Fund ISIN code","title":"symbol"},{"location":"reference_all/#longbridge.openapi.FundPosition.current_net_asset_value","text":"Current equity","title":"current_net_asset_value"},{"location":"reference_all/#longbridge.openapi.FundPosition.net_asset_value_day","text":"Current equity PyDecimal","title":"net_asset_value_day"},{"location":"reference_all/#longbridge.openapi.FundPosition.symbol_name","text":"Fund name","title":"symbol_name"},{"location":"reference_all/#longbridge.openapi.FundPosition.currency","text":"Currency","title":"currency"},{"location":"reference_all/#longbridge.openapi.FundPosition.cost_net_asset_value","text":"Net cost","title":"cost_net_asset_value"},{"location":"reference_all/#longbridge.openapi.FundPosition.holding_units","text":"Holding units","title":"holding_units"},{"location":"reference_all/#longbridge.openapi.FundPositionChannel","text":"Fund position channel","title":"FundPositionChannel"},{"location":"reference_all/#longbridge.openapi.FundPositionChannel.account_channel","text":"Account type","title":"account_channel"},{"location":"reference_all/#longbridge.openapi.FundPositionChannel.positions","text":"Fund positions","title":"positions"},{"location":"reference_all/#longbridge.openapi.FundPositionsResponse","text":"Fund positions response","title":"FundPositionsResponse"},{"location":"reference_all/#longbridge.openapi.FundPositionsResponse.channels","text":"Channels","title":"channels"},{"location":"reference_all/#longbridge.openapi.StockPosition","text":"Stock position","title":"StockPosition"},{"location":"reference_all/#longbridge.openapi.StockPosition.symbol","text":"Stock code","title":"symbol"},{"location":"reference_all/#longbridge.openapi.StockPosition.symbol_name","text":"Stock name","title":"symbol_name"},{"location":"reference_all/#longbridge.openapi.StockPosition.quantity","text":"The number of holdings","title":"quantity"},{"location":"reference_all/#longbridge.openapi.StockPosition.available_quality","text":"Available quantity","title":"available_quality"},{"location":"reference_all/#longbridge.openapi.StockPosition.currency","text":"Currency","title":"currency"},{"location":"reference_all/#longbridge.openapi.StockPosition.cost_price","text":"Cost Price(According to the client's choice of average purchase or diluted cost)","title":"cost_price"},{"location":"reference_all/#longbridge.openapi.StockPositionChannel","text":"Stock position channel","title":"StockPositionChannel"},{"location":"reference_all/#longbridge.openapi.StockPositionChannel.account_channel","text":"Account type","title":"account_channel"},{"location":"reference_all/#longbridge.openapi.StockPositionChannel.positions","text":"Stock positions","title":"positions"},{"location":"reference_all/#longbridge.openapi.StockPositionsResponse","text":"Stock positions response","title":"StockPositionsResponse"},{"location":"reference_all/#longbridge.openapi.StockPositionsResponse.channels","text":"Channels","title":"channels"},{"location":"reference_all/#longbridge.openapi.TopicType","text":"Topic type","title":"TopicType"},{"location":"reference_all/#longbridge.openapi.TopicType.Private","text":"Bases: TopicType Private notification for trade","title":"Private"},{"location":"reference_all/#longbridge.openapi.TradeContext","text":"Trade context Parameters: Name Type Description Default config Config Configuration object required handler Optional [ TradeHandler ] Push message handler None","title":"TradeContext"},{"location":"reference_all/#longbridge.openapi.TradeContext.__init__","text":"","title":"__init__()"},{"location":"reference_all/#longbridge.openapi.TradeContext.subscribe","text":"Subscribe Parameters: Name Type Description Default topics List [ str ] Topic list required","title":"subscribe()"},{"location":"reference_all/#longbridge.openapi.TradeContext.unsubscribe","text":"Unsubscribe Parameters: Name Type Description Default topics List [ str ] Topic list required","title":"unsubscribe()"},{"location":"reference_all/#longbridge.openapi.TradeContext.history_executions","text":"Get history executions Parameters: Name Type Description Default symbol Optional [ str ] Filter by security code, example: 700.HK , AAPL.US None start_at Optional [ date ] Start time None end_at Optional [ date ] End time None Returns: Type Description List [ Execution ] Execution list Examples: :: from datetime import datetime from longbridge.openapi import TradeContext, Config config = Config.from_env() ctx = TradeContext(config) resp = ctx.history_executions( symbol = \"700.HK\", start_at = datetime(2022, 5, 9), end_at = datetime(2022, 5, 12), ) print(resp)","title":"history_executions()"},{"location":"reference_all/#longbridge.openapi.TradeContext.today_executions","text":"Get today executions Parameters: Name Type Description Default symbol Optional [ str ] Filter by security code None order_id Optional [ str ] Filter by Order ID None Returns: Type Description List [ Execution ] Execution list Examples: :: from longbridge.openapi import TradeContext, Config config = Config.from_env() ctx = TradeContext(config) resp = ctx.today_executions(symbol = \"700.HK\") print(resp)","title":"today_executions()"},{"location":"reference_all/#longbridge.openapi.TradeContext.history_orders","text":"Get history orders Parameters: Name Type Description Default symbol Optional [ str ] Filter by security code None status List [ Type [ OrderStatus ]] Filter by order status [] side Optional [ Type [ OrderSide ]] Filter by order side None market Optional [ Type [ Market ]] Filter by market type None start_at Optional [ date ] Start time None end_at Optional [ date ] End time None Returns: Type Description List [ Order ] Order list Examples: :: from datetime import datetime from longbridge.openapi import TradeContext, Config, OrderStatus, OrderSide, Market config = Config.from_env() ctx = TradeContext(config) resp = ctx.history_orders( symbol = \"700.HK\", status = [OrderStatus.Filled, OrderStatus.New], side = OrderSide.Buy, market = Market.HK, start_at = datetime(2022, 5, 9), end_at = datetime(2022, 5, 12), ) print(resp)","title":"history_orders()"},{"location":"reference_all/#longbridge.openapi.TradeContext.today_orders","text":"Get today orders Parameters: Name Type Description Default symbol Optional [ str ] Filter by security code None status List [ Type [ OrderStatus ]] Filter by order status [] side Optional [ Type [ OrderSide ]] Filter by order side None market Optional [ Type [ Market ]] Filter by market type None Returns: Type Description List [ Order ] Order list Examples: :: from longbridge.openapi import TradeContext, Config, OrderStatus, OrderSide, Market config = Config.from_env() ctx = TradeContext(config) resp = ctx.today_orders( symbol = \"700.HK\", status = [OrderStatus.Filled, OrderStatus.New], side = OrderSide.Buy, market = Market.HK, ) print(resp)","title":"today_orders()"},{"location":"reference_all/#longbridge.openapi.TradeContext.replace_order","text":"Replace order Parameters: Name Type Description Default quantity Decimal Replaced quantity required price Optional [ Decimal ] Replaced price None trigger_price Optional [ Decimal ] Trigger price ( LIT / MIT Order Required) None limit_offset Optional [ Decimal ] Limit offset amount ( TSLPAMT / TSLPPCT Required) None trailing_amount Optional [ Decimal ] Trailing amount ( TSLPAMT / TSMAMT Required) None trailing_percent Optional [ Decimal ] Trailing percent ( TSLPPCT / TSMAPCT Required) None remark Optional [ str ] Remark (Maximum 64 characters) None Examples: :: from decimal import Decimal from longbridge.openapi import TradeContext, Config config = Config.from_env() ctx = TradeContext(config) ctx.replace_order( order_id = \"709043056541253632\", quantity = Decimal(\"100\"), price = Decimal(\"100\"), )","title":"replace_order()"},{"location":"reference_all/#longbridge.openapi.TradeContext.submit_order","text":"Submit order Parameters: Name Type Description Default symbol str Security code required order_type Type [ OrderType ] Order type required side Type [ OrderSide ] Order Side required submitted_quantity Decimal Submitted quantity required time_in_force Type [ TimeInForceType ] Time in force type required submitted_price Optional [ Decimal ] Submitted price None trigger_price Optional [ Decimal ] Trigger price ( LIT / MIT Required) None limit_offset Optional [ Decimal ] Limit offset amount ( TSLPAMT / TSLPPCT Required) None trailing_amount Optional [ Decimal ] Trailing amount ( TSLPAMT / TSMAMT Required) None trailing_percent Optional [ Decimal ] Trailing percent ( TSLPPCT / TSMAPCT Required) None expire_date Optional [ date ] Long term order expire date (Required when time_in_force is GoodTilDate ) None outside_rth Optional [ Type [ OutsideRTH ]] Enable or disable outside regular trading hours None remark Optional [ str ] Remark (Maximum 64 characters) None Returns: Type Description SubmitOrderResponse Response Examples: :: from decimal import Decimal from longbridge.openapi import TradeContext, Config, OrderSide, OrderType, TimeInForceType config = Config.from_env() ctx = TradeContext(config) resp = ctx.submit_order( side = OrderSide.Buy, symbol = \"700.HK\", order_type = OrderType.LO, submitted_price = Decimal(\"50\"), submitted_quantity = Decimal(\"200\"), time_in_force = TimeInForceType.Day, remark = \"Hello from Python SDK\", ) print(resp)","title":"submit_order()"},{"location":"reference_all/#longbridge.openapi.TradeContext.withdraw_order","text":"Withdraw order Parameters: Name Type Description Default order_id str Order ID required Examples: :: from longbridge.openapi import TradeContext, Config config = Config.from_env() ctx = TradeContext(config) ctx.withdraw_order(\"709043056541253632\")","title":"withdraw_order()"},{"location":"reference_all/#longbridge.openapi.TradeContext.account_balance","text":"Get account balance Returns: Type Description List [ AccountBalance ] Account list Examples: :: from longbridge.openapi import TradeContext, Config config = Config.from_env() ctx = TradeContext(config) resp = ctx.account_balance() print(resp)","title":"account_balance()"},{"location":"reference_all/#longbridge.openapi.TradeContext.cash_flow","text":"Get cash flow Parameters: Name Type Description Default start_at datetime Start time required end_at datetime End time required business_type Optional [ Type [ BalanceType ]] Balance type None symbol Optional [ str ] Target security code None page Optional [ int ] Start page (Default: 1) None size Optional [ int ] Page size (Default: 50) None Returns: Type Description List [ CashFlow ] Cash flow list Examples: :: from datetime import datetime from longbridge.openapi import TradeContext, Config config = Config.from_env() ctx = TradeContext(config) resp = ctx.cash_flow( start_at = datetime(2022, 5, 9), end_at = datetime(2022, 5, 12), ) print(resp)","title":"cash_flow()"},{"location":"reference_all/#longbridge.openapi.TradeContext.fund_positions","text":"Get fund positions Parameters: Name Type Description Default symbols List [ str ] Filter by fund codes [] Returns: Type Description FundPositionsResponse Fund positions Examples: :: from longbridge.openapi import TradeContext, Config config = Config.from_env() ctx = TradeContext(config) resp = ctx.fund_positions() print(resp)","title":"fund_positions()"},{"location":"reference_all/#longbridge.openapi.TradeContext.stock_positions","text":"Get stock positions Parameters: Name Type Description Default symbols List [ str ] Filter by stock codes [] Returns: Type Description StockPositionsResponse Stock positions Examples: :: from longbridge.openapi import TradeContext, Config config = Config.from_env() ctx = TradeContext(config) resp = ctx.stock_positions() print(resp)","title":"stock_positions()"},{"location":"trade_context/","text":"TradeContext Trade context Parameters: Name Type Description Default config Config Configuration object required handler Optional [ TradeHandler ] Push message handler None __init__(config, handler=None) subscribe(topics) Subscribe Parameters: Name Type Description Default topics List [ str ] Topic list required unsubscribe(topics) Unsubscribe Parameters: Name Type Description Default topics List [ str ] Topic list required history_executions(symbol=None, start_at=None, end_at=None) Get history executions Parameters: Name Type Description Default symbol Optional [ str ] Filter by security code, example: 700.HK , AAPL.US None start_at Optional [ date ] Start time None end_at Optional [ date ] End time None Returns: Type Description List [ Execution ] Execution list Examples: :: from datetime import datetime from longbridge.openapi import TradeContext, Config config = Config.from_env() ctx = TradeContext(config) resp = ctx.history_executions( symbol = \"700.HK\", start_at = datetime(2022, 5, 9), end_at = datetime(2022, 5, 12), ) print(resp) today_executions(symbol=None, order_id=None) Get today executions Parameters: Name Type Description Default symbol Optional [ str ] Filter by security code None order_id Optional [ str ] Filter by Order ID None Returns: Type Description List [ Execution ] Execution list Examples: :: from longbridge.openapi import TradeContext, Config config = Config.from_env() ctx = TradeContext(config) resp = ctx.today_executions(symbol = \"700.HK\") print(resp) history_orders(symbol=None, status=[], side=None, market=None, start_at=None, end_at=None) Get history orders Parameters: Name Type Description Default symbol Optional [ str ] Filter by security code None status List [ Type [ OrderStatus ]] Filter by order status [] side Optional [ Type [ OrderSide ]] Filter by order side None market Optional [ Type [ Market ]] Filter by market type None start_at Optional [ date ] Start time None end_at Optional [ date ] End time None Returns: Type Description List [ Order ] Order list Examples: :: from datetime import datetime from longbridge.openapi import TradeContext, Config, OrderStatus, OrderSide, Market config = Config.from_env() ctx = TradeContext(config) resp = ctx.history_orders( symbol = \"700.HK\", status = [OrderStatus.Filled, OrderStatus.New], side = OrderSide.Buy, market = Market.HK, start_at = datetime(2022, 5, 9), end_at = datetime(2022, 5, 12), ) print(resp) today_orders(symbol=None, status=[], side=None, market=None) Get today orders Parameters: Name Type Description Default symbol Optional [ str ] Filter by security code None status List [ Type [ OrderStatus ]] Filter by order status [] side Optional [ Type [ OrderSide ]] Filter by order side None market Optional [ Type [ Market ]] Filter by market type None Returns: Type Description List [ Order ] Order list Examples: :: from longbridge.openapi import TradeContext, Config, OrderStatus, OrderSide, Market config = Config.from_env() ctx = TradeContext(config) resp = ctx.today_orders( symbol = \"700.HK\", status = [OrderStatus.Filled, OrderStatus.New], side = OrderSide.Buy, market = Market.HK, ) print(resp) replace_order(order_id, quantity, price=None, trigger_price=None, limit_offset=None, trailing_amount=None, trailing_percent=None, remark=None) Replace order Parameters: Name Type Description Default quantity Decimal Replaced quantity required price Optional [ Decimal ] Replaced price None trigger_price Optional [ Decimal ] Trigger price ( LIT / MIT Order Required) None limit_offset Optional [ Decimal ] Limit offset amount ( TSLPAMT / TSLPPCT Required) None trailing_amount Optional [ Decimal ] Trailing amount ( TSLPAMT / TSMAMT Required) None trailing_percent Optional [ Decimal ] Trailing percent ( TSLPPCT / TSMAPCT Required) None remark Optional [ str ] Remark (Maximum 64 characters) None Examples: :: from decimal import Decimal from longbridge.openapi import TradeContext, Config config = Config.from_env() ctx = TradeContext(config) ctx.replace_order( order_id = \"709043056541253632\", quantity = Decimal(\"100\"), price = Decimal(\"100\"), ) submit_order(symbol, order_type, side, submitted_quantity, time_in_force, submitted_price=None, trigger_price=None, limit_offset=None, trailing_amount=None, trailing_percent=None, expire_date=None, outside_rth=None, remark=None) Submit order Parameters: Name Type Description Default symbol str Security code required order_type Type [ OrderType ] Order type required side Type [ OrderSide ] Order Side required submitted_quantity Decimal Submitted quantity required time_in_force Type [ TimeInForceType ] Time in force type required submitted_price Optional [ Decimal ] Submitted price None trigger_price Optional [ Decimal ] Trigger price ( LIT / MIT Required) None limit_offset Optional [ Decimal ] Limit offset amount ( TSLPAMT / TSLPPCT Required) None trailing_amount Optional [ Decimal ] Trailing amount ( TSLPAMT / TSMAMT Required) None trailing_percent Optional [ Decimal ] Trailing percent ( TSLPPCT / TSMAPCT Required) None expire_date Optional [ date ] Long term order expire date (Required when time_in_force is GoodTilDate ) None outside_rth Optional [ Type [ OutsideRTH ]] Enable or disable outside regular trading hours None remark Optional [ str ] Remark (Maximum 64 characters) None Returns: Type Description SubmitOrderResponse Response Examples: :: from decimal import Decimal from longbridge.openapi import TradeContext, Config, OrderSide, OrderType, TimeInForceType config = Config.from_env() ctx = TradeContext(config) resp = ctx.submit_order( side = OrderSide.Buy, symbol = \"700.HK\", order_type = OrderType.LO, submitted_price = Decimal(\"50\"), submitted_quantity = Decimal(\"200\"), time_in_force = TimeInForceType.Day, remark = \"Hello from Python SDK\", ) print(resp) withdraw_order(order_id) Withdraw order Parameters: Name Type Description Default order_id str Order ID required Examples: :: from longbridge.openapi import TradeContext, Config config = Config.from_env() ctx = TradeContext(config) ctx.withdraw_order(\"709043056541253632\") account_balance() Get account balance Returns: Type Description List [ AccountBalance ] Account list Examples: :: from longbridge.openapi import TradeContext, Config config = Config.from_env() ctx = TradeContext(config) resp = ctx.account_balance() print(resp) cash_flow(start_at, end_at, business_type=None, symbol=None, page=None, size=None) Get cash flow Parameters: Name Type Description Default start_at datetime Start time required end_at datetime End time required business_type Optional [ Type [ BalanceType ]] Balance type None symbol Optional [ str ] Target security code None page Optional [ int ] Start page (Default: 1) None size Optional [ int ] Page size (Default: 50) None Returns: Type Description List [ CashFlow ] Cash flow list Examples: :: from datetime import datetime from longbridge.openapi import TradeContext, Config config = Config.from_env() ctx = TradeContext(config) resp = ctx.cash_flow( start_at = datetime(2022, 5, 9), end_at = datetime(2022, 5, 12), ) print(resp) fund_positions(symbols=[]) Get fund positions Parameters: Name Type Description Default symbols List [ str ] Filter by fund codes [] Returns: Type Description FundPositionsResponse Fund positions Examples: :: from longbridge.openapi import TradeContext, Config config = Config.from_env() ctx = TradeContext(config) resp = ctx.fund_positions() print(resp) stock_positions(symbols=[]) Get stock positions Parameters: Name Type Description Default symbols List [ str ] Filter by stock codes [] Returns: Type Description StockPositionsResponse Stock positions Examples: :: from longbridge.openapi import TradeContext, Config config = Config.from_env() ctx = TradeContext(config) resp = ctx.stock_positions() print(resp)","title":"TradeContext"},{"location":"trade_context/#tradecontext","text":"Trade context Parameters: Name Type Description Default config Config Configuration object required handler Optional [ TradeHandler ] Push message handler None","title":"TradeContext"},{"location":"trade_context/#longbridge.openapi.TradeContext.__init__","text":"","title":"__init__()"},{"location":"trade_context/#longbridge.openapi.TradeContext.subscribe","text":"Subscribe Parameters: Name Type Description Default topics List [ str ] Topic list required","title":"subscribe()"},{"location":"trade_context/#longbridge.openapi.TradeContext.unsubscribe","text":"Unsubscribe Parameters: Name Type Description Default topics List [ str ] Topic list required","title":"unsubscribe()"},{"location":"trade_context/#longbridge.openapi.TradeContext.history_executions","text":"Get history executions Parameters: Name Type Description Default symbol Optional [ str ] Filter by security code, example: 700.HK , AAPL.US None start_at Optional [ date ] Start time None end_at Optional [ date ] End time None Returns: Type Description List [ Execution ] Execution list Examples: :: from datetime import datetime from longbridge.openapi import TradeContext, Config config = Config.from_env() ctx = TradeContext(config) resp = ctx.history_executions( symbol = \"700.HK\", start_at = datetime(2022, 5, 9), end_at = datetime(2022, 5, 12), ) print(resp)","title":"history_executions()"},{"location":"trade_context/#longbridge.openapi.TradeContext.today_executions","text":"Get today executions Parameters: Name Type Description Default symbol Optional [ str ] Filter by security code None order_id Optional [ str ] Filter by Order ID None Returns: Type Description List [ Execution ] Execution list Examples: :: from longbridge.openapi import TradeContext, Config config = Config.from_env() ctx = TradeContext(config) resp = ctx.today_executions(symbol = \"700.HK\") print(resp)","title":"today_executions()"},{"location":"trade_context/#longbridge.openapi.TradeContext.history_orders","text":"Get history orders Parameters: Name Type Description Default symbol Optional [ str ] Filter by security code None status List [ Type [ OrderStatus ]] Filter by order status [] side Optional [ Type [ OrderSide ]] Filter by order side None market Optional [ Type [ Market ]] Filter by market type None start_at Optional [ date ] Start time None end_at Optional [ date ] End time None Returns: Type Description List [ Order ] Order list Examples: :: from datetime import datetime from longbridge.openapi import TradeContext, Config, OrderStatus, OrderSide, Market config = Config.from_env() ctx = TradeContext(config) resp = ctx.history_orders( symbol = \"700.HK\", status = [OrderStatus.Filled, OrderStatus.New], side = OrderSide.Buy, market = Market.HK, start_at = datetime(2022, 5, 9), end_at = datetime(2022, 5, 12), ) print(resp)","title":"history_orders()"},{"location":"trade_context/#longbridge.openapi.TradeContext.today_orders","text":"Get today orders Parameters: Name Type Description Default symbol Optional [ str ] Filter by security code None status List [ Type [ OrderStatus ]] Filter by order status [] side Optional [ Type [ OrderSide ]] Filter by order side None market Optional [ Type [ Market ]] Filter by market type None Returns: Type Description List [ Order ] Order list Examples: :: from longbridge.openapi import TradeContext, Config, OrderStatus, OrderSide, Market config = Config.from_env() ctx = TradeContext(config) resp = ctx.today_orders( symbol = \"700.HK\", status = [OrderStatus.Filled, OrderStatus.New], side = OrderSide.Buy, market = Market.HK, ) print(resp)","title":"today_orders()"},{"location":"trade_context/#longbridge.openapi.TradeContext.replace_order","text":"Replace order Parameters: Name Type Description Default quantity Decimal Replaced quantity required price Optional [ Decimal ] Replaced price None trigger_price Optional [ Decimal ] Trigger price ( LIT / MIT Order Required) None limit_offset Optional [ Decimal ] Limit offset amount ( TSLPAMT / TSLPPCT Required) None trailing_amount Optional [ Decimal ] Trailing amount ( TSLPAMT / TSMAMT Required) None trailing_percent Optional [ Decimal ] Trailing percent ( TSLPPCT / TSMAPCT Required) None remark Optional [ str ] Remark (Maximum 64 characters) None Examples: :: from decimal import Decimal from longbridge.openapi import TradeContext, Config config = Config.from_env() ctx = TradeContext(config) ctx.replace_order( order_id = \"709043056541253632\", quantity = Decimal(\"100\"), price = Decimal(\"100\"), )","title":"replace_order()"},{"location":"trade_context/#longbridge.openapi.TradeContext.submit_order","text":"Submit order Parameters: Name Type Description Default symbol str Security code required order_type Type [ OrderType ] Order type required side Type [ OrderSide ] Order Side required submitted_quantity Decimal Submitted quantity required time_in_force Type [ TimeInForceType ] Time in force type required submitted_price Optional [ Decimal ] Submitted price None trigger_price Optional [ Decimal ] Trigger price ( LIT / MIT Required) None limit_offset Optional [ Decimal ] Limit offset amount ( TSLPAMT / TSLPPCT Required) None trailing_amount Optional [ Decimal ] Trailing amount ( TSLPAMT / TSMAMT Required) None trailing_percent Optional [ Decimal ] Trailing percent ( TSLPPCT / TSMAPCT Required) None expire_date Optional [ date ] Long term order expire date (Required when time_in_force is GoodTilDate ) None outside_rth Optional [ Type [ OutsideRTH ]] Enable or disable outside regular trading hours None remark Optional [ str ] Remark (Maximum 64 characters) None Returns: Type Description SubmitOrderResponse Response Examples: :: from decimal import Decimal from longbridge.openapi import TradeContext, Config, OrderSide, OrderType, TimeInForceType config = Config.from_env() ctx = TradeContext(config) resp = ctx.submit_order( side = OrderSide.Buy, symbol = \"700.HK\", order_type = OrderType.LO, submitted_price = Decimal(\"50\"), submitted_quantity = Decimal(\"200\"), time_in_force = TimeInForceType.Day, remark = \"Hello from Python SDK\", ) print(resp)","title":"submit_order()"},{"location":"trade_context/#longbridge.openapi.TradeContext.withdraw_order","text":"Withdraw order Parameters: Name Type Description Default order_id str Order ID required Examples: :: from longbridge.openapi import TradeContext, Config config = Config.from_env() ctx = TradeContext(config) ctx.withdraw_order(\"709043056541253632\")","title":"withdraw_order()"},{"location":"trade_context/#longbridge.openapi.TradeContext.account_balance","text":"Get account balance Returns: Type Description List [ AccountBalance ] Account list Examples: :: from longbridge.openapi import TradeContext, Config config = Config.from_env() ctx = TradeContext(config) resp = ctx.account_balance() print(resp)","title":"account_balance()"},{"location":"trade_context/#longbridge.openapi.TradeContext.cash_flow","text":"Get cash flow Parameters: Name Type Description Default start_at datetime Start time required end_at datetime End time required business_type Optional [ Type [ BalanceType ]] Balance type None symbol Optional [ str ] Target security code None page Optional [ int ] Start page (Default: 1) None size Optional [ int ] Page size (Default: 50) None Returns: Type Description List [ CashFlow ] Cash flow list Examples: :: from datetime import datetime from longbridge.openapi import TradeContext, Config config = Config.from_env() ctx = TradeContext(config) resp = ctx.cash_flow( start_at = datetime(2022, 5, 9), end_at = datetime(2022, 5, 12), ) print(resp)","title":"cash_flow()"},{"location":"trade_context/#longbridge.openapi.TradeContext.fund_positions","text":"Get fund positions Parameters: Name Type Description Default symbols List [ str ] Filter by fund codes [] Returns: Type Description FundPositionsResponse Fund positions Examples: :: from longbridge.openapi import TradeContext, Config config = Config.from_env() ctx = TradeContext(config) resp = ctx.fund_positions() print(resp)","title":"fund_positions()"},{"location":"trade_context/#longbridge.openapi.TradeContext.stock_positions","text":"Get stock positions Parameters: Name Type Description Default symbols List [ str ] Filter by stock codes [] Returns: Type Description StockPositionsResponse Stock positions Examples: :: from longbridge.openapi import TradeContext, Config config = Config.from_env() ctx = TradeContext(config) resp = ctx.stock_positions() print(resp)","title":"stock_positions()"}]}