{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Longbridge OpenAPI SDK for Python longbridge provides an easy-to-use interface for invokes Longbridge OpenAPI . Quickstart Install Longbridge OpenAPI SDK pip install longbridge Setting environment variables(MacOS/Linux) export LONGBRIDGE_APP_KEY=\"App Key get from user center\" export LONGBRIDGE_APP_SECRET=\"App Secret get from user center\" export LONGBRIDGE_ACCESS_TOKEN=\"Access Token get from user center\" Setting environment variables(Windows) setx LONGBRIDGE_APP_KEY \"App Key get from user center\" setx LONGBRIDGE_APP_SECRET \"App Secret get from user center\" setx LONGBRIDGE_ACCESS_TOKEN \"Access Token get from user center\" Quote API (Get basic information of securities) from longbridge.openapi import Config, QuoteContext # Load configuration from environment variables config = Config.from_env() # Create a context for quote APIs ctx = QuoteContext(config) # Get basic information of securities resp = ctx.quote([\"700.HK\", \"AAPL.US\", \"TSLA.US\", \"NFLX.US\"]) print(resp) Quote API (Subscribe quotes) from time import sleep from longbridge.openapi import Config, QuoteContext, SubType, PushQuote # Load configuration from environment variables config = Config.from_env() # A callback to receive quote data def on_quote(self, symbol: str, event: PushQuote): print(symbol, event) # Create a context for quote APIs ctx = QuoteContext(config) ctx.set_on_quote(on_quote) # Subscribe resp = ctx.subscribe([\"700.HK\"], [SubType.Quote], is_first_push=True) # Receive push duration to 30 seconds sleep(30) Trade API (Submit order) from decimal import Decimal from longbridge.openapi import TradeContext, Config, OrderType, OrderSide, TimeInForceType # Load configuration from environment variables config = Config.from_env() # Create a context for trade APIs ctx = TradeContext(config) # Submit order resp = ctx.submit_order(\"700.HK\", OrderType.LO, OrderSide.Buy, Decimal( \"500\"), TimeInForceType.Day, submitted_price=Decimal(\"50\"), remark=\"Hello from Python SDK\") print(resp) License Licensed under either of Apache License, Version 2.0 ( LICENSE-APACHE ) MIT license LICENSE-MIT at your option.","title":"Index"},{"location":"#longbridge-openapi-sdk-for-python","text":"longbridge provides an easy-to-use interface for invokes Longbridge OpenAPI .","title":"Longbridge OpenAPI SDK for Python"},{"location":"#quickstart","text":"Install Longbridge OpenAPI SDK pip install longbridge Setting environment variables(MacOS/Linux) export LONGBRIDGE_APP_KEY=\"App Key get from user center\" export LONGBRIDGE_APP_SECRET=\"App Secret get from user center\" export LONGBRIDGE_ACCESS_TOKEN=\"Access Token get from user center\" Setting environment variables(Windows) setx LONGBRIDGE_APP_KEY \"App Key get from user center\" setx LONGBRIDGE_APP_SECRET \"App Secret get from user center\" setx LONGBRIDGE_ACCESS_TOKEN \"Access Token get from user center\"","title":"Quickstart"},{"location":"#quote-api-get-basic-information-of-securities","text":"from longbridge.openapi import Config, QuoteContext # Load configuration from environment variables config = Config.from_env() # Create a context for quote APIs ctx = QuoteContext(config) # Get basic information of securities resp = ctx.quote([\"700.HK\", \"AAPL.US\", \"TSLA.US\", \"NFLX.US\"]) print(resp)","title":"Quote API (Get basic information of securities)"},{"location":"#quote-api-subscribe-quotes","text":"from time import sleep from longbridge.openapi import Config, QuoteContext, SubType, PushQuote # Load configuration from environment variables config = Config.from_env() # A callback to receive quote data def on_quote(self, symbol: str, event: PushQuote): print(symbol, event) # Create a context for quote APIs ctx = QuoteContext(config) ctx.set_on_quote(on_quote) # Subscribe resp = ctx.subscribe([\"700.HK\"], [SubType.Quote], is_first_push=True) # Receive push duration to 30 seconds sleep(30)","title":"Quote API (Subscribe quotes)"},{"location":"#trade-api-submit-order","text":"from decimal import Decimal from longbridge.openapi import TradeContext, Config, OrderType, OrderSide, TimeInForceType # Load configuration from environment variables config = Config.from_env() # Create a context for trade APIs ctx = TradeContext(config) # Submit order resp = ctx.submit_order(\"700.HK\", OrderType.LO, OrderSide.Buy, Decimal( \"500\"), TimeInForceType.Day, submitted_price=Decimal(\"50\"), remark=\"Hello from Python SDK\") print(resp)","title":"Trade API (Submit order)"},{"location":"#license","text":"Licensed under either of Apache License, Version 2.0 ( LICENSE-APACHE ) MIT license LICENSE-MIT at your option.","title":"License"},{"location":"config/","text":"Config Configuration options for Longbridge sdk Parameters: Name Type Description Default app_key str App Key required app_secret str App Secret required access_token str Access Token required http_url str HTTP API url 'https://openapi.longbridgeapp.com' quote_ws_url str Websocket url for quote API 'wss://openapi-quote.longbridgeapp.com/v2' trade_ws_url str Websocket url for trade API 'wss://openapi-trade.longbridgeapp.com/v2' language Type [ Language ] Language identifier Language . EN __init__ __init__(app_key: str, app_secret: str, access_token: str, http_url: str = 'https://openapi.longbridgeapp.com', quote_ws_url: str = 'wss://openapi-quote.longbridgeapp.com/v2', trade_ws_url: str = 'wss://openapi-trade.longbridgeapp.com/v2', language: Type[Language] = Language.EN) -> None from_env classmethod from_env() -> Config Create a new Config from the given environment variables It first gets the environment variables from the .env file in the current directory. Variables LONGBRIDGE_APP_KEY - App key LONGBRIDGE_APP_SECRET - App secret LONGBRIDGE_ACCESS_TOKEN - Access token LONGBRIDGE_HTTP_URL - HTTP endpoint url LONGBRIDGE_QUOTE_WS_URL - Quote websocket endpoint url LONGBRIDGE_TRADE_WS_URL - Trade websocket endpoint url refresh_access_token refresh_access_token(expired_at: Optional[datetime] = None) -> str Gets a new access_token expired_at - The expiration time of the access token, defaults to 90 days.","title":"Config"},{"location":"config/#config","text":"Configuration options for Longbridge sdk Parameters: Name Type Description Default app_key str App Key required app_secret str App Secret required access_token str Access Token required http_url str HTTP API url 'https://openapi.longbridgeapp.com' quote_ws_url str Websocket url for quote API 'wss://openapi-quote.longbridgeapp.com/v2' trade_ws_url str Websocket url for trade API 'wss://openapi-trade.longbridgeapp.com/v2' language Type [ Language ] Language identifier Language . EN","title":"Config"},{"location":"config/#longbridge.openapi.Config.__init__","text":"__init__(app_key: str, app_secret: str, access_token: str, http_url: str = 'https://openapi.longbridgeapp.com', quote_ws_url: str = 'wss://openapi-quote.longbridgeapp.com/v2', trade_ws_url: str = 'wss://openapi-trade.longbridgeapp.com/v2', language: Type[Language] = Language.EN) -> None","title":"__init__()"},{"location":"config/#longbridge.openapi.Config.from_env","text":"from_env() -> Config Create a new Config from the given environment variables It first gets the environment variables from the .env file in the current directory.","title":"from_env()"},{"location":"config/#longbridge.openapi.Config.from_env--variables","text":"LONGBRIDGE_APP_KEY - App key LONGBRIDGE_APP_SECRET - App secret LONGBRIDGE_ACCESS_TOKEN - Access token LONGBRIDGE_HTTP_URL - HTTP endpoint url LONGBRIDGE_QUOTE_WS_URL - Quote websocket endpoint url LONGBRIDGE_TRADE_WS_URL - Trade websocket endpoint url","title":"Variables"},{"location":"config/#longbridge.openapi.Config.refresh_access_token","text":"refresh_access_token(expired_at: Optional[datetime] = None) -> str Gets a new access_token expired_at - The expiration time of the access token, defaults to 90 days.","title":"refresh_access_token()"},{"location":"quote_context/","text":"QuoteContext Quote context Parameters: Name Type Description Default config Config Configuration object required __init__ __init__(config: Config) -> None set_on_quote set_on_quote(callback: Callable[[str, PushQuote], None]) -> None Set quote callback, after receiving the quote data push, it will call back to this function. set_on_depth set_on_depth(callback: Callable[[str, PushDepth], None]) -> None Set depth callback, after receiving the depth data push, it will call back to this function. set_on_brokers set_on_brokers(callback: Callable[[str, PushBrokers], None]) -> None Set brokers callback, after receiving the brokers data push, it will call back to this function. set_on_trades set_on_trades(callback: Callable[[str, PushTrades], None]) -> None Set trades callback, after receiving the trades data push, it will call back to this function. set_on_candlestick set_on_candlestick(callback: Callable[[str, PushCandlestick], None]) -> None Set candlestick callback, after receiving the candlestick updated event, it will call back to this function. subscribe subscribe(symbols: List[str], sub_types: List[Type[SubType]], is_first_push: bool = False) -> None Subscribe Parameters: Name Type Description Default symbols List [ str ] Security codes required sub_types List [ Type [ SubType ]] Subscribe types required is_first_push bool Whether to perform a data push immediately after subscribing. (trade not supported) False Examples: :: from time import sleep from longbridge.openapi import QuoteContext, Config, SubType, PushQuote def on_quote(symbol: str, event: PushQuote): print(symbol, event) config = Config.from_env() ctx = QuoteContext(config) ctx.set_on_quote(on_quote) ctx.subscribe([\"700.HK\", \"AAPL.US\"], [ SubType.Quote], is_first_push = True) sleep(30) unsubscribe unsubscribe(symbols: List[str], sub_types: List[Type[SubType]]) -> None Unsubscribe Parameters: Name Type Description Default symbols List [ str ] Security codes required sub_types List [ Type [ SubType ]] Subscribe types required Examples: :: from longbridge.openapi import QuoteContext, Config, SubType config = Config.from_env() ctx = QuoteContext(config) ctx.subscribe([\"700.HK\", \"AAPL.US\"], [SubType.Quote]) ctx.unsubscribe([\"AAPL.US\"], [SubType.Quote]) subscribe_candlesticks subscribe_candlesticks(symbol: str, period: Type[Period]) -> None Subscribe security candlesticks Parameters: Name Type Description Default symbol str Security code required period Type [ Period ] Period type required Examples: :: from longbridge.openapi import QuoteContext, Config, PushCandlestick config = Config.from_env() ctx = QuoteContext(config) def on_candlestick(symbol: str, event: PushCandlestick): print(symbol, event) ctx.subscribe_candlesticks(\"700.HK\", Period.Min_1) sleep(30) unsubscribe_candlesticks unsubscribe_candlesticks(symbol: str, period: Type[Period]) -> None Subscribe security candlesticks Parameters: Name Type Description Default symbol str Security code required period Type [ Period ] Period type required subscriptions subscriptions() -> List[Subscription] Get subscription information Examples: :: from longbridge.openapi import QuoteContext, Config, SubType config = Config.from_env() ctx = QuoteContext(config) ctx.subscribe([\"700.HK\", \"AAPL.US\"], [SubType.Quote]) resp = ctx.subscriptions() print(resp) static_info static_info(symbols: List[str]) -> List[SecurityStaticInfo] Get basic information of securities Parameters: Name Type Description Default symbols List [ str ] Security codes required Returns: Type Description List [ SecurityStaticInfo ] Security info list Examples: :: from longbridge.openapi import QuoteContext, Config config = Config.from_env() ctx = QuoteContext(config) resp = ctx.static_info( [\"700.HK\", \"AAPL.US\", \"TSLA.US\", \"NFLX.US\"]) print(resp) quote quote(symbols: List[str]) -> List[SecurityQuote] Get quote of securities Parameters: Name Type Description Default symbols List [ str ] Security codes required Returns: Type Description List [ SecurityQuote ] Security quote list Examples: :: from longbridge.openapi import QuoteContext, Config config = Config.from_env() ctx = QuoteContext(config) resp = ctx.quote([\"700.HK\", \"AAPL.US\", \"TSLA.US\", \"NFLX.US\"]) print(resp) option_quote option_quote(symbols: List[str]) -> List[OptionQuote] Get quote of option securities Parameters: Name Type Description Default symbols List [ str ] Security codes required Returns: Type Description List [ OptionQuote ] Option quote list Examples: :: from longbridge.openapi import QuoteContext, Config config = Config.from_env() ctx = QuoteContext(config) resp = ctx.option_quote([\"AAPL230317P160000.US\"]) print(resp) warrant_quote warrant_quote(symbols: List[str]) -> List[WarrantQuote] Get quote of warrant securities Parameters: Name Type Description Default symbols List [ str ] Security codes required Returns: Type Description List [ WarrantQuote ] Warrant quote list Examples: :: from longbridge.openapi import QuoteContext, Config config = Config.from_env() ctx = QuoteContext(config) resp = ctx.warrant_quote([\"21125.HK\"]) print(resp) depth depth(symbol: str) -> SecurityDepth Get security depth Parameters: Name Type Description Default symbol str Security code required Returns: Type Description SecurityDepth Security depth Examples: :: from longbridge.openapi import QuoteContext, Config config = Config.from_env() ctx = QuoteContext(config) resp = ctx.depth(\"700.HK\") print(resp) brokers brokers(symbol: str) -> SecurityBrokers Get security brokers Parameters: Name Type Description Default symbol str Security code required Returns: Type Description SecurityBrokers Security brokers Examples: :: from longbridge.openapi import QuoteContext, Config config = Config.from_env() ctx = QuoteContext(config) resp = ctx.brokers(\"700.HK\") print(resp) participants participants() -> List[ParticipantInfo] Get participants Returns: Type Description List [ ParticipantInfo ] Participants Examples: :: from longbridge.openapi import QuoteContext, Config config = Config.from_env() ctx = QuoteContext(config) resp = ctx.participants() print(resp) trades trades(symbol: str, count: int) -> List[Trade] Get security trades Parameters: Name Type Description Default symbol str Security code required count int Count of trades (Maximum is 1000 ) required Returns: Type Description List [ Trade ] Trades Examples: :: from longbridge.openapi import QuoteContext, Config config = Config.from_env() ctx = QuoteContext(config) resp = ctx.trades(\"700.HK\", 10) print(resp) intraday intraday(symbol: str) -> List[IntradayLine] Get security intraday lines Parameters: Name Type Description Default symbol str Security code required Returns: Type Description List [ IntradayLine ] Intraday lines Examples: :: from longbridge.openapi import QuoteContext, Config config = Config.from_env() ctx = QuoteContext(config) resp = ctx.intraday(\"700.HK\") print(resp) candlesticks candlesticks(symbol: str, period: Type[Period], count: int, adjust_type: Type[AdjustType]) -> List[Candlestick] Get security candlesticks Parameters: Name Type Description Default symbol str Security code required period Type [ Period ] Candlestick period required count int Count of cancdlestick (Maximum is 1000 ) required adjust_type Type [ AdjustType ] Adjustment type required Returns: Type Description List [ Candlestick ] Candlesticks Examples: :: from longbridge.openapi import QuoteContext, Config, Period, AdjustType config = Config.from_env() ctx = QuoteContext(config) resp = ctx.candlesticks( \"700.HK\", Period.Day, 10, AdjustType.NoAdjust) print(resp) option_chain_expiry_date_list option_chain_expiry_date_list(symbol: str) -> List[date] Get option chain expiry date list Parameters: Name Type Description Default symbol str Security code required Returns: Type Description List [ date ] Option chain expiry date list Examples: :: from longbridge.openapi import QuoteContext, Config config = Config.from_env() ctx = QuoteContext(config) resp = ctx.option_chain_expiry_date_list(\"AAPL.US\") print(resp) option_chain_info_by_date option_chain_info_by_date(symbol: str, expiry_date: date) -> List[StrikePriceInfo] Get option chain info by date Parameters: Name Type Description Default symbol str Security code required expiry_date date Expiry date required Returns: Type Description List [ StrikePriceInfo ] Option chain info Examples: :: from datetime import date from longbridge.openapi import QuoteContext, Config config = Config.from_env() ctx = QuoteContext(config) resp = ctx.option_chain_info_by_date( \"AAPL.US\", date(2023, 1, 20)) print(resp) warrant_issuers warrant_issuers() -> List[IssuerInfo] Get warrant issuers Returns: Type Description List [ IssuerInfo ] Warrant issuers Examples: :: from longbridge.openapi import QuoteContext, Config config = Config.from_env() ctx = QuoteContext(config) resp = ctx.warrant_issuers() print(resp) trading_session trading_session() -> List[MarketTradingSession] Get trading session of the day Returns: Type Description List [ MarketTradingSession ] Trading session of the day Examples: :: from longbridge.openapi import QuoteContext, Config config = Config.from_env() ctx = QuoteContext(config) resp = ctx.trading_session() print(resp) trading_days trading_days(market: Type[Market], begin: date, end: date) -> MarketTradingDays Get trading session of the day The interval must be less than one month, and only the most recent year is supported. Parameters: Name Type Description Default market Type [ Market ] Market required begin date Begin date required end date End date required Returns: Type Description MarketTradingDays Trading days Examples: :: from datetime import date from longbridge.openapi import QuoteContext, Config, Market config = Config.from_env() ctx = QuoteContext(config) resp = ctx.trading_days( Market.HK, date(2022, 1, 1), date(2022, 2, 1)) print(resp) capital_flow capital_flow(symbol: str) -> List[CapitalFlowLine] Get capital flow intraday Parameters: Name Type Description Default symbol str Security code required Returns: Type Description List [ CapitalFlowLine ] Capital flow list Examples: :: from longbridge.openapi import QuoteContext, Config config = Config.from_env() ctx = QuoteContext(config) resp = ctx.capital_flow(\"700.HK\") print(resp) capital_distribution capital_distribution(symbol: str) -> CapitalDistributionResponse Get capital distribution Parameters: Name Type Description Default symbol str Security code required Returns: Type Description CapitalDistributionResponse Capital distribution Examples: :: from longbridge.openapi import QuoteContext, Config config = Config.from_env() ctx = QuoteContext(config) resp = ctx.capital_distribution(\"700.HK\") print(resp) watch_list watch_list() -> List[WatchlistGroup] Get watch list Deprecated: use instead watchlist watchlist watchlist() -> List[WatchlistGroup] Get watch list Returns: Type Description List [ WatchlistGroup ] Watch list groups Examples: :: from longbridge.openapi import QuoteContext, Config config = Config.from_env() ctx = QuoteContext(config) resp = ctx.watchlist() print(resp) create_watchlist_group create_watchlist_group(name: str, securities: Optional[List[str]] = None) -> int Create watchlist group Parameters: Name Type Description Default name str Group name required securities Optional [ List [ str ]] Securities None Returns: Type Description int Group ID Examples: :: from longbridge.openapi import QuoteContext, Config config = Config.from_env() ctx = QuoteContext(config) group_id = ctx.create_watchlist_group(name = \"Watchlist1\", securities = [\"700.HK\", \"AAPL.US\"]) print(group_id) delete_watchlist_group delete_watchlist_group(id: int, purge: bool = False) Delete watchlist group Parameters: Name Type Description Default id int Group ID required purge bool Move securities in this group to the default group False Examples: :: from longbridge.openapi import QuoteContext, Config config = Config.from_env() ctx = QuoteContext(config) ctx.delete_watchlist_group(10086) update_watchlist_group update_watchlist_group(id: int, name: Optional[str] = None, securities: Optional[List[str]] = None, mode: Optional[Type[SecuritiesUpdateMode]] = None) Update watchlist group Parameters: Name Type Description Default id int Group ID required name Optional [ str ] Group name None securities Optional [ List [ str ]] Securities None Examples: :: from longbridge.openapi import QuoteContext, Config, SecuritiesUpdateMode config = Config.from_env() ctx = QuoteContext(config) ctx.update_watchlist_group(10086, name = \"Watchlist2\", securities = [\"700.HK\", \"AAPL.US\"], SecuritiesUpdateMode.Replace) realtime_quote realtime_quote(symbols: List[str]) -> List[RealtimeQuote] Get real-time quote Get real-time quotes of the subscribed symbols, it always returns the data in the local storage. Parameters: Name Type Description Default symbols List [ str ] Security codes required Returns: Type Description List [ RealtimeQuote ] Quote list Examples: :: from time import sleep from longbridge.openapi import QuoteContext, Config, SubType config = Config.from_env() ctx = QuoteContext(config) ctx.subscribe([\"700.HK\", \"AAPL.US\"], [ SubType.Quote], is_first_push = True) sleep(5) resp = ctx.realtime_quote([\"700.HK\", \"AAPL.US\"]) print(resp) realtime_depth realtime_depth(symbol: str) -> SecurityDepth Get real-time depth Get real-time depth of the subscribed symbols, it always returns the data in the local storage. Parameters: Name Type Description Default symbol str Security code required Returns: Type Description SecurityDepth Security depth Examples: :: from time import sleep from longbridge.openapi import QuoteContext, Config, SubType config = Config.from_env() ctx = QuoteContext(config) ctx.subscribe([\"700.HK\", \"AAPL.US\"], [ SubType.Depth], is_first_push = True) sleep(5) resp = ctx.realtime_depth(\"700.HK\") print(resp) realtime_brokers realtime_brokers(symbol: str) -> SecurityBrokers Get real-time brokers Get real-time brokers of the subscribed symbols, it always returns the data in the local storage. Parameters: Name Type Description Default symbol str Security code required Returns: Type Description SecurityBrokers Security brokers Examples: :: from time import sleep from longbridge.openapi import QuoteContext, Config, SubType config = Config.from_env() ctx = QuoteContext(config) ctx.subscribe([\"700.HK\", \"AAPL.US\"], [ SubType.Brokers], is_first_push = True) sleep(5) resp = ctx.realtime_brokers(\"700.HK\") print(resp) realtime_trades realtime_trades(symbol: str, count: int) -> List[Trade] Get real-time trades Get real-time trades of the subscribed symbols, it always returns the data in the local storage. Parameters: Name Type Description Default symbol str Security code required count int Count of trades required Returns: Type Description List [ Trade ] Security trades Examples: :: from time import sleep from longbridge.openapi import QuoteContext, Config, SubType config = Config.from_env() ctx = QuoteContext(config) ctx.subscribe([\"700.HK\", \"AAPL.US\"], [ SubType.Trade], is_first_push = False) sleep(5) resp = ctx.realtime_trades(\"700.HK\", 10) print(resp) realtime_candlesticks realtime_candlesticks(symbol: str, period: Type[Period], count: int) -> List[Candlestick] Get real-time candlesticks Get Get real-time candlesticks of the subscribed symbols, it always returns the data in the local storage. Parameters: Name Type Description Default symbol str Security code required period Type [ Period ] Period type required count int Count of candlesticks required Returns: Type Description List [ Candlestick ] Security candlesticks Examples: :: from time import sleep from longbridge.openapi import QuoteContext, Config, Period config = Config.from_env() ctx = QuoteContext(config) ctx.subscribe_candlesticks(\"AAPL.US\", Period.Min_1) sleep(5) resp = ctx.realtime_candlesticks(\"AAPL.US\", Period.Min_1, 10) print(resp)","title":"QuoteContext"},{"location":"quote_context/#quotecontext","text":"Quote context Parameters: Name Type Description Default config Config Configuration object required","title":"QuoteContext"},{"location":"quote_context/#longbridge.openapi.QuoteContext.__init__","text":"__init__(config: Config) -> None","title":"__init__()"},{"location":"quote_context/#longbridge.openapi.QuoteContext.set_on_quote","text":"set_on_quote(callback: Callable[[str, PushQuote], None]) -> None Set quote callback, after receiving the quote data push, it will call back to this function.","title":"set_on_quote()"},{"location":"quote_context/#longbridge.openapi.QuoteContext.set_on_depth","text":"set_on_depth(callback: Callable[[str, PushDepth], None]) -> None Set depth callback, after receiving the depth data push, it will call back to this function.","title":"set_on_depth()"},{"location":"quote_context/#longbridge.openapi.QuoteContext.set_on_brokers","text":"set_on_brokers(callback: Callable[[str, PushBrokers], None]) -> None Set brokers callback, after receiving the brokers data push, it will call back to this function.","title":"set_on_brokers()"},{"location":"quote_context/#longbridge.openapi.QuoteContext.set_on_trades","text":"set_on_trades(callback: Callable[[str, PushTrades], None]) -> None Set trades callback, after receiving the trades data push, it will call back to this function.","title":"set_on_trades()"},{"location":"quote_context/#longbridge.openapi.QuoteContext.set_on_candlestick","text":"set_on_candlestick(callback: Callable[[str, PushCandlestick], None]) -> None Set candlestick callback, after receiving the candlestick updated event, it will call back to this function.","title":"set_on_candlestick()"},{"location":"quote_context/#longbridge.openapi.QuoteContext.subscribe","text":"subscribe(symbols: List[str], sub_types: List[Type[SubType]], is_first_push: bool = False) -> None Subscribe Parameters: Name Type Description Default symbols List [ str ] Security codes required sub_types List [ Type [ SubType ]] Subscribe types required is_first_push bool Whether to perform a data push immediately after subscribing. (trade not supported) False Examples: :: from time import sleep from longbridge.openapi import QuoteContext, Config, SubType, PushQuote def on_quote(symbol: str, event: PushQuote): print(symbol, event) config = Config.from_env() ctx = QuoteContext(config) ctx.set_on_quote(on_quote) ctx.subscribe([\"700.HK\", \"AAPL.US\"], [ SubType.Quote], is_first_push = True) sleep(30)","title":"subscribe()"},{"location":"quote_context/#longbridge.openapi.QuoteContext.unsubscribe","text":"unsubscribe(symbols: List[str], sub_types: List[Type[SubType]]) -> None Unsubscribe Parameters: Name Type Description Default symbols List [ str ] Security codes required sub_types List [ Type [ SubType ]] Subscribe types required Examples: :: from longbridge.openapi import QuoteContext, Config, SubType config = Config.from_env() ctx = QuoteContext(config) ctx.subscribe([\"700.HK\", \"AAPL.US\"], [SubType.Quote]) ctx.unsubscribe([\"AAPL.US\"], [SubType.Quote])","title":"unsubscribe()"},{"location":"quote_context/#longbridge.openapi.QuoteContext.subscribe_candlesticks","text":"subscribe_candlesticks(symbol: str, period: Type[Period]) -> None Subscribe security candlesticks Parameters: Name Type Description Default symbol str Security code required period Type [ Period ] Period type required Examples: :: from longbridge.openapi import QuoteContext, Config, PushCandlestick config = Config.from_env() ctx = QuoteContext(config) def on_candlestick(symbol: str, event: PushCandlestick): print(symbol, event) ctx.subscribe_candlesticks(\"700.HK\", Period.Min_1) sleep(30)","title":"subscribe_candlesticks()"},{"location":"quote_context/#longbridge.openapi.QuoteContext.unsubscribe_candlesticks","text":"unsubscribe_candlesticks(symbol: str, period: Type[Period]) -> None Subscribe security candlesticks Parameters: Name Type Description Default symbol str Security code required period Type [ Period ] Period type required","title":"unsubscribe_candlesticks()"},{"location":"quote_context/#longbridge.openapi.QuoteContext.subscriptions","text":"subscriptions() -> List[Subscription] Get subscription information Examples: :: from longbridge.openapi import QuoteContext, Config, SubType config = Config.from_env() ctx = QuoteContext(config) ctx.subscribe([\"700.HK\", \"AAPL.US\"], [SubType.Quote]) resp = ctx.subscriptions() print(resp)","title":"subscriptions()"},{"location":"quote_context/#longbridge.openapi.QuoteContext.static_info","text":"static_info(symbols: List[str]) -> List[SecurityStaticInfo] Get basic information of securities Parameters: Name Type Description Default symbols List [ str ] Security codes required Returns: Type Description List [ SecurityStaticInfo ] Security info list Examples: :: from longbridge.openapi import QuoteContext, Config config = Config.from_env() ctx = QuoteContext(config) resp = ctx.static_info( [\"700.HK\", \"AAPL.US\", \"TSLA.US\", \"NFLX.US\"]) print(resp)","title":"static_info()"},{"location":"quote_context/#longbridge.openapi.QuoteContext.quote","text":"quote(symbols: List[str]) -> List[SecurityQuote] Get quote of securities Parameters: Name Type Description Default symbols List [ str ] Security codes required Returns: Type Description List [ SecurityQuote ] Security quote list Examples: :: from longbridge.openapi import QuoteContext, Config config = Config.from_env() ctx = QuoteContext(config) resp = ctx.quote([\"700.HK\", \"AAPL.US\", \"TSLA.US\", \"NFLX.US\"]) print(resp)","title":"quote()"},{"location":"quote_context/#longbridge.openapi.QuoteContext.option_quote","text":"option_quote(symbols: List[str]) -> List[OptionQuote] Get quote of option securities Parameters: Name Type Description Default symbols List [ str ] Security codes required Returns: Type Description List [ OptionQuote ] Option quote list Examples: :: from longbridge.openapi import QuoteContext, Config config = Config.from_env() ctx = QuoteContext(config) resp = ctx.option_quote([\"AAPL230317P160000.US\"]) print(resp)","title":"option_quote()"},{"location":"quote_context/#longbridge.openapi.QuoteContext.warrant_quote","text":"warrant_quote(symbols: List[str]) -> List[WarrantQuote] Get quote of warrant securities Parameters: Name Type Description Default symbols List [ str ] Security codes required Returns: Type Description List [ WarrantQuote ] Warrant quote list Examples: :: from longbridge.openapi import QuoteContext, Config config = Config.from_env() ctx = QuoteContext(config) resp = ctx.warrant_quote([\"21125.HK\"]) print(resp)","title":"warrant_quote()"},{"location":"quote_context/#longbridge.openapi.QuoteContext.depth","text":"depth(symbol: str) -> SecurityDepth Get security depth Parameters: Name Type Description Default symbol str Security code required Returns: Type Description SecurityDepth Security depth Examples: :: from longbridge.openapi import QuoteContext, Config config = Config.from_env() ctx = QuoteContext(config) resp = ctx.depth(\"700.HK\") print(resp)","title":"depth()"},{"location":"quote_context/#longbridge.openapi.QuoteContext.brokers","text":"brokers(symbol: str) -> SecurityBrokers Get security brokers Parameters: Name Type Description Default symbol str Security code required Returns: Type Description SecurityBrokers Security brokers Examples: :: from longbridge.openapi import QuoteContext, Config config = Config.from_env() ctx = QuoteContext(config) resp = ctx.brokers(\"700.HK\") print(resp)","title":"brokers()"},{"location":"quote_context/#longbridge.openapi.QuoteContext.participants","text":"participants() -> List[ParticipantInfo] Get participants Returns: Type Description List [ ParticipantInfo ] Participants Examples: :: from longbridge.openapi import QuoteContext, Config config = Config.from_env() ctx = QuoteContext(config) resp = ctx.participants() print(resp)","title":"participants()"},{"location":"quote_context/#longbridge.openapi.QuoteContext.trades","text":"trades(symbol: str, count: int) -> List[Trade] Get security trades Parameters: Name Type Description Default symbol str Security code required count int Count of trades (Maximum is 1000 ) required Returns: Type Description List [ Trade ] Trades Examples: :: from longbridge.openapi import QuoteContext, Config config = Config.from_env() ctx = QuoteContext(config) resp = ctx.trades(\"700.HK\", 10) print(resp)","title":"trades()"},{"location":"quote_context/#longbridge.openapi.QuoteContext.intraday","text":"intraday(symbol: str) -> List[IntradayLine] Get security intraday lines Parameters: Name Type Description Default symbol str Security code required Returns: Type Description List [ IntradayLine ] Intraday lines Examples: :: from longbridge.openapi import QuoteContext, Config config = Config.from_env() ctx = QuoteContext(config) resp = ctx.intraday(\"700.HK\") print(resp)","title":"intraday()"},{"location":"quote_context/#longbridge.openapi.QuoteContext.candlesticks","text":"candlesticks(symbol: str, period: Type[Period], count: int, adjust_type: Type[AdjustType]) -> List[Candlestick] Get security candlesticks Parameters: Name Type Description Default symbol str Security code required period Type [ Period ] Candlestick period required count int Count of cancdlestick (Maximum is 1000 ) required adjust_type Type [ AdjustType ] Adjustment type required Returns: Type Description List [ Candlestick ] Candlesticks Examples: :: from longbridge.openapi import QuoteContext, Config, Period, AdjustType config = Config.from_env() ctx = QuoteContext(config) resp = ctx.candlesticks( \"700.HK\", Period.Day, 10, AdjustType.NoAdjust) print(resp)","title":"candlesticks()"},{"location":"quote_context/#longbridge.openapi.QuoteContext.option_chain_expiry_date_list","text":"option_chain_expiry_date_list(symbol: str) -> List[date] Get option chain expiry date list Parameters: Name Type Description Default symbol str Security code required Returns: Type Description List [ date ] Option chain expiry date list Examples: :: from longbridge.openapi import QuoteContext, Config config = Config.from_env() ctx = QuoteContext(config) resp = ctx.option_chain_expiry_date_list(\"AAPL.US\") print(resp)","title":"option_chain_expiry_date_list()"},{"location":"quote_context/#longbridge.openapi.QuoteContext.option_chain_info_by_date","text":"option_chain_info_by_date(symbol: str, expiry_date: date) -> List[StrikePriceInfo] Get option chain info by date Parameters: Name Type Description Default symbol str Security code required expiry_date date Expiry date required Returns: Type Description List [ StrikePriceInfo ] Option chain info Examples: :: from datetime import date from longbridge.openapi import QuoteContext, Config config = Config.from_env() ctx = QuoteContext(config) resp = ctx.option_chain_info_by_date( \"AAPL.US\", date(2023, 1, 20)) print(resp)","title":"option_chain_info_by_date()"},{"location":"quote_context/#longbridge.openapi.QuoteContext.warrant_issuers","text":"warrant_issuers() -> List[IssuerInfo] Get warrant issuers Returns: Type Description List [ IssuerInfo ] Warrant issuers Examples: :: from longbridge.openapi import QuoteContext, Config config = Config.from_env() ctx = QuoteContext(config) resp = ctx.warrant_issuers() print(resp)","title":"warrant_issuers()"},{"location":"quote_context/#longbridge.openapi.QuoteContext.trading_session","text":"trading_session() -> List[MarketTradingSession] Get trading session of the day Returns: Type Description List [ MarketTradingSession ] Trading session of the day Examples: :: from longbridge.openapi import QuoteContext, Config config = Config.from_env() ctx = QuoteContext(config) resp = ctx.trading_session() print(resp)","title":"trading_session()"},{"location":"quote_context/#longbridge.openapi.QuoteContext.trading_days","text":"trading_days(market: Type[Market], begin: date, end: date) -> MarketTradingDays Get trading session of the day The interval must be less than one month, and only the most recent year is supported. Parameters: Name Type Description Default market Type [ Market ] Market required begin date Begin date required end date End date required Returns: Type Description MarketTradingDays Trading days Examples: :: from datetime import date from longbridge.openapi import QuoteContext, Config, Market config = Config.from_env() ctx = QuoteContext(config) resp = ctx.trading_days( Market.HK, date(2022, 1, 1), date(2022, 2, 1)) print(resp)","title":"trading_days()"},{"location":"quote_context/#longbridge.openapi.QuoteContext.capital_flow","text":"capital_flow(symbol: str) -> List[CapitalFlowLine] Get capital flow intraday Parameters: Name Type Description Default symbol str Security code required Returns: Type Description List [ CapitalFlowLine ] Capital flow list Examples: :: from longbridge.openapi import QuoteContext, Config config = Config.from_env() ctx = QuoteContext(config) resp = ctx.capital_flow(\"700.HK\") print(resp)","title":"capital_flow()"},{"location":"quote_context/#longbridge.openapi.QuoteContext.capital_distribution","text":"capital_distribution(symbol: str) -> CapitalDistributionResponse Get capital distribution Parameters: Name Type Description Default symbol str Security code required Returns: Type Description CapitalDistributionResponse Capital distribution Examples: :: from longbridge.openapi import QuoteContext, Config config = Config.from_env() ctx = QuoteContext(config) resp = ctx.capital_distribution(\"700.HK\") print(resp)","title":"capital_distribution()"},{"location":"quote_context/#longbridge.openapi.QuoteContext.watch_list","text":"watch_list() -> List[WatchlistGroup] Get watch list Deprecated: use instead watchlist","title":"watch_list()"},{"location":"quote_context/#longbridge.openapi.QuoteContext.watchlist","text":"watchlist() -> List[WatchlistGroup] Get watch list Returns: Type Description List [ WatchlistGroup ] Watch list groups Examples: :: from longbridge.openapi import QuoteContext, Config config = Config.from_env() ctx = QuoteContext(config) resp = ctx.watchlist() print(resp)","title":"watchlist()"},{"location":"quote_context/#longbridge.openapi.QuoteContext.create_watchlist_group","text":"create_watchlist_group(name: str, securities: Optional[List[str]] = None) -> int Create watchlist group Parameters: Name Type Description Default name str Group name required securities Optional [ List [ str ]] Securities None Returns: Type Description int Group ID Examples: :: from longbridge.openapi import QuoteContext, Config config = Config.from_env() ctx = QuoteContext(config) group_id = ctx.create_watchlist_group(name = \"Watchlist1\", securities = [\"700.HK\", \"AAPL.US\"]) print(group_id)","title":"create_watchlist_group()"},{"location":"quote_context/#longbridge.openapi.QuoteContext.delete_watchlist_group","text":"delete_watchlist_group(id: int, purge: bool = False) Delete watchlist group Parameters: Name Type Description Default id int Group ID required purge bool Move securities in this group to the default group False Examples: :: from longbridge.openapi import QuoteContext, Config config = Config.from_env() ctx = QuoteContext(config) ctx.delete_watchlist_group(10086)","title":"delete_watchlist_group()"},{"location":"quote_context/#longbridge.openapi.QuoteContext.update_watchlist_group","text":"update_watchlist_group(id: int, name: Optional[str] = None, securities: Optional[List[str]] = None, mode: Optional[Type[SecuritiesUpdateMode]] = None) Update watchlist group Parameters: Name Type Description Default id int Group ID required name Optional [ str ] Group name None securities Optional [ List [ str ]] Securities None Examples: :: from longbridge.openapi import QuoteContext, Config, SecuritiesUpdateMode config = Config.from_env() ctx = QuoteContext(config) ctx.update_watchlist_group(10086, name = \"Watchlist2\", securities = [\"700.HK\", \"AAPL.US\"], SecuritiesUpdateMode.Replace)","title":"update_watchlist_group()"},{"location":"quote_context/#longbridge.openapi.QuoteContext.realtime_quote","text":"realtime_quote(symbols: List[str]) -> List[RealtimeQuote] Get real-time quote Get real-time quotes of the subscribed symbols, it always returns the data in the local storage. Parameters: Name Type Description Default symbols List [ str ] Security codes required Returns: Type Description List [ RealtimeQuote ] Quote list Examples: :: from time import sleep from longbridge.openapi import QuoteContext, Config, SubType config = Config.from_env() ctx = QuoteContext(config) ctx.subscribe([\"700.HK\", \"AAPL.US\"], [ SubType.Quote], is_first_push = True) sleep(5) resp = ctx.realtime_quote([\"700.HK\", \"AAPL.US\"]) print(resp)","title":"realtime_quote()"},{"location":"quote_context/#longbridge.openapi.QuoteContext.realtime_depth","text":"realtime_depth(symbol: str) -> SecurityDepth Get real-time depth Get real-time depth of the subscribed symbols, it always returns the data in the local storage. Parameters: Name Type Description Default symbol str Security code required Returns: Type Description SecurityDepth Security depth Examples: :: from time import sleep from longbridge.openapi import QuoteContext, Config, SubType config = Config.from_env() ctx = QuoteContext(config) ctx.subscribe([\"700.HK\", \"AAPL.US\"], [ SubType.Depth], is_first_push = True) sleep(5) resp = ctx.realtime_depth(\"700.HK\") print(resp)","title":"realtime_depth()"},{"location":"quote_context/#longbridge.openapi.QuoteContext.realtime_brokers","text":"realtime_brokers(symbol: str) -> SecurityBrokers Get real-time brokers Get real-time brokers of the subscribed symbols, it always returns the data in the local storage. Parameters: Name Type Description Default symbol str Security code required Returns: Type Description SecurityBrokers Security brokers Examples: :: from time import sleep from longbridge.openapi import QuoteContext, Config, SubType config = Config.from_env() ctx = QuoteContext(config) ctx.subscribe([\"700.HK\", \"AAPL.US\"], [ SubType.Brokers], is_first_push = True) sleep(5) resp = ctx.realtime_brokers(\"700.HK\") print(resp)","title":"realtime_brokers()"},{"location":"quote_context/#longbridge.openapi.QuoteContext.realtime_trades","text":"realtime_trades(symbol: str, count: int) -> List[Trade] Get real-time trades Get real-time trades of the subscribed symbols, it always returns the data in the local storage. Parameters: Name Type Description Default symbol str Security code required count int Count of trades required Returns: Type Description List [ Trade ] Security trades Examples: :: from time import sleep from longbridge.openapi import QuoteContext, Config, SubType config = Config.from_env() ctx = QuoteContext(config) ctx.subscribe([\"700.HK\", \"AAPL.US\"], [ SubType.Trade], is_first_push = False) sleep(5) resp = ctx.realtime_trades(\"700.HK\", 10) print(resp)","title":"realtime_trades()"},{"location":"quote_context/#longbridge.openapi.QuoteContext.realtime_candlesticks","text":"realtime_candlesticks(symbol: str, period: Type[Period], count: int) -> List[Candlestick] Get real-time candlesticks Get Get real-time candlesticks of the subscribed symbols, it always returns the data in the local storage. Parameters: Name Type Description Default symbol str Security code required period Type [ Period ] Period type required count int Count of candlesticks required Returns: Type Description List [ Candlestick ] Security candlesticks Examples: :: from time import sleep from longbridge.openapi import QuoteContext, Config, Period config = Config.from_env() ctx = QuoteContext(config) ctx.subscribe_candlesticks(\"AAPL.US\", Period.Min_1) sleep(5) resp = ctx.realtime_candlesticks(\"AAPL.US\", Period.Min_1, 10) print(resp)","title":"realtime_candlesticks()"},{"location":"reference_all/","text":"Code Reference OpenApiException Bases: Exception OpenAPI exception code instance-attribute code: Optional[int] Error code message instance-attribute message: str Error message __init__ __init__(code: int, message: str) -> None HttpClient A HTTP client for longbridge open api Parameters: Name Type Description Default http_url str HTTP API url required app_key str App Key required app_secret str App Secret required access_token str Access Token required __init__ __init__(http_url: str, app_key: str, app_secret: str, access_token: str) -> None from_env classmethod from_env() -> HttpClient Create a new HttpClient from the given environment variables It first gets the environment variables from the .env file in the current directory. Variables LONGBRIDGE_HTTP_URL - HTTP endpoint url LONGBRIDGE_APP_KEY - App key LONGBRIDGE_APP_SECRET - App secret LONGBRIDGE_ACCESS_TOKEN - Access token request request(method: str, path: str, headers: Optional[dict[str, str]] = None, body: Optional[Any] = None) -> Any Performs a HTTP reqest Examples: :: from longbridge.openapi import HttpClient client = HttpClient(http_url, app_key, app_secret, access_token); # get resp = client.request(\"get\", \"/foo/bar\"); print(resp) # post client.request(\"get\", \"/foo/bar\", { \"foo\": 1, \"bar\": 2 }); Config Configuration options for Longbridge sdk Parameters: Name Type Description Default app_key str App Key required app_secret str App Secret required access_token str Access Token required http_url str HTTP API url 'https://openapi.longbridgeapp.com' quote_ws_url str Websocket url for quote API 'wss://openapi-quote.longbridgeapp.com/v2' trade_ws_url str Websocket url for trade API 'wss://openapi-trade.longbridgeapp.com/v2' language Type [ Language ] Language identifier Language . EN __init__ __init__(app_key: str, app_secret: str, access_token: str, http_url: str = 'https://openapi.longbridgeapp.com', quote_ws_url: str = 'wss://openapi-quote.longbridgeapp.com/v2', trade_ws_url: str = 'wss://openapi-trade.longbridgeapp.com/v2', language: Type[Language] = Language.EN) -> None from_env classmethod from_env() -> Config Create a new Config from the given environment variables It first gets the environment variables from the .env file in the current directory. Variables LONGBRIDGE_APP_KEY - App key LONGBRIDGE_APP_SECRET - App secret LONGBRIDGE_ACCESS_TOKEN - Access token LONGBRIDGE_HTTP_URL - HTTP endpoint url LONGBRIDGE_QUOTE_WS_URL - Quote websocket endpoint url LONGBRIDGE_TRADE_WS_URL - Trade websocket endpoint url refresh_access_token refresh_access_token(expired_at: Optional[datetime] = None) -> str Gets a new access_token expired_at - The expiration time of the access token, defaults to 90 days. Language Language identifier ZH_CN Bases: Language zh-CN ZH_HK Bases: Language zh-HK EN Bases: Language en Market Market Unknown Bases: Market Unknown US Bases: Market US market HK Bases: Market HK market CN Bases: Market CN market SG Bases: Market SG market PushQuote Quote message last_done instance-attribute last_done: Decimal Latest price open instance-attribute open: Decimal Open high instance-attribute high: Decimal High low instance-attribute low: Decimal Low timestamp instance-attribute timestamp: datetime Time of latest price volume instance-attribute volume: int Volume turnover instance-attribute turnover: Decimal Turnover trade_status instance-attribute trade_status: Type[TradeStatus] Security trading status trade_session instance-attribute trade_session: Type[TradeSession] Trade session PushDepth Depth message asks instance-attribute asks: List[Depth] Ask depth bids instance-attribute bids: List[Depth] Bid depth PushBrokers Brokers message ask_brokers instance-attribute ask_brokers: List[Brokers] Ask brokers bid_brokers instance-attribute bid_brokers: List[Brokers] Bid brokers PushTrades Trades message trades instance-attribute trades: List[Trade] Trades data PushCandlestick Candlestick updated event period instance-attribute period: Period Period type candlestick instance-attribute candlestick: Candlestick Candlestick SubType Subscription flags Quote Bases: SubType Quote Depth Bases: SubType Depth Brokers Bases: SubType Broker Trade Bases: SubType Trade DerivativeType Derivative type Option Bases: DerivativeType US stock options Warrant Bases: DerivativeType HK warrants SecurityBoard Security board Unknown Bases: SecurityBoard Unknown USMain Bases: SecurityBoard US Pink Board USPink Bases: SecurityBoard US Pink Board USDJI Bases: SecurityBoard Dow Jones Industrial Average USNSDQ Bases: SecurityBoard Nasdsaq Index USSector Bases: SecurityBoard US Industry Board USOption Bases: SecurityBoard US Option USOptionS Bases: SecurityBoard US Sepecial Option HKEquity Bases: SecurityBoard Hong Kong Equity Securities HKPreIPO Bases: SecurityBoard HK PreIPO Security HKWarrant Bases: SecurityBoard HK Warrant HKHS Bases: SecurityBoard Hang Seng Index HKSector Bases: SecurityBoard HK Industry Board SHMainConnect Bases: SecurityBoard SH Main Board(Connect) SHMainNonConnect Bases: SecurityBoard SH Main Board(Non Connect) SHSTAR Bases: SecurityBoard SH Science and Technology Innovation Board CNIX Bases: SecurityBoard CN Index CNSector Bases: SecurityBoard CN Industry Board SZMainConnect Bases: SecurityBoard SZ Main Board(Connect) SZMainNonConnect Bases: SecurityBoard SZ Main Board(Non Connect) SZGEMConnect Bases: SecurityBoard SZ Gem Board(Connect) SZGEMNonConnect Bases: SecurityBoard SZ Gem Board(Non Connect) SGMain Bases: SecurityBoard SG Main Board STI Bases: SecurityBoard Singapore Straits Index SGSector Bases: SecurityBoard SG Industry Board SecurityStaticInfo The basic information of securities symbol instance-attribute symbol: str Security code name_cn instance-attribute name_cn: str Security name (zh-CN) name_en instance-attribute name_en: str Security name (en) name_hk instance-attribute name_hk: str Security name (zh-HK) exchange instance-attribute exchange: str Exchange which the security belongs to currency instance-attribute currency: str Trading currency lot_size instance-attribute lot_size: int Lot size total_shares instance-attribute total_shares: int Total shares circulating_shares instance-attribute circulating_shares: int Circulating shares hk_shares instance-attribute hk_shares: int HK shares (only HK stocks) eps instance-attribute eps: Decimal Earnings per share eps_ttm instance-attribute eps_ttm: Decimal Earnings per share (TTM) bps instance-attribute bps: Decimal Net assets per share dividend_yield instance-attribute dividend_yield: Decimal Dividend yield stock_derivatives instance-attribute stock_derivatives: List[Type[DerivativeType]] Types of supported derivatives board instance-attribute board: Type[SecurityBoard] Board TradeStatus Security Status Normal Bases: TradeStatus Normal Halted Bases: TradeStatus Suspension Delisted Bases: TradeStatus Delisted Fuse Bases: TradeStatus Fuse PrepareList Bases: TradeStatus Prepare List CodeMoved Bases: TradeStatus Code Moved ToBeOpened Bases: TradeStatus To Be Opened SplitStockHalts Bases: TradeStatus Split Stock Halts Expired Bases: TradeStatus Expired WarrantPrepareList Bases: TradeStatus Warrant To BeListed SuspendTrade Bases: TradeStatus Suspend PrePostQuote Quote of US pre/post market last_done instance-attribute last_done: Decimal Latest price timestamp instance-attribute timestamp: datetime Time of latest price volume instance-attribute volume: int Volume turnover instance-attribute turnover: Decimal Turnover high instance-attribute high: Decimal High low instance-attribute low: Decimal Low prev_close instance-attribute prev_close: Decimal Close of the last trade session SecurityQuote Quote of securitity symbol instance-attribute symbol: str Security code last_done instance-attribute last_done: Decimal Latest price prev_close instance-attribute prev_close: Decimal Yesterday's close open instance-attribute open: Decimal Open high instance-attribute high: Decimal High low instance-attribute low: Decimal Low timestamp instance-attribute timestamp: datetime Time of latest price volume instance-attribute volume: int Volume turnover instance-attribute turnover: Decimal Turnover trade_status instance-attribute trade_status: Type[TradeStatus] Security trading status pre_market_quote instance-attribute pre_market_quote: Optional[PrePostQuote] Quote of US pre market post_market_quote instance-attribute post_market_quote: Optional[PrePostQuote] Quote of US post market OptionType Option type Unknown Bases: OptionType Unknown American Bases: OptionType American Europe Bases: OptionType Europe OptionDirection Option direction Unknown Bases: OptionDirection Unknown Put Bases: OptionDirection Put Call Bases: OptionDirection Call OptionQuote Quote of option symbol instance-attribute symbol: str Security code last_done instance-attribute last_done: Decimal Latest price prev_close instance-attribute prev_close: Decimal Yesterday's close open instance-attribute open: Decimal Open high instance-attribute high: Decimal High low instance-attribute low: Decimal Low timestamp instance-attribute timestamp: datetime Time of latest price volume instance-attribute volume: int Volume turnover instance-attribute turnover: Decimal Turnover trade_status instance-attribute trade_status: Type[TradeStatus] Security trading status implied_volatility instance-attribute implied_volatility: Decimal Implied volatility open_interest instance-attribute open_interest: int Number of open positions expiry_date instance-attribute expiry_date: date Exprity date strike_price instance-attribute strike_price: Decimal Strike price contract_multiplier instance-attribute contract_multiplier: Decimal Contract multiplier contract_type instance-attribute contract_type: Type[OptionType] Option type contract_size instance-attribute contract_size: Decimal Contract size direction instance-attribute direction: Type[OptionDirection] Option direction historical_volatility instance-attribute historical_volatility: Decimal Underlying security historical volatility of the option underlying_symbol instance-attribute underlying_symbol: str Underlying security symbol of the option WarrantType Warrant type Unknown Bases: WarrantType Unknown Call Bases: WarrantType Call Put Bases: WarrantType Put Bull Bases: WarrantType Bull Bear Bases: WarrantType Bear Inline Bases: WarrantType Inline WarrantQuote Quote of warrant symbol instance-attribute symbol: str Security code last_done instance-attribute last_done: Decimal Latest price prev_close instance-attribute prev_close: Decimal Yesterday's close open instance-attribute open: Decimal Open high instance-attribute high: Decimal High low instance-attribute low: Decimal Low timestamp instance-attribute timestamp: datetime Time of latest price volume instance-attribute volume: int Volume turnover instance-attribute turnover: Decimal Turnover trade_status instance-attribute trade_status: Type[TradeStatus] Security trading status implied_volatility instance-attribute implied_volatility: Decimal Implied volatility expiry_date instance-attribute expiry_date: date Exprity date last_trade_date instance-attribute last_trade_date: date Last tradalbe date outstanding_ratio instance-attribute outstanding_ratio: Decimal Outstanding ratio outstanding_quantity instance-attribute outstanding_quantity: int Outstanding quantity conversion_ratio instance-attribute conversion_ratio: Decimal Conversion ratio category instance-attribute category: Type[WarrantType] Warrant type strike_price instance-attribute strike_price: Decimal Strike price upper_strike_price instance-attribute upper_strike_price: Decimal Upper bound price lower_strike_price instance-attribute lower_strike_price: Decimal Lower bound price call_price instance-attribute call_price: Decimal Call price underlying_symbol instance-attribute underlying_symbol: str Underlying security symbol of the warrant Depth Depth position instance-attribute position: int Position price instance-attribute price: Decimal Price volume instance-attribute volume: int Volume order_num instance-attribute order_num: int Number of orders SecurityDepth Security depth asks instance-attribute asks: List[Depth] Ask depth bids instance-attribute bids: List[Depth] Bid depth Brokers Brokers position instance-attribute position: int Position broker_ids instance-attribute broker_ids: List[int] Broker IDs SecurityBrokers Security brokers ask_brokers instance-attribute ask_brokers: List[Brokers] Ask brokers bid_brokers instance-attribute bid_brokers: List[Brokers] Bid brokers ParticipantInfo Participant info broker_ids instance-attribute broker_ids: List[int] Broker IDs name_cn instance-attribute name_cn: str Participant name (zh-CN) name_en instance-attribute name_en: str Participant name (en) name_hk instance-attribute name_hk: str Participant name (zh-HK) TradeDirection Trade direction Neutral Bases: TradeDirection Neutral Down Bases: TradeDirection Down Up Bases: TradeDirection Up TradeSession Trade session Normal Bases: TradeSession Trading Pre Bases: TradeSession Pre-Trading Post Bases: TradeSession Post-Trading Trade Trade price instance-attribute price: Decimal Price volume instance-attribute volume: int Volume timestamp instance-attribute timestamp: datetime Time of trading trade_type instance-attribute trade_type: str Trade type HK * - Overseas trade D - Odd-lot trade M - Non-direct off-exchange trade P - Late trade (Off-exchange previous day) U - Auction trade X - Direct off-exchange trade Y - Automatch internalized <empty string> - Automatch normal US <empty string> - Regular sale A - Acquisition B - Bunched trade D - Distribution F - Intermarket sweep G - Bunched sold trades H - Price variation trade I - Odd lot trade K - Rule 155 trde(NYSE MKT) M - Market center close price P - Prior reference price Q - Market center open price S - Split trade V - Contingent trade W - Average price trade X - Cross trade 1 - Stopped stock(Regular trade) direction instance-attribute direction: Type[TradeDirection] Trade direction trade_session instance-attribute trade_session: Type[TradeSession] Trade session IntradayLine Intraday line price instance-attribute price: Decimal Close price of the minute timestamp instance-attribute timestamp: datetime Start time of the minute volume instance-attribute volume: int Volume turnover instance-attribute turnover: Decimal Turnover avg_price instance-attribute avg_price: Decimal Average price Candlestick Candlestick close instance-attribute close: Decimal Close price open instance-attribute open: Decimal Open price low instance-attribute low: Decimal Low price high instance-attribute high: Decimal High price volume instance-attribute volume: int Volume turnover instance-attribute turnover: Decimal Turnover timestamp instance-attribute timestamp: datetime Timestamp AdjustType Candlestick adjustment type NoAdjust Bases: AdjustType Actual ForwardAdjust Bases: AdjustType Adjust forward Period Candlestick period Unknown Bases: Period Unknown Min_1 Bases: Period One Minute Min_5 Bases: Period Five Minutes Min_15 Bases: Period Fifteen Minutes Min_30 Bases: Period Thirty Minutes Min_60 Bases: Period Sixty Minutes Day Bases: Period One Day Week Bases: Period One Week Month Bases: Period One Month Year Bases: Period One Year StrikePriceInfo Strike price info price instance-attribute price: Decimal Strike price call_symbol instance-attribute call_symbol: str Security code of call option put_symbol instance-attribute put_symbol: str Security code of put option standard instance-attribute standard: bool Is standard IssuerInfo Issuer info issuer_id instance-attribute issuer_id: int Issuer ID name_cn instance-attribute name_cn: str Issuer name (zh-CN) name_en instance-attribute name_en: str Issuer name (en) name_hk instance-attribute name_hk: str Issuer name (zh-HK) TradingSessionInfo The information of trading session begin_time instance-attribute begin_time: time Being trading time end_time instance-attribute end_time: time End trading time trade_session instance-attribute trade_session: Type[TradeSession] Trading sessions MarketTradingSession Market trading session market instance-attribute market: Type[Market] Market trade_sessions instance-attribute trade_sessions: List[TradingSessionInfo] Trading session MarketTradingDays trading_days instance-attribute trading_days: List[date] half_trading_days instance-attribute half_trading_days: List[date] CapitalFlowLine Capital flow line inflow instance-attribute inflow: Decimal Inflow capital data timestamp instance-attribute timestamp: datetime Time CapitalDistribution Capital distribution large instance-attribute large: Decimal Large order medium instance-attribute medium: Decimal Medium order small instance-attribute small: Decimal Small order CapitalDistributionResponse Capital distribution response timestamp instance-attribute timestamp: datetime Time capital_in instance-attribute capital_in: CapitalDistribution Inflow capital data capital_out instance-attribute capital_out: CapitalDistribution Outflow capital data WatchlistSecurity Watchlist security symbol instance-attribute symbol: str Security symbol market instance-attribute market: Market Market name instance-attribute name: str Security name watched_price instance-attribute watched_price: Optional[Decimal] Watched price watched_at instance-attribute watched_at: datetime Watched time WatchlistGroup id instance-attribute id: int Group id name instance-attribute name: str Group name securities instance-attribute securities: List[WatchlistSecurity] Securities SecuritiesUpdateMode Securities update mode Add Bases: SecuritiesUpdateMode Add securities Remove Bases: SecuritiesUpdateMode Remove securities Replace Bases: SecuritiesUpdateMode Replace securities RealtimeQuote Real-time quote symbol instance-attribute symbol: str Security code last_done instance-attribute last_done: Decimal Latest price open instance-attribute open: Decimal Open high instance-attribute high: Decimal High low instance-attribute low: Decimal Low timestamp instance-attribute timestamp: datetime Time of latest price volume instance-attribute volume: int Volume turnover instance-attribute turnover: Decimal Turnover trade_status instance-attribute trade_status: Type[TradeStatus] Security trading status Subscription Subscription symbol instance-attribute symbol: str Security code sub_types instance-attribute sub_types: List[Type[SubType]] Subscription types candlesticks instance-attribute candlesticks: List[Type[Period]] Candlesticks QuoteContext Quote context Parameters: Name Type Description Default config Config Configuration object required __init__ __init__(config: Config) -> None set_on_quote set_on_quote(callback: Callable[[str, PushQuote], None]) -> None Set quote callback, after receiving the quote data push, it will call back to this function. set_on_depth set_on_depth(callback: Callable[[str, PushDepth], None]) -> None Set depth callback, after receiving the depth data push, it will call back to this function. set_on_brokers set_on_brokers(callback: Callable[[str, PushBrokers], None]) -> None Set brokers callback, after receiving the brokers data push, it will call back to this function. set_on_trades set_on_trades(callback: Callable[[str, PushTrades], None]) -> None Set trades callback, after receiving the trades data push, it will call back to this function. set_on_candlestick set_on_candlestick(callback: Callable[[str, PushCandlestick], None]) -> None Set candlestick callback, after receiving the candlestick updated event, it will call back to this function. subscribe subscribe(symbols: List[str], sub_types: List[Type[SubType]], is_first_push: bool = False) -> None Subscribe Parameters: Name Type Description Default symbols List [ str ] Security codes required sub_types List [ Type [ SubType ]] Subscribe types required is_first_push bool Whether to perform a data push immediately after subscribing. (trade not supported) False Examples: :: from time import sleep from longbridge.openapi import QuoteContext, Config, SubType, PushQuote def on_quote(symbol: str, event: PushQuote): print(symbol, event) config = Config.from_env() ctx = QuoteContext(config) ctx.set_on_quote(on_quote) ctx.subscribe([\"700.HK\", \"AAPL.US\"], [ SubType.Quote], is_first_push = True) sleep(30) unsubscribe unsubscribe(symbols: List[str], sub_types: List[Type[SubType]]) -> None Unsubscribe Parameters: Name Type Description Default symbols List [ str ] Security codes required sub_types List [ Type [ SubType ]] Subscribe types required Examples: :: from longbridge.openapi import QuoteContext, Config, SubType config = Config.from_env() ctx = QuoteContext(config) ctx.subscribe([\"700.HK\", \"AAPL.US\"], [SubType.Quote]) ctx.unsubscribe([\"AAPL.US\"], [SubType.Quote]) subscribe_candlesticks subscribe_candlesticks(symbol: str, period: Type[Period]) -> None Subscribe security candlesticks Parameters: Name Type Description Default symbol str Security code required period Type [ Period ] Period type required Examples: :: from longbridge.openapi import QuoteContext, Config, PushCandlestick config = Config.from_env() ctx = QuoteContext(config) def on_candlestick(symbol: str, event: PushCandlestick): print(symbol, event) ctx.subscribe_candlesticks(\"700.HK\", Period.Min_1) sleep(30) unsubscribe_candlesticks unsubscribe_candlesticks(symbol: str, period: Type[Period]) -> None Subscribe security candlesticks Parameters: Name Type Description Default symbol str Security code required period Type [ Period ] Period type required subscriptions subscriptions() -> List[Subscription] Get subscription information Examples: :: from longbridge.openapi import QuoteContext, Config, SubType config = Config.from_env() ctx = QuoteContext(config) ctx.subscribe([\"700.HK\", \"AAPL.US\"], [SubType.Quote]) resp = ctx.subscriptions() print(resp) static_info static_info(symbols: List[str]) -> List[SecurityStaticInfo] Get basic information of securities Parameters: Name Type Description Default symbols List [ str ] Security codes required Returns: Type Description List [ SecurityStaticInfo ] Security info list Examples: :: from longbridge.openapi import QuoteContext, Config config = Config.from_env() ctx = QuoteContext(config) resp = ctx.static_info( [\"700.HK\", \"AAPL.US\", \"TSLA.US\", \"NFLX.US\"]) print(resp) quote quote(symbols: List[str]) -> List[SecurityQuote] Get quote of securities Parameters: Name Type Description Default symbols List [ str ] Security codes required Returns: Type Description List [ SecurityQuote ] Security quote list Examples: :: from longbridge.openapi import QuoteContext, Config config = Config.from_env() ctx = QuoteContext(config) resp = ctx.quote([\"700.HK\", \"AAPL.US\", \"TSLA.US\", \"NFLX.US\"]) print(resp) option_quote option_quote(symbols: List[str]) -> List[OptionQuote] Get quote of option securities Parameters: Name Type Description Default symbols List [ str ] Security codes required Returns: Type Description List [ OptionQuote ] Option quote list Examples: :: from longbridge.openapi import QuoteContext, Config config = Config.from_env() ctx = QuoteContext(config) resp = ctx.option_quote([\"AAPL230317P160000.US\"]) print(resp) warrant_quote warrant_quote(symbols: List[str]) -> List[WarrantQuote] Get quote of warrant securities Parameters: Name Type Description Default symbols List [ str ] Security codes required Returns: Type Description List [ WarrantQuote ] Warrant quote list Examples: :: from longbridge.openapi import QuoteContext, Config config = Config.from_env() ctx = QuoteContext(config) resp = ctx.warrant_quote([\"21125.HK\"]) print(resp) depth depth(symbol: str) -> SecurityDepth Get security depth Parameters: Name Type Description Default symbol str Security code required Returns: Type Description SecurityDepth Security depth Examples: :: from longbridge.openapi import QuoteContext, Config config = Config.from_env() ctx = QuoteContext(config) resp = ctx.depth(\"700.HK\") print(resp) brokers brokers(symbol: str) -> SecurityBrokers Get security brokers Parameters: Name Type Description Default symbol str Security code required Returns: Type Description SecurityBrokers Security brokers Examples: :: from longbridge.openapi import QuoteContext, Config config = Config.from_env() ctx = QuoteContext(config) resp = ctx.brokers(\"700.HK\") print(resp) participants participants() -> List[ParticipantInfo] Get participants Returns: Type Description List [ ParticipantInfo ] Participants Examples: :: from longbridge.openapi import QuoteContext, Config config = Config.from_env() ctx = QuoteContext(config) resp = ctx.participants() print(resp) trades trades(symbol: str, count: int) -> List[Trade] Get security trades Parameters: Name Type Description Default symbol str Security code required count int Count of trades (Maximum is 1000 ) required Returns: Type Description List [ Trade ] Trades Examples: :: from longbridge.openapi import QuoteContext, Config config = Config.from_env() ctx = QuoteContext(config) resp = ctx.trades(\"700.HK\", 10) print(resp) intraday intraday(symbol: str) -> List[IntradayLine] Get security intraday lines Parameters: Name Type Description Default symbol str Security code required Returns: Type Description List [ IntradayLine ] Intraday lines Examples: :: from longbridge.openapi import QuoteContext, Config config = Config.from_env() ctx = QuoteContext(config) resp = ctx.intraday(\"700.HK\") print(resp) candlesticks candlesticks(symbol: str, period: Type[Period], count: int, adjust_type: Type[AdjustType]) -> List[Candlestick] Get security candlesticks Parameters: Name Type Description Default symbol str Security code required period Type [ Period ] Candlestick period required count int Count of cancdlestick (Maximum is 1000 ) required adjust_type Type [ AdjustType ] Adjustment type required Returns: Type Description List [ Candlestick ] Candlesticks Examples: :: from longbridge.openapi import QuoteContext, Config, Period, AdjustType config = Config.from_env() ctx = QuoteContext(config) resp = ctx.candlesticks( \"700.HK\", Period.Day, 10, AdjustType.NoAdjust) print(resp) option_chain_expiry_date_list option_chain_expiry_date_list(symbol: str) -> List[date] Get option chain expiry date list Parameters: Name Type Description Default symbol str Security code required Returns: Type Description List [ date ] Option chain expiry date list Examples: :: from longbridge.openapi import QuoteContext, Config config = Config.from_env() ctx = QuoteContext(config) resp = ctx.option_chain_expiry_date_list(\"AAPL.US\") print(resp) option_chain_info_by_date option_chain_info_by_date(symbol: str, expiry_date: date) -> List[StrikePriceInfo] Get option chain info by date Parameters: Name Type Description Default symbol str Security code required expiry_date date Expiry date required Returns: Type Description List [ StrikePriceInfo ] Option chain info Examples: :: from datetime import date from longbridge.openapi import QuoteContext, Config config = Config.from_env() ctx = QuoteContext(config) resp = ctx.option_chain_info_by_date( \"AAPL.US\", date(2023, 1, 20)) print(resp) warrant_issuers warrant_issuers() -> List[IssuerInfo] Get warrant issuers Returns: Type Description List [ IssuerInfo ] Warrant issuers Examples: :: from longbridge.openapi import QuoteContext, Config config = Config.from_env() ctx = QuoteContext(config) resp = ctx.warrant_issuers() print(resp) trading_session trading_session() -> List[MarketTradingSession] Get trading session of the day Returns: Type Description List [ MarketTradingSession ] Trading session of the day Examples: :: from longbridge.openapi import QuoteContext, Config config = Config.from_env() ctx = QuoteContext(config) resp = ctx.trading_session() print(resp) trading_days trading_days(market: Type[Market], begin: date, end: date) -> MarketTradingDays Get trading session of the day The interval must be less than one month, and only the most recent year is supported. Parameters: Name Type Description Default market Type [ Market ] Market required begin date Begin date required end date End date required Returns: Type Description MarketTradingDays Trading days Examples: :: from datetime import date from longbridge.openapi import QuoteContext, Config, Market config = Config.from_env() ctx = QuoteContext(config) resp = ctx.trading_days( Market.HK, date(2022, 1, 1), date(2022, 2, 1)) print(resp) capital_flow capital_flow(symbol: str) -> List[CapitalFlowLine] Get capital flow intraday Parameters: Name Type Description Default symbol str Security code required Returns: Type Description List [ CapitalFlowLine ] Capital flow list Examples: :: from longbridge.openapi import QuoteContext, Config config = Config.from_env() ctx = QuoteContext(config) resp = ctx.capital_flow(\"700.HK\") print(resp) capital_distribution capital_distribution(symbol: str) -> CapitalDistributionResponse Get capital distribution Parameters: Name Type Description Default symbol str Security code required Returns: Type Description CapitalDistributionResponse Capital distribution Examples: :: from longbridge.openapi import QuoteContext, Config config = Config.from_env() ctx = QuoteContext(config) resp = ctx.capital_distribution(\"700.HK\") print(resp) watch_list watch_list() -> List[WatchlistGroup] Get watch list Deprecated: use instead watchlist watchlist watchlist() -> List[WatchlistGroup] Get watch list Returns: Type Description List [ WatchlistGroup ] Watch list groups Examples: :: from longbridge.openapi import QuoteContext, Config config = Config.from_env() ctx = QuoteContext(config) resp = ctx.watchlist() print(resp) create_watchlist_group create_watchlist_group(name: str, securities: Optional[List[str]] = None) -> int Create watchlist group Parameters: Name Type Description Default name str Group name required securities Optional [ List [ str ]] Securities None Returns: Type Description int Group ID Examples: :: from longbridge.openapi import QuoteContext, Config config = Config.from_env() ctx = QuoteContext(config) group_id = ctx.create_watchlist_group(name = \"Watchlist1\", securities = [\"700.HK\", \"AAPL.US\"]) print(group_id) delete_watchlist_group delete_watchlist_group(id: int, purge: bool = False) Delete watchlist group Parameters: Name Type Description Default id int Group ID required purge bool Move securities in this group to the default group False Examples: :: from longbridge.openapi import QuoteContext, Config config = Config.from_env() ctx = QuoteContext(config) ctx.delete_watchlist_group(10086) update_watchlist_group update_watchlist_group(id: int, name: Optional[str] = None, securities: Optional[List[str]] = None, mode: Optional[Type[SecuritiesUpdateMode]] = None) Update watchlist group Parameters: Name Type Description Default id int Group ID required name Optional [ str ] Group name None securities Optional [ List [ str ]] Securities None Examples: :: from longbridge.openapi import QuoteContext, Config, SecuritiesUpdateMode config = Config.from_env() ctx = QuoteContext(config) ctx.update_watchlist_group(10086, name = \"Watchlist2\", securities = [\"700.HK\", \"AAPL.US\"], SecuritiesUpdateMode.Replace) realtime_quote realtime_quote(symbols: List[str]) -> List[RealtimeQuote] Get real-time quote Get real-time quotes of the subscribed symbols, it always returns the data in the local storage. Parameters: Name Type Description Default symbols List [ str ] Security codes required Returns: Type Description List [ RealtimeQuote ] Quote list Examples: :: from time import sleep from longbridge.openapi import QuoteContext, Config, SubType config = Config.from_env() ctx = QuoteContext(config) ctx.subscribe([\"700.HK\", \"AAPL.US\"], [ SubType.Quote], is_first_push = True) sleep(5) resp = ctx.realtime_quote([\"700.HK\", \"AAPL.US\"]) print(resp) realtime_depth realtime_depth(symbol: str) -> SecurityDepth Get real-time depth Get real-time depth of the subscribed symbols, it always returns the data in the local storage. Parameters: Name Type Description Default symbol str Security code required Returns: Type Description SecurityDepth Security depth Examples: :: from time import sleep from longbridge.openapi import QuoteContext, Config, SubType config = Config.from_env() ctx = QuoteContext(config) ctx.subscribe([\"700.HK\", \"AAPL.US\"], [ SubType.Depth], is_first_push = True) sleep(5) resp = ctx.realtime_depth(\"700.HK\") print(resp) realtime_brokers realtime_brokers(symbol: str) -> SecurityBrokers Get real-time brokers Get real-time brokers of the subscribed symbols, it always returns the data in the local storage. Parameters: Name Type Description Default symbol str Security code required Returns: Type Description SecurityBrokers Security brokers Examples: :: from time import sleep from longbridge.openapi import QuoteContext, Config, SubType config = Config.from_env() ctx = QuoteContext(config) ctx.subscribe([\"700.HK\", \"AAPL.US\"], [ SubType.Brokers], is_first_push = True) sleep(5) resp = ctx.realtime_brokers(\"700.HK\") print(resp) realtime_trades realtime_trades(symbol: str, count: int) -> List[Trade] Get real-time trades Get real-time trades of the subscribed symbols, it always returns the data in the local storage. Parameters: Name Type Description Default symbol str Security code required count int Count of trades required Returns: Type Description List [ Trade ] Security trades Examples: :: from time import sleep from longbridge.openapi import QuoteContext, Config, SubType config = Config.from_env() ctx = QuoteContext(config) ctx.subscribe([\"700.HK\", \"AAPL.US\"], [ SubType.Trade], is_first_push = False) sleep(5) resp = ctx.realtime_trades(\"700.HK\", 10) print(resp) realtime_candlesticks realtime_candlesticks(symbol: str, period: Type[Period], count: int) -> List[Candlestick] Get real-time candlesticks Get Get real-time candlesticks of the subscribed symbols, it always returns the data in the local storage. Parameters: Name Type Description Default symbol str Security code required period Type [ Period ] Period type required count int Count of candlesticks required Returns: Type Description List [ Candlestick ] Security candlesticks Examples: :: from time import sleep from longbridge.openapi import QuoteContext, Config, Period config = Config.from_env() ctx = QuoteContext(config) ctx.subscribe_candlesticks(\"AAPL.US\", Period.Min_1) sleep(5) resp = ctx.realtime_candlesticks(\"AAPL.US\", Period.Min_1, 10) print(resp) OrderSide Order side Unknown Bases: OrderSide Unknown Buy Bases: OrderSide Buy Sell Bases: OrderSide Sell OrderType Order type Unknown Bases: OrderType Unknown LO Bases: OrderType Limit Order ELO Bases: OrderType Enhanced Limit Order MO Bases: OrderType Market Order AO Bases: OrderType At-auction Order ALO Bases: OrderType At-auction Limit Order ODD Bases: OrderType Odd Lots LIT Bases: OrderType Limit If Touched MIT Bases: OrderType Market If Touched TSLPAMT Bases: OrderType Trailing Limit If Touched (Trailing Amount) TSLPPCT Bases: OrderType Trailing Limit If Touched (Trailing Percent) TSMAMT Bases: OrderType Trailing Market If Touched (Trailing Amount) TSMPCT Bases: OrderType Trailing Market If Touched (Trailing Percent) SLO Bases: OrderType Special Limit Order OrderStatus Order status Unknown Bases: OrderStatus Unknown NotReported Bases: OrderStatus Not reported ReplacedNotReported Bases: OrderStatus Not reported (Replaced Order) ProtectedNotReported Bases: OrderStatus Not reported (Protected Order) VarietiesNotReported Bases: OrderStatus Not reported (Conditional Order) Filled Bases: OrderStatus Filled WaitToNew Bases: OrderStatus Wait To New New Bases: OrderStatus New WaitToReplace Bases: OrderStatus Wait To Replace PendingReplace Bases: OrderStatus Pending Replace Replaced Bases: OrderStatus Replaced PartialFilled Bases: OrderStatus Partial Filled WaitToCancel Bases: OrderStatus Wait To Cancel PendingCancel Bases: OrderStatus Pending Cancel Rejected Bases: OrderStatus Rejected Canceled Bases: OrderStatus Canceled Expired Bases: OrderStatus ExpiredStatus PartialWithdrawal Bases: OrderStatus PartialWithdrawal OrderTag Order tag Unknown Bases: OrderTag Unknown Normal Bases: OrderTag Normal Order LongTerm Bases: OrderTag Long term Order Grey Bases: OrderTag Grey Order MarginCall Bases: OrderTag Force Selling Offline Bases: OrderTag OTC Creditor Bases: OrderTag Option Exercise Long Debtor Bases: OrderTag Option Exercise Short NonExercise Bases: OrderTag Wavier Of Option Exercise AllocatedSub Bases: OrderTag Trade Allocation TriggerStatus Trigger status Unknown Bases: TriggerStatus Unknown Deactive Bases: TriggerStatus Deactive Active Bases: TriggerStatus Active Released Bases: TriggerStatus Released Execution Execution order_id instance-attribute order_id: str Order ID trade_id instance-attribute trade_id: str Execution ID symbol instance-attribute symbol: str Security code trade_done_at instance-attribute trade_done_at: datetime Trade done time quantity instance-attribute quantity: int Executed quantity price instance-attribute price: Decimal Executed price PushOrderChanged Order changed message side instance-attribute side: Type[OrderSide] Order side stock_name instance-attribute stock_name: str Stock name submitted_quantity instance-attribute submitted_quantity: int Submitted quantity symbol instance-attribute symbol: str Order symbol order_type instance-attribute order_type: Type[OrderType] Order type submitted_price instance-attribute submitted_price: Decimal Submitted price executed_quantity instance-attribute executed_quantity: int Executed quantity executed_price instance-attribute executed_price: Optional[Decimal] Executed price order_id instance-attribute order_id: str Order ID currency instance-attribute currency: str Currency status instance-attribute status: Type[OrderStatus] Order status submitted_at instance-attribute submitted_at: datetime Submitted time updated_at instance-attribute updated_at: datetime Last updated time trigger_price instance-attribute trigger_price: Optional[Decimal] Order trigger price msg instance-attribute msg: str Rejected message or remark tag instance-attribute tag: Type[OrderTag] Order tag trigger_status instance-attribute trigger_status: Optional[Type[TriggerStatus]] Conditional order trigger status trigger_at instance-attribute trigger_at: Optional[datetime] Conditional order trigger time trailing_amount instance-attribute trailing_amount: Optional[Decimal] Trailing amount trailing_percent instance-attribute trailing_percent: Optional[Decimal] Trailing percent limit_offset instance-attribute limit_offset: Optional[Decimal] Limit offset amount account_no instance-attribute account_no: str Account no last_share instance-attribute last_share: Optional[Decimal] Last share last_price instance-attribute last_price: Optional[Decimal] Last price TimeInForceType Time in force type Unknown Bases: TimeInForceType Unknown Day Bases: TimeInForceType Day Order GoodTilCanceled Bases: TimeInForceType Good Til Canceled Order GoodTilDate Bases: TimeInForceType Good Til Date Order OutsideRTH Enable or disable outside regular trading hours Unknown Bases: OutsideRTH Unknown RTHOnly Bases: OutsideRTH Regular trading hour only AnyTime Bases: OutsideRTH Any time Order Order order_id instance-attribute order_id: str Order ID status instance-attribute status: Type[OrderStatus] Order status stock_name instance-attribute stock_name: str Stock name quantity instance-attribute quantity: int Submitted quantity executed_quantity instance-attribute executed_quantity: int Executed quantity price instance-attribute price: Optional[Decimal] Submitted price executed_price instance-attribute executed_price: Optional[Decimal] Executed price submitted_at instance-attribute submitted_at: datetime Submitted time side instance-attribute side: Type[OrderSide] Order side symbol instance-attribute symbol: str Security code order_type instance-attribute order_type: Type[OrderType] Order type last_done instance-attribute last_done: Optional[Decimal] Last done trigger_price instance-attribute trigger_price: Optional[Decimal] LIT / MIT Order Trigger Price msg instance-attribute msg: str Rejected Message or remark tag instance-attribute tag: Type[OrderTag] Order tag time_in_force instance-attribute time_in_force: Type[TimeInForceType] Time in force type expire_date instance-attribute expire_date: Optional[date] Long term order expire date updated_at instance-attribute updated_at: Optional[datetime] Last updated time trigger_at instance-attribute trigger_at: Optional[datetime] Conditional order trigger time trailing_amount instance-attribute trailing_amount: Optional[Decimal] TSMAMT / TSLPAMT order trailing amount trailing_percent instance-attribute trailing_percent: Optional[Decimal] TSMPCT / TSLPPCT order trailing percent limit_offset instance-attribute limit_offset: Optional[Decimal] TSLPAMT / TSLPPCT order limit offset amount trigger_status instance-attribute trigger_status: Optional[Type[TriggerStatus]] Conditional order trigger status currency instance-attribute currency: str Currency outside_rth instance-attribute outside_rth: Optional[Type[OutsideRTH]] Enable or disable outside regular trading hours remark instance-attribute remark: str Remark CommissionFreeStatus Commission-free Status Unknown Bases: CommissionFreeStatus Unknown None_ Bases: CommissionFreeStatus None Calculated Bases: CommissionFreeStatus Commission-free amount to be calculated Pending Bases: CommissionFreeStatus Pending commission-free Ready Bases: CommissionFreeStatus Commission-free applied DeductionStatus Deduction status Unknown Bases: DeductionStatus Unknown None_ Bases: DeductionStatus None NoData Bases: DeductionStatus Settled with no data Pending Bases: DeductionStatus Settled and pending distribution Done Bases: DeductionStatus Settled and distributed ChargeCategoryCode Charge category code Unknown Bases: ChargeCategoryCode Unknown Broker Bases: ChargeCategoryCode Broker Third Bases: ChargeCategoryCode Third OrderHistoryDetail Order history detail price instance-attribute price: Decimal Executed price for executed orders, submitted price for expired, canceled, rejected orders, etc. quantity instance-attribute quantity: int Executed quantity for executed orders, remaining quantity for expired, canceled, rejected orders, etc. status instance-attribute status: Type[OrderStatus] Order status msg instance-attribute msg: str Execution or error message time instance-attribute time: datetime Occurrence time OrderChargeFee Order charge fee code instance-attribute code: str Charge code name instance-attribute name: str Charge name amount instance-attribute amount: Decimal Charge amount currency instance-attribute currency: str Charge currency OrderChargeItem Order charge item code instance-attribute code: Type[ChargeCategoryCode] Charge category code name instance-attribute name: str Charge category name fees instance-attribute fees: List[OrderChargeFee] Charge details OrderChargeDetail Order charge detail total_amount instance-attribute total_amount: Decimal Total charges amount currency instance-attribute currency: str Settlement currency items instance-attribute items: List[OrderChargeItem] Order charge items OrderDetail Order detail order_id instance-attribute order_id: str Order ID status instance-attribute status: Type[OrderStatus] Order status stock_name instance-attribute stock_name: str Stock name quantity instance-attribute quantity: int Submitted quantity executed_quantity instance-attribute executed_quantity: int Executed quantity price instance-attribute price: Optional[Decimal] Submitted price executed_price instance-attribute executed_price: Optional[Decimal] Executed price submitted_at instance-attribute submitted_at: datetime Submitted time side instance-attribute side: Type[OrderSide] Order side symbol instance-attribute symbol: str Security code order_type instance-attribute order_type: Type[OrderType] Order type last_done instance-attribute last_done: Optional[Decimal] Last done trigger_price instance-attribute trigger_price: Optional[Decimal] LIT / MIT Order Trigger Price msg instance-attribute msg: str Rejected Message or remark tag instance-attribute tag: Type[OrderTag] Order tag time_in_force instance-attribute time_in_force: Type[TimeInForceType] Time in force type expire_date instance-attribute expire_date: Optional[date] Long term order expire date updated_at instance-attribute updated_at: Optional[datetime] Last updated time trigger_at instance-attribute trigger_at: Optional[datetime] Conditional order trigger time trailing_amount instance-attribute trailing_amount: Optional[Decimal] TSMAMT / TSLPAMT order trailing amount trailing_percent instance-attribute trailing_percent: Optional[Decimal] TSMPCT / TSLPPCT order trailing percent limit_offset instance-attribute limit_offset: Optional[Decimal] TSLPAMT / TSLPPCT order limit offset amount trigger_status instance-attribute trigger_status: Optional[Type[TriggerStatus]] Conditional order trigger status currency instance-attribute currency: str Currency outside_rth instance-attribute outside_rth: Optional[Type[OutsideRTH]] Enable or disable outside regular trading hours remark instance-attribute remark: str Remark free_status instance-attribute free_status: Type[CommissionFreeStatus] Commission-free Status free_amount instance-attribute free_amount: Optional[Decimal] Commission-free amount free_currency instance-attribute free_currency: Optional[str] Commission-free currency deductions_status instance-attribute deductions_status: Type[DeductionStatus] Deduction status deductions_amount instance-attribute deductions_amount: Optional[Decimal] Deduction amount deductions_currency instance-attribute deductions_currency: Optional[str] Deduction currency platform_deducted_status instance-attribute platform_deducted_status: Type[DeductionStatus] Platform fee deduction status platform_deducted_amount instance-attribute platform_deducted_amount: Optional[Decimal] Platform deduction amount platform_deducted_currency instance-attribute platform_deducted_currency: Optional[str] Platform deduction currency history instance-attribute history: List[OrderHistoryDetail] Order history details charge_detail instance-attribute charge_detail: OrderChargeDetail Order charges SubmitOrderResponse Response for submit order request order_id instance-attribute order_id: str Order id CashInfo CashInfo withdraw_cash instance-attribute withdraw_cash: Decimal Withdraw cash available_cash instance-attribute available_cash: Decimal Available cash frozen_cash instance-attribute frozen_cash: Decimal Frozen cash settling_cash instance-attribute settling_cash: Decimal Cash to be settled currency instance-attribute currency: str Currency AccountBalance Account balance total_cash instance-attribute total_cash: Decimal Total cash max_finance_amount instance-attribute max_finance_amount: Decimal Maximum financing amount remaining_finance_amount instance-attribute remaining_finance_amount: Decimal Remaining financing amount risk_level instance-attribute risk_level: int Risk control level margin_call instance-attribute margin_call: Decimal Margin call currency instance-attribute currency: str Currency cash_infos instance-attribute cash_infos: List[CashInfo] Cash details net_assets instance-attribute net_assets: Decimal Net assets init_margin instance-attribute init_margin: Decimal Initial margin maintenance_margin instance-attribute maintenance_margin: Decimal Maintenance margin BalanceType Unknown Bases: BalanceType Cash Bases: BalanceType Stock Bases: BalanceType Fund Bases: BalanceType CashFlowDirection Cash flow direction Unknown Bases: CashFlowDirection Unknown Out Bases: CashFlowDirection Out In Bases: CashFlowDirection In CashFlow Cash flow transaction_flow_name instance-attribute transaction_flow_name: str Cash flow name direction instance-attribute direction: Type[CashFlowDirection] Outflow direction business_type instance-attribute business_type: Type[BalanceType] Balance type balance instance-attribute balance: Decimal Cash amount currency instance-attribute currency: str Cash currency business_time instance-attribute business_time: datetime Business time symbol instance-attribute symbol: Optional[str] Associated Stock code information description instance-attribute description: str Cash flow description FundPosition Fund position symbol instance-attribute symbol: str Fund ISIN code current_net_asset_value instance-attribute current_net_asset_value: Decimal Current equity net_asset_value_day instance-attribute net_asset_value_day: datetime Current equity PyDecimal symbol_name instance-attribute symbol_name: str Fund name currency instance-attribute currency: str Currency cost_net_asset_value instance-attribute cost_net_asset_value: Decimal Net cost holding_units instance-attribute holding_units: Decimal Holding units FundPositionChannel Fund position channel account_channel instance-attribute account_channel: str Account type positions instance-attribute positions: List[FundPosition] Fund positions FundPositionsResponse Fund positions response channels instance-attribute channels: List[FundPositionChannel] Channels StockPosition Stock position symbol instance-attribute symbol: str Stock code symbol_name instance-attribute symbol_name: str Stock name quantity instance-attribute quantity: int The number of holdings available_quantity instance-attribute available_quantity: int Available quantity currency instance-attribute currency: str Currency cost_price instance-attribute cost_price: Decimal Cost Price(According to the client's choice of average purchase or diluted cost) market instance-attribute market: Market Market StockPositionChannel Stock position channel account_channel instance-attribute account_channel: str Account type positions instance-attribute positions: List[StockPosition] Stock positions StockPositionsResponse Stock positions response channels instance-attribute channels: List[StockPositionChannel] Channels TopicType Topic type Private Bases: TopicType Private notification for trade MarginRatio Margin ratio im_factor instance-attribute im_factor: Decimal Initial margin ratio mm_factor instance-attribute mm_factor: Decimal Maintain the initial margin ratio fm_factor instance-attribute fm_factor: Decimal Forced close-out margin ratio EstimateMaxPurchaseQuantityResponse Response for estimate maximum purchase quantity cash_max_qty instance-attribute cash_max_qty: int Cash available quantity margin_max_qty instance-attribute margin_max_qty: int Margin available quantity TradeContext Trade context Parameters: Name Type Description Default config Config Configuration object required __init__ __init__(config: Config) -> None set_on_order_changed set_on_order_changed(callback: Callable[[PushOrderChanged], None]) -> None Set order changed callback, after receiving the order changed event, it will call back to this function. subscribe subscribe(topics: List[Type[TopicType]]) -> None Subscribe Parameters: Name Type Description Default topics List [ Type [ TopicType ]] Topic list required Examples: :: from time import sleep from decimal import Decimal from longbridge.openapi import TradeContext, Config, OrderSide, OrderType, TimeInForceType, PushOrderChanged, TopicType def on_order_changed(event: PushOrderChanged): print(event) config = Config.from_env() ctx = TradeContext(config) ctx.set_on_order_changed(on_order_changed) ctx.subscribe([TopicType.Private]) resp = ctx.submit_order( side=OrderSide.Buy, symbol=\"700.HK\", order_type=OrderType.LO, submitted_price=Decimal(\"50\"), submitted_quantity=200, time_in_force=TimeInForceType.Day, remark=\"Hello from Python SDK\", ) print(resp) sleep(5) # waiting for push event unsubscribe unsubscribe(topics: List[str]) -> None Unsubscribe Parameters: Name Type Description Default topics List [ str ] Topic list required history_executions history_executions(symbol: Optional[str] = None, start_at: Optional[date] = None, end_at: Optional[date] = None) -> List[Execution] Get history executions Parameters: Name Type Description Default symbol Optional [ str ] Filter by security code, example: 700.HK , AAPL.US None start_at Optional [ date ] Start time None end_at Optional [ date ] End time None Returns: Type Description List [ Execution ] Execution list Examples: :: from datetime import datetime from longbridge.openapi import TradeContext, Config config = Config.from_env() ctx = TradeContext(config) resp = ctx.history_executions( symbol = \"700.HK\", start_at = datetime(2022, 5, 9), end_at = datetime(2022, 5, 12), ) print(resp) today_executions today_executions(symbol: Optional[str] = None, order_id: Optional[str] = None) -> List[Execution] Get today executions Parameters: Name Type Description Default symbol Optional [ str ] Filter by security code None order_id Optional [ str ] Filter by Order ID None Returns: Type Description List [ Execution ] Execution list Examples: :: from longbridge.openapi import TradeContext, Config config = Config.from_env() ctx = TradeContext(config) resp = ctx.today_executions(symbol = \"700.HK\") print(resp) history_orders history_orders(symbol: Optional[str] = None, status: Optional[List[Type[OrderStatus]]] = None, side: Optional[Type[OrderSide]] = None, market: Optional[Type[Market]] = None, start_at: Optional[date] = None, end_at: Optional[date] = None) -> List[Order] Get history orders Parameters: Name Type Description Default symbol Optional [ str ] Filter by security code None status Optional [ List [ Type [ OrderStatus ]]] Filter by order status None side Optional [ Type [ OrderSide ]] Filter by order side None market Optional [ Type [ Market ]] Filter by market type None start_at Optional [ date ] Start time None end_at Optional [ date ] End time None Returns: Type Description List [ Order ] Order list Examples: :: from datetime import datetime from longbridge.openapi import TradeContext, Config, OrderStatus, OrderSide, Market config = Config.from_env() ctx = TradeContext(config) resp = ctx.history_orders( symbol = \"700.HK\", status = [OrderStatus.Filled, OrderStatus.New], side = OrderSide.Buy, market = Market.HK, start_at = datetime(2022, 5, 9), end_at = datetime(2022, 5, 12), ) print(resp) today_orders today_orders(symbol: Optional[str] = None, status: Optional[List[Type[OrderStatus]]] = None, side: Optional[Type[OrderSide]] = None, market: Optional[Type[Market]] = None, order_id: Optional[str] = None) -> List[Order] Get today orders Parameters: Name Type Description Default symbol Optional [ str ] Filter by security code None status Optional [ List [ Type [ OrderStatus ]]] Filter by order status None side Optional [ Type [ OrderSide ]] Filter by order side None market Optional [ Type [ Market ]] Filter by market type None order_id Optional [ str ] Filter by order id None Returns: Type Description List [ Order ] Order list Examples: :: from longbridge.openapi import TradeContext, Config, OrderStatus, OrderSide, Market config = Config.from_env() ctx = TradeContext(config) resp = ctx.today_orders( symbol = \"700.HK\", status = [OrderStatus.Filled, OrderStatus.New], side = OrderSide.Buy, market = Market.HK, ) print(resp) replace_order replace_order(order_id: str, quantity: int, price: Optional[Decimal] = None, trigger_price: Optional[Decimal] = None, limit_offset: Optional[Decimal] = None, trailing_amount: Optional[Decimal] = None, trailing_percent: Optional[Decimal] = None, remark: Optional[str] = None) -> None Replace order Parameters: Name Type Description Default quantity int Replaced quantity required price Optional [ Decimal ] Replaced price None trigger_price Optional [ Decimal ] Trigger price ( LIT / MIT Order Required) None limit_offset Optional [ Decimal ] Limit offset amount ( TSLPAMT / TSLPPCT Required) None trailing_amount Optional [ Decimal ] Trailing amount ( TSLPAMT / TSMAMT Required) None trailing_percent Optional [ Decimal ] Trailing percent ( TSLPPCT / TSMAPCT Required) None remark Optional [ str ] Remark (Maximum 64 characters) None Examples: :: from decimal import Decimal from longbridge.openapi import TradeContext, Config config = Config.from_env() ctx = TradeContext(config) ctx.replace_order( order_id = \"709043056541253632\", quantity = 100, price = Decimal(\"100\"), ) submit_order submit_order(symbol: str, order_type: Type[OrderType], side: Type[OrderSide], submitted_quantity: int, time_in_force: Type[TimeInForceType], submitted_price: Optional[Decimal] = None, trigger_price: Optional[Decimal] = None, limit_offset: Optional[Decimal] = None, trailing_amount: Optional[Decimal] = None, trailing_percent: Optional[Decimal] = None, expire_date: Optional[date] = None, outside_rth: Optional[Type[OutsideRTH]] = None, remark: Optional[str] = None) -> SubmitOrderResponse Submit order Parameters: Name Type Description Default symbol str Security code required order_type Type [ OrderType ] Order type required side Type [ OrderSide ] Order Side required submitted_quantity int Submitted quantity required time_in_force Type [ TimeInForceType ] Time in force type required submitted_price Optional [ Decimal ] Submitted price None trigger_price Optional [ Decimal ] Trigger price ( LIT / MIT Required) None limit_offset Optional [ Decimal ] Limit offset amount ( TSLPAMT / TSLPPCT Required) None trailing_amount Optional [ Decimal ] Trailing amount ( TSLPAMT / TSMAMT Required) None trailing_percent Optional [ Decimal ] Trailing percent ( TSLPPCT / TSMAPCT Required) None expire_date Optional [ date ] Long term order expire date (Required when time_in_force is GoodTilDate ) None outside_rth Optional [ Type [ OutsideRTH ]] Enable or disable outside regular trading hours None remark Optional [ str ] Remark (Maximum 64 characters) None Returns: Type Description SubmitOrderResponse Response Examples: :: from decimal import Decimal from longbridge.openapi import TradeContext, Config, OrderSide, OrderType, TimeInForceType config = Config.from_env() ctx = TradeContext(config) resp = ctx.submit_order( side = OrderSide.Buy, symbol = \"700.HK\", order_type = OrderType.LO, submitted_price = Decimal(\"50\"), submitted_quantity = 200, time_in_force = TimeInForceType.Day, remark = \"Hello from Python SDK\", ) print(resp) cancel_order cancel_order(order_id: str) -> None Cancel order Parameters: Name Type Description Default order_id str Order ID required Examples: :: from longbridge.openapi import TradeContext, Config config = Config.from_env() ctx = TradeContext(config) ctx.cancel_order(\"709043056541253632\") account_balance account_balance() -> List[AccountBalance] Get account balance Returns: Type Description List [ AccountBalance ] Account list Examples: :: from longbridge.openapi import TradeContext, Config config = Config.from_env() ctx = TradeContext(config) resp = ctx.account_balance() print(resp) cash_flow cash_flow(start_at: datetime, end_at: datetime, business_type: Optional[Type[BalanceType]] = None, symbol: Optional[str] = None, page: Optional[int] = None, size: Optional[int] = None) -> List[CashFlow] Get cash flow Parameters: Name Type Description Default start_at datetime Start time required end_at datetime End time required business_type Optional [ Type [ BalanceType ]] Balance type None symbol Optional [ str ] Target security code None page Optional [ int ] Start page (Default: 1) None size Optional [ int ] Page size (Default: 50) None Returns: Type Description List [ CashFlow ] Cash flow list Examples: :: from datetime import datetime from longbridge.openapi import TradeContext, Config config = Config.from_env() ctx = TradeContext(config) resp = ctx.cash_flow( start_at = datetime(2022, 5, 9), end_at = datetime(2022, 5, 12), ) print(resp) fund_positions fund_positions(symbols: Optional[List[str]] = None) -> FundPositionsResponse Get fund positions Parameters: Name Type Description Default symbols Optional [ List [ str ]] Filter by fund codes None Returns: Type Description FundPositionsResponse Fund positions Examples: :: from longbridge.openapi import TradeContext, Config config = Config.from_env() ctx = TradeContext(config) resp = ctx.fund_positions() print(resp) stock_positions stock_positions(symbols: Optional[List[str]] = None) -> StockPositionsResponse Get stock positions Parameters: Name Type Description Default symbols Optional [ List [ str ]] Filter by stock codes None Returns: Type Description StockPositionsResponse Stock positions Examples: :: from longbridge.openapi import TradeContext, Config config = Config.from_env() ctx = TradeContext(config) resp = ctx.stock_positions() print(resp) margin_ratio margin_ratio(symbol: str) -> MarginRatio Get margin ratio Parameters: Name Type Description Default symbol str Security symbol required Returns: Type Description MarginRatio Margin ratio Examples: :: from longbridge.openapi import TradeContext, Config config = Config.from_env() ctx = TradeContext(config) resp = ctx.margin_ratio(\"700.HK\") print(resp) order_detail order_detail(order_id: str) -> OrderDetail Get order detail Parameters: Name Type Description Default order id Order id required Returns: Type Description OrderDetail Order detail Examples: :: from longbridge.openapi import TradeContext, Config config = Config.from_env() ctx = TradeContext(config) resp = ctx.order_detail(\"701276261045858304\") print(resp) estimate_max_purchase_quantity estimate_max_purchase_quantity(symbol: str, order_type: Type[OrderType], side: Type[OrderSide], price: Optional[Decimal] = None, currency: Optional[str] = None, order_id: Optional[str] = None) -> EstimateMaxPurchaseQuantityResponse Estimating the maximum purchase quantity for Hong Kong and US stocks, warrants, and options Parameters: Name Type Description Default symbol str Security symbol required order_type Type [ OrderType ] Order type required side Type [ OrderSide ] Order side required price Optional [ Decimal ] Estimated order price, None currency Optional [ str ] Settlement currency None order_id Optional [ str ] Order ID, required when estimating the maximum purchase quantity for a modified order None Returns: Type Description EstimateMaxPurchaseQuantityResponse Response Examples: :: from longbridge.openapi import TradeContext, Config, OrderType, OrderSide config = Config.from_env() ctx = TradeContext(config) resp = ctx.estimate_max_purchase_quantity( symbol = \"700.HK\", order_type = OrderType.LO, side = OrderSide.Buy, ) print(resp)","title":"All"},{"location":"reference_all/#code-reference","text":"","title":"Code Reference"},{"location":"reference_all/#longbridge.openapi.OpenApiException","text":"Bases: Exception OpenAPI exception","title":"OpenApiException"},{"location":"reference_all/#longbridge.openapi.OpenApiException.code","text":"code: Optional[int] Error code","title":"code"},{"location":"reference_all/#longbridge.openapi.OpenApiException.message","text":"message: str Error message","title":"message"},{"location":"reference_all/#longbridge.openapi.OpenApiException.__init__","text":"__init__(code: int, message: str) -> None","title":"__init__()"},{"location":"reference_all/#longbridge.openapi.HttpClient","text":"A HTTP client for longbridge open api Parameters: Name Type Description Default http_url str HTTP API url required app_key str App Key required app_secret str App Secret required access_token str Access Token required","title":"HttpClient"},{"location":"reference_all/#longbridge.openapi.HttpClient.__init__","text":"__init__(http_url: str, app_key: str, app_secret: str, access_token: str) -> None","title":"__init__()"},{"location":"reference_all/#longbridge.openapi.HttpClient.from_env","text":"from_env() -> HttpClient Create a new HttpClient from the given environment variables It first gets the environment variables from the .env file in the current directory.","title":"from_env()"},{"location":"reference_all/#longbridge.openapi.HttpClient.from_env--variables","text":"LONGBRIDGE_HTTP_URL - HTTP endpoint url LONGBRIDGE_APP_KEY - App key LONGBRIDGE_APP_SECRET - App secret LONGBRIDGE_ACCESS_TOKEN - Access token","title":"Variables"},{"location":"reference_all/#longbridge.openapi.HttpClient.request","text":"request(method: str, path: str, headers: Optional[dict[str, str]] = None, body: Optional[Any] = None) -> Any Performs a HTTP reqest Examples: :: from longbridge.openapi import HttpClient client = HttpClient(http_url, app_key, app_secret, access_token); # get resp = client.request(\"get\", \"/foo/bar\"); print(resp) # post client.request(\"get\", \"/foo/bar\", { \"foo\": 1, \"bar\": 2 });","title":"request()"},{"location":"reference_all/#longbridge.openapi.Config","text":"Configuration options for Longbridge sdk Parameters: Name Type Description Default app_key str App Key required app_secret str App Secret required access_token str Access Token required http_url str HTTP API url 'https://openapi.longbridgeapp.com' quote_ws_url str Websocket url for quote API 'wss://openapi-quote.longbridgeapp.com/v2' trade_ws_url str Websocket url for trade API 'wss://openapi-trade.longbridgeapp.com/v2' language Type [ Language ] Language identifier Language . EN","title":"Config"},{"location":"reference_all/#longbridge.openapi.Config.__init__","text":"__init__(app_key: str, app_secret: str, access_token: str, http_url: str = 'https://openapi.longbridgeapp.com', quote_ws_url: str = 'wss://openapi-quote.longbridgeapp.com/v2', trade_ws_url: str = 'wss://openapi-trade.longbridgeapp.com/v2', language: Type[Language] = Language.EN) -> None","title":"__init__()"},{"location":"reference_all/#longbridge.openapi.Config.from_env","text":"from_env() -> Config Create a new Config from the given environment variables It first gets the environment variables from the .env file in the current directory.","title":"from_env()"},{"location":"reference_all/#longbridge.openapi.Config.from_env--variables","text":"LONGBRIDGE_APP_KEY - App key LONGBRIDGE_APP_SECRET - App secret LONGBRIDGE_ACCESS_TOKEN - Access token LONGBRIDGE_HTTP_URL - HTTP endpoint url LONGBRIDGE_QUOTE_WS_URL - Quote websocket endpoint url LONGBRIDGE_TRADE_WS_URL - Trade websocket endpoint url","title":"Variables"},{"location":"reference_all/#longbridge.openapi.Config.refresh_access_token","text":"refresh_access_token(expired_at: Optional[datetime] = None) -> str Gets a new access_token expired_at - The expiration time of the access token, defaults to 90 days.","title":"refresh_access_token()"},{"location":"reference_all/#longbridge.openapi.Language","text":"Language identifier","title":"Language"},{"location":"reference_all/#longbridge.openapi.Language.ZH_CN","text":"Bases: Language zh-CN","title":"ZH_CN"},{"location":"reference_all/#longbridge.openapi.Language.ZH_HK","text":"Bases: Language zh-HK","title":"ZH_HK"},{"location":"reference_all/#longbridge.openapi.Language.EN","text":"Bases: Language en","title":"EN"},{"location":"reference_all/#longbridge.openapi.Market","text":"Market","title":"Market"},{"location":"reference_all/#longbridge.openapi.Market.Unknown","text":"Bases: Market Unknown","title":"Unknown"},{"location":"reference_all/#longbridge.openapi.Market.US","text":"Bases: Market US market","title":"US"},{"location":"reference_all/#longbridge.openapi.Market.HK","text":"Bases: Market HK market","title":"HK"},{"location":"reference_all/#longbridge.openapi.Market.CN","text":"Bases: Market CN market","title":"CN"},{"location":"reference_all/#longbridge.openapi.Market.SG","text":"Bases: Market SG market","title":"SG"},{"location":"reference_all/#longbridge.openapi.PushQuote","text":"Quote message","title":"PushQuote"},{"location":"reference_all/#longbridge.openapi.PushQuote.last_done","text":"last_done: Decimal Latest price","title":"last_done"},{"location":"reference_all/#longbridge.openapi.PushQuote.open","text":"open: Decimal Open","title":"open"},{"location":"reference_all/#longbridge.openapi.PushQuote.high","text":"high: Decimal High","title":"high"},{"location":"reference_all/#longbridge.openapi.PushQuote.low","text":"low: Decimal Low","title":"low"},{"location":"reference_all/#longbridge.openapi.PushQuote.timestamp","text":"timestamp: datetime Time of latest price","title":"timestamp"},{"location":"reference_all/#longbridge.openapi.PushQuote.volume","text":"volume: int Volume","title":"volume"},{"location":"reference_all/#longbridge.openapi.PushQuote.turnover","text":"turnover: Decimal Turnover","title":"turnover"},{"location":"reference_all/#longbridge.openapi.PushQuote.trade_status","text":"trade_status: Type[TradeStatus] Security trading status","title":"trade_status"},{"location":"reference_all/#longbridge.openapi.PushQuote.trade_session","text":"trade_session: Type[TradeSession] Trade session","title":"trade_session"},{"location":"reference_all/#longbridge.openapi.PushDepth","text":"Depth message","title":"PushDepth"},{"location":"reference_all/#longbridge.openapi.PushDepth.asks","text":"asks: List[Depth] Ask depth","title":"asks"},{"location":"reference_all/#longbridge.openapi.PushDepth.bids","text":"bids: List[Depth] Bid depth","title":"bids"},{"location":"reference_all/#longbridge.openapi.PushBrokers","text":"Brokers message","title":"PushBrokers"},{"location":"reference_all/#longbridge.openapi.PushBrokers.ask_brokers","text":"ask_brokers: List[Brokers] Ask brokers","title":"ask_brokers"},{"location":"reference_all/#longbridge.openapi.PushBrokers.bid_brokers","text":"bid_brokers: List[Brokers] Bid brokers","title":"bid_brokers"},{"location":"reference_all/#longbridge.openapi.PushTrades","text":"Trades message","title":"PushTrades"},{"location":"reference_all/#longbridge.openapi.PushTrades.trades","text":"trades: List[Trade] Trades data","title":"trades"},{"location":"reference_all/#longbridge.openapi.PushCandlestick","text":"Candlestick updated event","title":"PushCandlestick"},{"location":"reference_all/#longbridge.openapi.PushCandlestick.period","text":"period: Period Period type","title":"period"},{"location":"reference_all/#longbridge.openapi.PushCandlestick.candlestick","text":"candlestick: Candlestick Candlestick","title":"candlestick"},{"location":"reference_all/#longbridge.openapi.SubType","text":"Subscription flags","title":"SubType"},{"location":"reference_all/#longbridge.openapi.SubType.Quote","text":"Bases: SubType Quote","title":"Quote"},{"location":"reference_all/#longbridge.openapi.SubType.Depth","text":"Bases: SubType Depth","title":"Depth"},{"location":"reference_all/#longbridge.openapi.SubType.Brokers","text":"Bases: SubType Broker","title":"Brokers"},{"location":"reference_all/#longbridge.openapi.SubType.Trade","text":"Bases: SubType Trade","title":"Trade"},{"location":"reference_all/#longbridge.openapi.DerivativeType","text":"Derivative type","title":"DerivativeType"},{"location":"reference_all/#longbridge.openapi.DerivativeType.Option","text":"Bases: DerivativeType US stock options","title":"Option"},{"location":"reference_all/#longbridge.openapi.DerivativeType.Warrant","text":"Bases: DerivativeType HK warrants","title":"Warrant"},{"location":"reference_all/#longbridge.openapi.SecurityBoard","text":"Security board","title":"SecurityBoard"},{"location":"reference_all/#longbridge.openapi.SecurityBoard.Unknown","text":"Bases: SecurityBoard Unknown","title":"Unknown"},{"location":"reference_all/#longbridge.openapi.SecurityBoard.USMain","text":"Bases: SecurityBoard US Pink Board","title":"USMain"},{"location":"reference_all/#longbridge.openapi.SecurityBoard.USPink","text":"Bases: SecurityBoard US Pink Board","title":"USPink"},{"location":"reference_all/#longbridge.openapi.SecurityBoard.USDJI","text":"Bases: SecurityBoard Dow Jones Industrial Average","title":"USDJI"},{"location":"reference_all/#longbridge.openapi.SecurityBoard.USNSDQ","text":"Bases: SecurityBoard Nasdsaq Index","title":"USNSDQ"},{"location":"reference_all/#longbridge.openapi.SecurityBoard.USSector","text":"Bases: SecurityBoard US Industry Board","title":"USSector"},{"location":"reference_all/#longbridge.openapi.SecurityBoard.USOption","text":"Bases: SecurityBoard US Option","title":"USOption"},{"location":"reference_all/#longbridge.openapi.SecurityBoard.USOptionS","text":"Bases: SecurityBoard US Sepecial Option","title":"USOptionS"},{"location":"reference_all/#longbridge.openapi.SecurityBoard.HKEquity","text":"Bases: SecurityBoard Hong Kong Equity Securities","title":"HKEquity"},{"location":"reference_all/#longbridge.openapi.SecurityBoard.HKPreIPO","text":"Bases: SecurityBoard HK PreIPO Security","title":"HKPreIPO"},{"location":"reference_all/#longbridge.openapi.SecurityBoard.HKWarrant","text":"Bases: SecurityBoard HK Warrant","title":"HKWarrant"},{"location":"reference_all/#longbridge.openapi.SecurityBoard.HKHS","text":"Bases: SecurityBoard Hang Seng Index","title":"HKHS"},{"location":"reference_all/#longbridge.openapi.SecurityBoard.HKSector","text":"Bases: SecurityBoard HK Industry Board","title":"HKSector"},{"location":"reference_all/#longbridge.openapi.SecurityBoard.SHMainConnect","text":"Bases: SecurityBoard SH Main Board(Connect)","title":"SHMainConnect"},{"location":"reference_all/#longbridge.openapi.SecurityBoard.SHMainNonConnect","text":"Bases: SecurityBoard SH Main Board(Non Connect)","title":"SHMainNonConnect"},{"location":"reference_all/#longbridge.openapi.SecurityBoard.SHSTAR","text":"Bases: SecurityBoard SH Science and Technology Innovation Board","title":"SHSTAR"},{"location":"reference_all/#longbridge.openapi.SecurityBoard.CNIX","text":"Bases: SecurityBoard CN Index","title":"CNIX"},{"location":"reference_all/#longbridge.openapi.SecurityBoard.CNSector","text":"Bases: SecurityBoard CN Industry Board","title":"CNSector"},{"location":"reference_all/#longbridge.openapi.SecurityBoard.SZMainConnect","text":"Bases: SecurityBoard SZ Main Board(Connect)","title":"SZMainConnect"},{"location":"reference_all/#longbridge.openapi.SecurityBoard.SZMainNonConnect","text":"Bases: SecurityBoard SZ Main Board(Non Connect)","title":"SZMainNonConnect"},{"location":"reference_all/#longbridge.openapi.SecurityBoard.SZGEMConnect","text":"Bases: SecurityBoard SZ Gem Board(Connect)","title":"SZGEMConnect"},{"location":"reference_all/#longbridge.openapi.SecurityBoard.SZGEMNonConnect","text":"Bases: SecurityBoard SZ Gem Board(Non Connect)","title":"SZGEMNonConnect"},{"location":"reference_all/#longbridge.openapi.SecurityBoard.SGMain","text":"Bases: SecurityBoard SG Main Board","title":"SGMain"},{"location":"reference_all/#longbridge.openapi.SecurityBoard.STI","text":"Bases: SecurityBoard Singapore Straits Index","title":"STI"},{"location":"reference_all/#longbridge.openapi.SecurityBoard.SGSector","text":"Bases: SecurityBoard SG Industry Board","title":"SGSector"},{"location":"reference_all/#longbridge.openapi.SecurityStaticInfo","text":"The basic information of securities","title":"SecurityStaticInfo"},{"location":"reference_all/#longbridge.openapi.SecurityStaticInfo.symbol","text":"symbol: str Security code","title":"symbol"},{"location":"reference_all/#longbridge.openapi.SecurityStaticInfo.name_cn","text":"name_cn: str Security name (zh-CN)","title":"name_cn"},{"location":"reference_all/#longbridge.openapi.SecurityStaticInfo.name_en","text":"name_en: str Security name (en)","title":"name_en"},{"location":"reference_all/#longbridge.openapi.SecurityStaticInfo.name_hk","text":"name_hk: str Security name (zh-HK)","title":"name_hk"},{"location":"reference_all/#longbridge.openapi.SecurityStaticInfo.exchange","text":"exchange: str Exchange which the security belongs to","title":"exchange"},{"location":"reference_all/#longbridge.openapi.SecurityStaticInfo.currency","text":"currency: str Trading currency","title":"currency"},{"location":"reference_all/#longbridge.openapi.SecurityStaticInfo.lot_size","text":"lot_size: int Lot size","title":"lot_size"},{"location":"reference_all/#longbridge.openapi.SecurityStaticInfo.total_shares","text":"total_shares: int Total shares","title":"total_shares"},{"location":"reference_all/#longbridge.openapi.SecurityStaticInfo.circulating_shares","text":"circulating_shares: int Circulating shares","title":"circulating_shares"},{"location":"reference_all/#longbridge.openapi.SecurityStaticInfo.hk_shares","text":"hk_shares: int HK shares (only HK stocks)","title":"hk_shares"},{"location":"reference_all/#longbridge.openapi.SecurityStaticInfo.eps","text":"eps: Decimal Earnings per share","title":"eps"},{"location":"reference_all/#longbridge.openapi.SecurityStaticInfo.eps_ttm","text":"eps_ttm: Decimal Earnings per share (TTM)","title":"eps_ttm"},{"location":"reference_all/#longbridge.openapi.SecurityStaticInfo.bps","text":"bps: Decimal Net assets per share","title":"bps"},{"location":"reference_all/#longbridge.openapi.SecurityStaticInfo.dividend_yield","text":"dividend_yield: Decimal Dividend yield","title":"dividend_yield"},{"location":"reference_all/#longbridge.openapi.SecurityStaticInfo.stock_derivatives","text":"stock_derivatives: List[Type[DerivativeType]] Types of supported derivatives","title":"stock_derivatives"},{"location":"reference_all/#longbridge.openapi.SecurityStaticInfo.board","text":"board: Type[SecurityBoard] Board","title":"board"},{"location":"reference_all/#longbridge.openapi.TradeStatus","text":"Security Status","title":"TradeStatus"},{"location":"reference_all/#longbridge.openapi.TradeStatus.Normal","text":"Bases: TradeStatus Normal","title":"Normal"},{"location":"reference_all/#longbridge.openapi.TradeStatus.Halted","text":"Bases: TradeStatus Suspension","title":"Halted"},{"location":"reference_all/#longbridge.openapi.TradeStatus.Delisted","text":"Bases: TradeStatus Delisted","title":"Delisted"},{"location":"reference_all/#longbridge.openapi.TradeStatus.Fuse","text":"Bases: TradeStatus Fuse","title":"Fuse"},{"location":"reference_all/#longbridge.openapi.TradeStatus.PrepareList","text":"Bases: TradeStatus Prepare List","title":"PrepareList"},{"location":"reference_all/#longbridge.openapi.TradeStatus.CodeMoved","text":"Bases: TradeStatus Code Moved","title":"CodeMoved"},{"location":"reference_all/#longbridge.openapi.TradeStatus.ToBeOpened","text":"Bases: TradeStatus To Be Opened","title":"ToBeOpened"},{"location":"reference_all/#longbridge.openapi.TradeStatus.SplitStockHalts","text":"Bases: TradeStatus Split Stock Halts","title":"SplitStockHalts"},{"location":"reference_all/#longbridge.openapi.TradeStatus.Expired","text":"Bases: TradeStatus Expired","title":"Expired"},{"location":"reference_all/#longbridge.openapi.TradeStatus.WarrantPrepareList","text":"Bases: TradeStatus Warrant To BeListed","title":"WarrantPrepareList"},{"location":"reference_all/#longbridge.openapi.TradeStatus.SuspendTrade","text":"Bases: TradeStatus Suspend","title":"SuspendTrade"},{"location":"reference_all/#longbridge.openapi.PrePostQuote","text":"Quote of US pre/post market","title":"PrePostQuote"},{"location":"reference_all/#longbridge.openapi.PrePostQuote.last_done","text":"last_done: Decimal Latest price","title":"last_done"},{"location":"reference_all/#longbridge.openapi.PrePostQuote.timestamp","text":"timestamp: datetime Time of latest price","title":"timestamp"},{"location":"reference_all/#longbridge.openapi.PrePostQuote.volume","text":"volume: int Volume","title":"volume"},{"location":"reference_all/#longbridge.openapi.PrePostQuote.turnover","text":"turnover: Decimal Turnover","title":"turnover"},{"location":"reference_all/#longbridge.openapi.PrePostQuote.high","text":"high: Decimal High","title":"high"},{"location":"reference_all/#longbridge.openapi.PrePostQuote.low","text":"low: Decimal Low","title":"low"},{"location":"reference_all/#longbridge.openapi.PrePostQuote.prev_close","text":"prev_close: Decimal Close of the last trade session","title":"prev_close"},{"location":"reference_all/#longbridge.openapi.SecurityQuote","text":"Quote of securitity","title":"SecurityQuote"},{"location":"reference_all/#longbridge.openapi.SecurityQuote.symbol","text":"symbol: str Security code","title":"symbol"},{"location":"reference_all/#longbridge.openapi.SecurityQuote.last_done","text":"last_done: Decimal Latest price","title":"last_done"},{"location":"reference_all/#longbridge.openapi.SecurityQuote.prev_close","text":"prev_close: Decimal Yesterday's close","title":"prev_close"},{"location":"reference_all/#longbridge.openapi.SecurityQuote.open","text":"open: Decimal Open","title":"open"},{"location":"reference_all/#longbridge.openapi.SecurityQuote.high","text":"high: Decimal High","title":"high"},{"location":"reference_all/#longbridge.openapi.SecurityQuote.low","text":"low: Decimal Low","title":"low"},{"location":"reference_all/#longbridge.openapi.SecurityQuote.timestamp","text":"timestamp: datetime Time of latest price","title":"timestamp"},{"location":"reference_all/#longbridge.openapi.SecurityQuote.volume","text":"volume: int Volume","title":"volume"},{"location":"reference_all/#longbridge.openapi.SecurityQuote.turnover","text":"turnover: Decimal Turnover","title":"turnover"},{"location":"reference_all/#longbridge.openapi.SecurityQuote.trade_status","text":"trade_status: Type[TradeStatus] Security trading status","title":"trade_status"},{"location":"reference_all/#longbridge.openapi.SecurityQuote.pre_market_quote","text":"pre_market_quote: Optional[PrePostQuote] Quote of US pre market","title":"pre_market_quote"},{"location":"reference_all/#longbridge.openapi.SecurityQuote.post_market_quote","text":"post_market_quote: Optional[PrePostQuote] Quote of US post market","title":"post_market_quote"},{"location":"reference_all/#longbridge.openapi.OptionType","text":"Option type","title":"OptionType"},{"location":"reference_all/#longbridge.openapi.OptionType.Unknown","text":"Bases: OptionType Unknown","title":"Unknown"},{"location":"reference_all/#longbridge.openapi.OptionType.American","text":"Bases: OptionType American","title":"American"},{"location":"reference_all/#longbridge.openapi.OptionType.Europe","text":"Bases: OptionType Europe","title":"Europe"},{"location":"reference_all/#longbridge.openapi.OptionDirection","text":"Option direction","title":"OptionDirection"},{"location":"reference_all/#longbridge.openapi.OptionDirection.Unknown","text":"Bases: OptionDirection Unknown","title":"Unknown"},{"location":"reference_all/#longbridge.openapi.OptionDirection.Put","text":"Bases: OptionDirection Put","title":"Put"},{"location":"reference_all/#longbridge.openapi.OptionDirection.Call","text":"Bases: OptionDirection Call","title":"Call"},{"location":"reference_all/#longbridge.openapi.OptionQuote","text":"Quote of option","title":"OptionQuote"},{"location":"reference_all/#longbridge.openapi.OptionQuote.symbol","text":"symbol: str Security code","title":"symbol"},{"location":"reference_all/#longbridge.openapi.OptionQuote.last_done","text":"last_done: Decimal Latest price","title":"last_done"},{"location":"reference_all/#longbridge.openapi.OptionQuote.prev_close","text":"prev_close: Decimal Yesterday's close","title":"prev_close"},{"location":"reference_all/#longbridge.openapi.OptionQuote.open","text":"open: Decimal Open","title":"open"},{"location":"reference_all/#longbridge.openapi.OptionQuote.high","text":"high: Decimal High","title":"high"},{"location":"reference_all/#longbridge.openapi.OptionQuote.low","text":"low: Decimal Low","title":"low"},{"location":"reference_all/#longbridge.openapi.OptionQuote.timestamp","text":"timestamp: datetime Time of latest price","title":"timestamp"},{"location":"reference_all/#longbridge.openapi.OptionQuote.volume","text":"volume: int Volume","title":"volume"},{"location":"reference_all/#longbridge.openapi.OptionQuote.turnover","text":"turnover: Decimal Turnover","title":"turnover"},{"location":"reference_all/#longbridge.openapi.OptionQuote.trade_status","text":"trade_status: Type[TradeStatus] Security trading status","title":"trade_status"},{"location":"reference_all/#longbridge.openapi.OptionQuote.implied_volatility","text":"implied_volatility: Decimal Implied volatility","title":"implied_volatility"},{"location":"reference_all/#longbridge.openapi.OptionQuote.open_interest","text":"open_interest: int Number of open positions","title":"open_interest"},{"location":"reference_all/#longbridge.openapi.OptionQuote.expiry_date","text":"expiry_date: date Exprity date","title":"expiry_date"},{"location":"reference_all/#longbridge.openapi.OptionQuote.strike_price","text":"strike_price: Decimal Strike price","title":"strike_price"},{"location":"reference_all/#longbridge.openapi.OptionQuote.contract_multiplier","text":"contract_multiplier: Decimal Contract multiplier","title":"contract_multiplier"},{"location":"reference_all/#longbridge.openapi.OptionQuote.contract_type","text":"contract_type: Type[OptionType] Option type","title":"contract_type"},{"location":"reference_all/#longbridge.openapi.OptionQuote.contract_size","text":"contract_size: Decimal Contract size","title":"contract_size"},{"location":"reference_all/#longbridge.openapi.OptionQuote.direction","text":"direction: Type[OptionDirection] Option direction","title":"direction"},{"location":"reference_all/#longbridge.openapi.OptionQuote.historical_volatility","text":"historical_volatility: Decimal Underlying security historical volatility of the option","title":"historical_volatility"},{"location":"reference_all/#longbridge.openapi.OptionQuote.underlying_symbol","text":"underlying_symbol: str Underlying security symbol of the option","title":"underlying_symbol"},{"location":"reference_all/#longbridge.openapi.WarrantType","text":"Warrant type","title":"WarrantType"},{"location":"reference_all/#longbridge.openapi.WarrantType.Unknown","text":"Bases: WarrantType Unknown","title":"Unknown"},{"location":"reference_all/#longbridge.openapi.WarrantType.Call","text":"Bases: WarrantType Call","title":"Call"},{"location":"reference_all/#longbridge.openapi.WarrantType.Put","text":"Bases: WarrantType Put","title":"Put"},{"location":"reference_all/#longbridge.openapi.WarrantType.Bull","text":"Bases: WarrantType Bull","title":"Bull"},{"location":"reference_all/#longbridge.openapi.WarrantType.Bear","text":"Bases: WarrantType Bear","title":"Bear"},{"location":"reference_all/#longbridge.openapi.WarrantType.Inline","text":"Bases: WarrantType Inline","title":"Inline"},{"location":"reference_all/#longbridge.openapi.WarrantQuote","text":"Quote of warrant","title":"WarrantQuote"},{"location":"reference_all/#longbridge.openapi.WarrantQuote.symbol","text":"symbol: str Security code","title":"symbol"},{"location":"reference_all/#longbridge.openapi.WarrantQuote.last_done","text":"last_done: Decimal Latest price","title":"last_done"},{"location":"reference_all/#longbridge.openapi.WarrantQuote.prev_close","text":"prev_close: Decimal Yesterday's close","title":"prev_close"},{"location":"reference_all/#longbridge.openapi.WarrantQuote.open","text":"open: Decimal Open","title":"open"},{"location":"reference_all/#longbridge.openapi.WarrantQuote.high","text":"high: Decimal High","title":"high"},{"location":"reference_all/#longbridge.openapi.WarrantQuote.low","text":"low: Decimal Low","title":"low"},{"location":"reference_all/#longbridge.openapi.WarrantQuote.timestamp","text":"timestamp: datetime Time of latest price","title":"timestamp"},{"location":"reference_all/#longbridge.openapi.WarrantQuote.volume","text":"volume: int Volume","title":"volume"},{"location":"reference_all/#longbridge.openapi.WarrantQuote.turnover","text":"turnover: Decimal Turnover","title":"turnover"},{"location":"reference_all/#longbridge.openapi.WarrantQuote.trade_status","text":"trade_status: Type[TradeStatus] Security trading status","title":"trade_status"},{"location":"reference_all/#longbridge.openapi.WarrantQuote.implied_volatility","text":"implied_volatility: Decimal Implied volatility","title":"implied_volatility"},{"location":"reference_all/#longbridge.openapi.WarrantQuote.expiry_date","text":"expiry_date: date Exprity date","title":"expiry_date"},{"location":"reference_all/#longbridge.openapi.WarrantQuote.last_trade_date","text":"last_trade_date: date Last tradalbe date","title":"last_trade_date"},{"location":"reference_all/#longbridge.openapi.WarrantQuote.outstanding_ratio","text":"outstanding_ratio: Decimal Outstanding ratio","title":"outstanding_ratio"},{"location":"reference_all/#longbridge.openapi.WarrantQuote.outstanding_quantity","text":"outstanding_quantity: int Outstanding quantity","title":"outstanding_quantity"},{"location":"reference_all/#longbridge.openapi.WarrantQuote.conversion_ratio","text":"conversion_ratio: Decimal Conversion ratio","title":"conversion_ratio"},{"location":"reference_all/#longbridge.openapi.WarrantQuote.category","text":"category: Type[WarrantType] Warrant type","title":"category"},{"location":"reference_all/#longbridge.openapi.WarrantQuote.strike_price","text":"strike_price: Decimal Strike price","title":"strike_price"},{"location":"reference_all/#longbridge.openapi.WarrantQuote.upper_strike_price","text":"upper_strike_price: Decimal Upper bound price","title":"upper_strike_price"},{"location":"reference_all/#longbridge.openapi.WarrantQuote.lower_strike_price","text":"lower_strike_price: Decimal Lower bound price","title":"lower_strike_price"},{"location":"reference_all/#longbridge.openapi.WarrantQuote.call_price","text":"call_price: Decimal Call price","title":"call_price"},{"location":"reference_all/#longbridge.openapi.WarrantQuote.underlying_symbol","text":"underlying_symbol: str Underlying security symbol of the warrant","title":"underlying_symbol"},{"location":"reference_all/#longbridge.openapi.Depth","text":"Depth","title":"Depth"},{"location":"reference_all/#longbridge.openapi.Depth.position","text":"position: int Position","title":"position"},{"location":"reference_all/#longbridge.openapi.Depth.price","text":"price: Decimal Price","title":"price"},{"location":"reference_all/#longbridge.openapi.Depth.volume","text":"volume: int Volume","title":"volume"},{"location":"reference_all/#longbridge.openapi.Depth.order_num","text":"order_num: int Number of orders","title":"order_num"},{"location":"reference_all/#longbridge.openapi.SecurityDepth","text":"Security depth","title":"SecurityDepth"},{"location":"reference_all/#longbridge.openapi.SecurityDepth.asks","text":"asks: List[Depth] Ask depth","title":"asks"},{"location":"reference_all/#longbridge.openapi.SecurityDepth.bids","text":"bids: List[Depth] Bid depth","title":"bids"},{"location":"reference_all/#longbridge.openapi.Brokers","text":"Brokers","title":"Brokers"},{"location":"reference_all/#longbridge.openapi.Brokers.position","text":"position: int Position","title":"position"},{"location":"reference_all/#longbridge.openapi.Brokers.broker_ids","text":"broker_ids: List[int] Broker IDs","title":"broker_ids"},{"location":"reference_all/#longbridge.openapi.SecurityBrokers","text":"Security brokers","title":"SecurityBrokers"},{"location":"reference_all/#longbridge.openapi.SecurityBrokers.ask_brokers","text":"ask_brokers: List[Brokers] Ask brokers","title":"ask_brokers"},{"location":"reference_all/#longbridge.openapi.SecurityBrokers.bid_brokers","text":"bid_brokers: List[Brokers] Bid brokers","title":"bid_brokers"},{"location":"reference_all/#longbridge.openapi.ParticipantInfo","text":"Participant info","title":"ParticipantInfo"},{"location":"reference_all/#longbridge.openapi.ParticipantInfo.broker_ids","text":"broker_ids: List[int] Broker IDs","title":"broker_ids"},{"location":"reference_all/#longbridge.openapi.ParticipantInfo.name_cn","text":"name_cn: str Participant name (zh-CN)","title":"name_cn"},{"location":"reference_all/#longbridge.openapi.ParticipantInfo.name_en","text":"name_en: str Participant name (en)","title":"name_en"},{"location":"reference_all/#longbridge.openapi.ParticipantInfo.name_hk","text":"name_hk: str Participant name (zh-HK)","title":"name_hk"},{"location":"reference_all/#longbridge.openapi.TradeDirection","text":"Trade direction","title":"TradeDirection"},{"location":"reference_all/#longbridge.openapi.TradeDirection.Neutral","text":"Bases: TradeDirection Neutral","title":"Neutral"},{"location":"reference_all/#longbridge.openapi.TradeDirection.Down","text":"Bases: TradeDirection Down","title":"Down"},{"location":"reference_all/#longbridge.openapi.TradeDirection.Up","text":"Bases: TradeDirection Up","title":"Up"},{"location":"reference_all/#longbridge.openapi.TradeSession","text":"Trade session","title":"TradeSession"},{"location":"reference_all/#longbridge.openapi.TradeSession.Normal","text":"Bases: TradeSession Trading","title":"Normal"},{"location":"reference_all/#longbridge.openapi.TradeSession.Pre","text":"Bases: TradeSession Pre-Trading","title":"Pre"},{"location":"reference_all/#longbridge.openapi.TradeSession.Post","text":"Bases: TradeSession Post-Trading","title":"Post"},{"location":"reference_all/#longbridge.openapi.Trade","text":"Trade","title":"Trade"},{"location":"reference_all/#longbridge.openapi.Trade.price","text":"price: Decimal Price","title":"price"},{"location":"reference_all/#longbridge.openapi.Trade.volume","text":"volume: int Volume","title":"volume"},{"location":"reference_all/#longbridge.openapi.Trade.timestamp","text":"timestamp: datetime Time of trading","title":"timestamp"},{"location":"reference_all/#longbridge.openapi.Trade.trade_type","text":"trade_type: str Trade type HK * - Overseas trade D - Odd-lot trade M - Non-direct off-exchange trade P - Late trade (Off-exchange previous day) U - Auction trade X - Direct off-exchange trade Y - Automatch internalized <empty string> - Automatch normal US <empty string> - Regular sale A - Acquisition B - Bunched trade D - Distribution F - Intermarket sweep G - Bunched sold trades H - Price variation trade I - Odd lot trade K - Rule 155 trde(NYSE MKT) M - Market center close price P - Prior reference price Q - Market center open price S - Split trade V - Contingent trade W - Average price trade X - Cross trade 1 - Stopped stock(Regular trade)","title":"trade_type"},{"location":"reference_all/#longbridge.openapi.Trade.direction","text":"direction: Type[TradeDirection] Trade direction","title":"direction"},{"location":"reference_all/#longbridge.openapi.Trade.trade_session","text":"trade_session: Type[TradeSession] Trade session","title":"trade_session"},{"location":"reference_all/#longbridge.openapi.IntradayLine","text":"Intraday line","title":"IntradayLine"},{"location":"reference_all/#longbridge.openapi.IntradayLine.price","text":"price: Decimal Close price of the minute","title":"price"},{"location":"reference_all/#longbridge.openapi.IntradayLine.timestamp","text":"timestamp: datetime Start time of the minute","title":"timestamp"},{"location":"reference_all/#longbridge.openapi.IntradayLine.volume","text":"volume: int Volume","title":"volume"},{"location":"reference_all/#longbridge.openapi.IntradayLine.turnover","text":"turnover: Decimal Turnover","title":"turnover"},{"location":"reference_all/#longbridge.openapi.IntradayLine.avg_price","text":"avg_price: Decimal Average price","title":"avg_price"},{"location":"reference_all/#longbridge.openapi.Candlestick","text":"Candlestick","title":"Candlestick"},{"location":"reference_all/#longbridge.openapi.Candlestick.close","text":"close: Decimal Close price","title":"close"},{"location":"reference_all/#longbridge.openapi.Candlestick.open","text":"open: Decimal Open price","title":"open"},{"location":"reference_all/#longbridge.openapi.Candlestick.low","text":"low: Decimal Low price","title":"low"},{"location":"reference_all/#longbridge.openapi.Candlestick.high","text":"high: Decimal High price","title":"high"},{"location":"reference_all/#longbridge.openapi.Candlestick.volume","text":"volume: int Volume","title":"volume"},{"location":"reference_all/#longbridge.openapi.Candlestick.turnover","text":"turnover: Decimal Turnover","title":"turnover"},{"location":"reference_all/#longbridge.openapi.Candlestick.timestamp","text":"timestamp: datetime Timestamp","title":"timestamp"},{"location":"reference_all/#longbridge.openapi.AdjustType","text":"Candlestick adjustment type","title":"AdjustType"},{"location":"reference_all/#longbridge.openapi.AdjustType.NoAdjust","text":"Bases: AdjustType Actual","title":"NoAdjust"},{"location":"reference_all/#longbridge.openapi.AdjustType.ForwardAdjust","text":"Bases: AdjustType Adjust forward","title":"ForwardAdjust"},{"location":"reference_all/#longbridge.openapi.Period","text":"Candlestick period","title":"Period"},{"location":"reference_all/#longbridge.openapi.Period.Unknown","text":"Bases: Period Unknown","title":"Unknown"},{"location":"reference_all/#longbridge.openapi.Period.Min_1","text":"Bases: Period One Minute","title":"Min_1"},{"location":"reference_all/#longbridge.openapi.Period.Min_5","text":"Bases: Period Five Minutes","title":"Min_5"},{"location":"reference_all/#longbridge.openapi.Period.Min_15","text":"Bases: Period Fifteen Minutes","title":"Min_15"},{"location":"reference_all/#longbridge.openapi.Period.Min_30","text":"Bases: Period Thirty Minutes","title":"Min_30"},{"location":"reference_all/#longbridge.openapi.Period.Min_60","text":"Bases: Period Sixty Minutes","title":"Min_60"},{"location":"reference_all/#longbridge.openapi.Period.Day","text":"Bases: Period One Day","title":"Day"},{"location":"reference_all/#longbridge.openapi.Period.Week","text":"Bases: Period One Week","title":"Week"},{"location":"reference_all/#longbridge.openapi.Period.Month","text":"Bases: Period One Month","title":"Month"},{"location":"reference_all/#longbridge.openapi.Period.Year","text":"Bases: Period One Year","title":"Year"},{"location":"reference_all/#longbridge.openapi.StrikePriceInfo","text":"Strike price info","title":"StrikePriceInfo"},{"location":"reference_all/#longbridge.openapi.StrikePriceInfo.price","text":"price: Decimal Strike price","title":"price"},{"location":"reference_all/#longbridge.openapi.StrikePriceInfo.call_symbol","text":"call_symbol: str Security code of call option","title":"call_symbol"},{"location":"reference_all/#longbridge.openapi.StrikePriceInfo.put_symbol","text":"put_symbol: str Security code of put option","title":"put_symbol"},{"location":"reference_all/#longbridge.openapi.StrikePriceInfo.standard","text":"standard: bool Is standard","title":"standard"},{"location":"reference_all/#longbridge.openapi.IssuerInfo","text":"Issuer info","title":"IssuerInfo"},{"location":"reference_all/#longbridge.openapi.IssuerInfo.issuer_id","text":"issuer_id: int Issuer ID","title":"issuer_id"},{"location":"reference_all/#longbridge.openapi.IssuerInfo.name_cn","text":"name_cn: str Issuer name (zh-CN)","title":"name_cn"},{"location":"reference_all/#longbridge.openapi.IssuerInfo.name_en","text":"name_en: str Issuer name (en)","title":"name_en"},{"location":"reference_all/#longbridge.openapi.IssuerInfo.name_hk","text":"name_hk: str Issuer name (zh-HK)","title":"name_hk"},{"location":"reference_all/#longbridge.openapi.TradingSessionInfo","text":"The information of trading session","title":"TradingSessionInfo"},{"location":"reference_all/#longbridge.openapi.TradingSessionInfo.begin_time","text":"begin_time: time Being trading time","title":"begin_time"},{"location":"reference_all/#longbridge.openapi.TradingSessionInfo.end_time","text":"end_time: time End trading time","title":"end_time"},{"location":"reference_all/#longbridge.openapi.TradingSessionInfo.trade_session","text":"trade_session: Type[TradeSession] Trading sessions","title":"trade_session"},{"location":"reference_all/#longbridge.openapi.MarketTradingSession","text":"Market trading session","title":"MarketTradingSession"},{"location":"reference_all/#longbridge.openapi.MarketTradingSession.market","text":"market: Type[Market] Market","title":"market"},{"location":"reference_all/#longbridge.openapi.MarketTradingSession.trade_sessions","text":"trade_sessions: List[TradingSessionInfo] Trading session","title":"trade_sessions"},{"location":"reference_all/#longbridge.openapi.MarketTradingDays","text":"","title":"MarketTradingDays"},{"location":"reference_all/#longbridge.openapi.MarketTradingDays.trading_days","text":"trading_days: List[date]","title":"trading_days"},{"location":"reference_all/#longbridge.openapi.MarketTradingDays.half_trading_days","text":"half_trading_days: List[date]","title":"half_trading_days"},{"location":"reference_all/#longbridge.openapi.CapitalFlowLine","text":"Capital flow line","title":"CapitalFlowLine"},{"location":"reference_all/#longbridge.openapi.CapitalFlowLine.inflow","text":"inflow: Decimal Inflow capital data","title":"inflow"},{"location":"reference_all/#longbridge.openapi.CapitalFlowLine.timestamp","text":"timestamp: datetime Time","title":"timestamp"},{"location":"reference_all/#longbridge.openapi.CapitalDistribution","text":"Capital distribution","title":"CapitalDistribution"},{"location":"reference_all/#longbridge.openapi.CapitalDistribution.large","text":"large: Decimal Large order","title":"large"},{"location":"reference_all/#longbridge.openapi.CapitalDistribution.medium","text":"medium: Decimal Medium order","title":"medium"},{"location":"reference_all/#longbridge.openapi.CapitalDistribution.small","text":"small: Decimal Small order","title":"small"},{"location":"reference_all/#longbridge.openapi.CapitalDistributionResponse","text":"Capital distribution response","title":"CapitalDistributionResponse"},{"location":"reference_all/#longbridge.openapi.CapitalDistributionResponse.timestamp","text":"timestamp: datetime Time","title":"timestamp"},{"location":"reference_all/#longbridge.openapi.CapitalDistributionResponse.capital_in","text":"capital_in: CapitalDistribution Inflow capital data","title":"capital_in"},{"location":"reference_all/#longbridge.openapi.CapitalDistributionResponse.capital_out","text":"capital_out: CapitalDistribution Outflow capital data","title":"capital_out"},{"location":"reference_all/#longbridge.openapi.WatchlistSecurity","text":"Watchlist security","title":"WatchlistSecurity"},{"location":"reference_all/#longbridge.openapi.WatchlistSecurity.symbol","text":"symbol: str Security symbol","title":"symbol"},{"location":"reference_all/#longbridge.openapi.WatchlistSecurity.market","text":"market: Market Market","title":"market"},{"location":"reference_all/#longbridge.openapi.WatchlistSecurity.name","text":"name: str Security name","title":"name"},{"location":"reference_all/#longbridge.openapi.WatchlistSecurity.watched_price","text":"watched_price: Optional[Decimal] Watched price","title":"watched_price"},{"location":"reference_all/#longbridge.openapi.WatchlistSecurity.watched_at","text":"watched_at: datetime Watched time","title":"watched_at"},{"location":"reference_all/#longbridge.openapi.WatchlistGroup","text":"","title":"WatchlistGroup"},{"location":"reference_all/#longbridge.openapi.WatchlistGroup.id","text":"id: int Group id","title":"id"},{"location":"reference_all/#longbridge.openapi.WatchlistGroup.name","text":"name: str Group name","title":"name"},{"location":"reference_all/#longbridge.openapi.WatchlistGroup.securities","text":"securities: List[WatchlistSecurity] Securities","title":"securities"},{"location":"reference_all/#longbridge.openapi.SecuritiesUpdateMode","text":"Securities update mode","title":"SecuritiesUpdateMode"},{"location":"reference_all/#longbridge.openapi.SecuritiesUpdateMode.Add","text":"Bases: SecuritiesUpdateMode Add securities","title":"Add"},{"location":"reference_all/#longbridge.openapi.SecuritiesUpdateMode.Remove","text":"Bases: SecuritiesUpdateMode Remove securities","title":"Remove"},{"location":"reference_all/#longbridge.openapi.SecuritiesUpdateMode.Replace","text":"Bases: SecuritiesUpdateMode Replace securities","title":"Replace"},{"location":"reference_all/#longbridge.openapi.RealtimeQuote","text":"Real-time quote","title":"RealtimeQuote"},{"location":"reference_all/#longbridge.openapi.RealtimeQuote.symbol","text":"symbol: str Security code","title":"symbol"},{"location":"reference_all/#longbridge.openapi.RealtimeQuote.last_done","text":"last_done: Decimal Latest price","title":"last_done"},{"location":"reference_all/#longbridge.openapi.RealtimeQuote.open","text":"open: Decimal Open","title":"open"},{"location":"reference_all/#longbridge.openapi.RealtimeQuote.high","text":"high: Decimal High","title":"high"},{"location":"reference_all/#longbridge.openapi.RealtimeQuote.low","text":"low: Decimal Low","title":"low"},{"location":"reference_all/#longbridge.openapi.RealtimeQuote.timestamp","text":"timestamp: datetime Time of latest price","title":"timestamp"},{"location":"reference_all/#longbridge.openapi.RealtimeQuote.volume","text":"volume: int Volume","title":"volume"},{"location":"reference_all/#longbridge.openapi.RealtimeQuote.turnover","text":"turnover: Decimal Turnover","title":"turnover"},{"location":"reference_all/#longbridge.openapi.RealtimeQuote.trade_status","text":"trade_status: Type[TradeStatus] Security trading status","title":"trade_status"},{"location":"reference_all/#longbridge.openapi.Subscription","text":"Subscription","title":"Subscription"},{"location":"reference_all/#longbridge.openapi.Subscription.symbol","text":"symbol: str Security code","title":"symbol"},{"location":"reference_all/#longbridge.openapi.Subscription.sub_types","text":"sub_types: List[Type[SubType]] Subscription types","title":"sub_types"},{"location":"reference_all/#longbridge.openapi.Subscription.candlesticks","text":"candlesticks: List[Type[Period]] Candlesticks","title":"candlesticks"},{"location":"reference_all/#longbridge.openapi.QuoteContext","text":"Quote context Parameters: Name Type Description Default config Config Configuration object required","title":"QuoteContext"},{"location":"reference_all/#longbridge.openapi.QuoteContext.__init__","text":"__init__(config: Config) -> None","title":"__init__()"},{"location":"reference_all/#longbridge.openapi.QuoteContext.set_on_quote","text":"set_on_quote(callback: Callable[[str, PushQuote], None]) -> None Set quote callback, after receiving the quote data push, it will call back to this function.","title":"set_on_quote()"},{"location":"reference_all/#longbridge.openapi.QuoteContext.set_on_depth","text":"set_on_depth(callback: Callable[[str, PushDepth], None]) -> None Set depth callback, after receiving the depth data push, it will call back to this function.","title":"set_on_depth()"},{"location":"reference_all/#longbridge.openapi.QuoteContext.set_on_brokers","text":"set_on_brokers(callback: Callable[[str, PushBrokers], None]) -> None Set brokers callback, after receiving the brokers data push, it will call back to this function.","title":"set_on_brokers()"},{"location":"reference_all/#longbridge.openapi.QuoteContext.set_on_trades","text":"set_on_trades(callback: Callable[[str, PushTrades], None]) -> None Set trades callback, after receiving the trades data push, it will call back to this function.","title":"set_on_trades()"},{"location":"reference_all/#longbridge.openapi.QuoteContext.set_on_candlestick","text":"set_on_candlestick(callback: Callable[[str, PushCandlestick], None]) -> None Set candlestick callback, after receiving the candlestick updated event, it will call back to this function.","title":"set_on_candlestick()"},{"location":"reference_all/#longbridge.openapi.QuoteContext.subscribe","text":"subscribe(symbols: List[str], sub_types: List[Type[SubType]], is_first_push: bool = False) -> None Subscribe Parameters: Name Type Description Default symbols List [ str ] Security codes required sub_types List [ Type [ SubType ]] Subscribe types required is_first_push bool Whether to perform a data push immediately after subscribing. (trade not supported) False Examples: :: from time import sleep from longbridge.openapi import QuoteContext, Config, SubType, PushQuote def on_quote(symbol: str, event: PushQuote): print(symbol, event) config = Config.from_env() ctx = QuoteContext(config) ctx.set_on_quote(on_quote) ctx.subscribe([\"700.HK\", \"AAPL.US\"], [ SubType.Quote], is_first_push = True) sleep(30)","title":"subscribe()"},{"location":"reference_all/#longbridge.openapi.QuoteContext.unsubscribe","text":"unsubscribe(symbols: List[str], sub_types: List[Type[SubType]]) -> None Unsubscribe Parameters: Name Type Description Default symbols List [ str ] Security codes required sub_types List [ Type [ SubType ]] Subscribe types required Examples: :: from longbridge.openapi import QuoteContext, Config, SubType config = Config.from_env() ctx = QuoteContext(config) ctx.subscribe([\"700.HK\", \"AAPL.US\"], [SubType.Quote]) ctx.unsubscribe([\"AAPL.US\"], [SubType.Quote])","title":"unsubscribe()"},{"location":"reference_all/#longbridge.openapi.QuoteContext.subscribe_candlesticks","text":"subscribe_candlesticks(symbol: str, period: Type[Period]) -> None Subscribe security candlesticks Parameters: Name Type Description Default symbol str Security code required period Type [ Period ] Period type required Examples: :: from longbridge.openapi import QuoteContext, Config, PushCandlestick config = Config.from_env() ctx = QuoteContext(config) def on_candlestick(symbol: str, event: PushCandlestick): print(symbol, event) ctx.subscribe_candlesticks(\"700.HK\", Period.Min_1) sleep(30)","title":"subscribe_candlesticks()"},{"location":"reference_all/#longbridge.openapi.QuoteContext.unsubscribe_candlesticks","text":"unsubscribe_candlesticks(symbol: str, period: Type[Period]) -> None Subscribe security candlesticks Parameters: Name Type Description Default symbol str Security code required period Type [ Period ] Period type required","title":"unsubscribe_candlesticks()"},{"location":"reference_all/#longbridge.openapi.QuoteContext.subscriptions","text":"subscriptions() -> List[Subscription] Get subscription information Examples: :: from longbridge.openapi import QuoteContext, Config, SubType config = Config.from_env() ctx = QuoteContext(config) ctx.subscribe([\"700.HK\", \"AAPL.US\"], [SubType.Quote]) resp = ctx.subscriptions() print(resp)","title":"subscriptions()"},{"location":"reference_all/#longbridge.openapi.QuoteContext.static_info","text":"static_info(symbols: List[str]) -> List[SecurityStaticInfo] Get basic information of securities Parameters: Name Type Description Default symbols List [ str ] Security codes required Returns: Type Description List [ SecurityStaticInfo ] Security info list Examples: :: from longbridge.openapi import QuoteContext, Config config = Config.from_env() ctx = QuoteContext(config) resp = ctx.static_info( [\"700.HK\", \"AAPL.US\", \"TSLA.US\", \"NFLX.US\"]) print(resp)","title":"static_info()"},{"location":"reference_all/#longbridge.openapi.QuoteContext.quote","text":"quote(symbols: List[str]) -> List[SecurityQuote] Get quote of securities Parameters: Name Type Description Default symbols List [ str ] Security codes required Returns: Type Description List [ SecurityQuote ] Security quote list Examples: :: from longbridge.openapi import QuoteContext, Config config = Config.from_env() ctx = QuoteContext(config) resp = ctx.quote([\"700.HK\", \"AAPL.US\", \"TSLA.US\", \"NFLX.US\"]) print(resp)","title":"quote()"},{"location":"reference_all/#longbridge.openapi.QuoteContext.option_quote","text":"option_quote(symbols: List[str]) -> List[OptionQuote] Get quote of option securities Parameters: Name Type Description Default symbols List [ str ] Security codes required Returns: Type Description List [ OptionQuote ] Option quote list Examples: :: from longbridge.openapi import QuoteContext, Config config = Config.from_env() ctx = QuoteContext(config) resp = ctx.option_quote([\"AAPL230317P160000.US\"]) print(resp)","title":"option_quote()"},{"location":"reference_all/#longbridge.openapi.QuoteContext.warrant_quote","text":"warrant_quote(symbols: List[str]) -> List[WarrantQuote] Get quote of warrant securities Parameters: Name Type Description Default symbols List [ str ] Security codes required Returns: Type Description List [ WarrantQuote ] Warrant quote list Examples: :: from longbridge.openapi import QuoteContext, Config config = Config.from_env() ctx = QuoteContext(config) resp = ctx.warrant_quote([\"21125.HK\"]) print(resp)","title":"warrant_quote()"},{"location":"reference_all/#longbridge.openapi.QuoteContext.depth","text":"depth(symbol: str) -> SecurityDepth Get security depth Parameters: Name Type Description Default symbol str Security code required Returns: Type Description SecurityDepth Security depth Examples: :: from longbridge.openapi import QuoteContext, Config config = Config.from_env() ctx = QuoteContext(config) resp = ctx.depth(\"700.HK\") print(resp)","title":"depth()"},{"location":"reference_all/#longbridge.openapi.QuoteContext.brokers","text":"brokers(symbol: str) -> SecurityBrokers Get security brokers Parameters: Name Type Description Default symbol str Security code required Returns: Type Description SecurityBrokers Security brokers Examples: :: from longbridge.openapi import QuoteContext, Config config = Config.from_env() ctx = QuoteContext(config) resp = ctx.brokers(\"700.HK\") print(resp)","title":"brokers()"},{"location":"reference_all/#longbridge.openapi.QuoteContext.participants","text":"participants() -> List[ParticipantInfo] Get participants Returns: Type Description List [ ParticipantInfo ] Participants Examples: :: from longbridge.openapi import QuoteContext, Config config = Config.from_env() ctx = QuoteContext(config) resp = ctx.participants() print(resp)","title":"participants()"},{"location":"reference_all/#longbridge.openapi.QuoteContext.trades","text":"trades(symbol: str, count: int) -> List[Trade] Get security trades Parameters: Name Type Description Default symbol str Security code required count int Count of trades (Maximum is 1000 ) required Returns: Type Description List [ Trade ] Trades Examples: :: from longbridge.openapi import QuoteContext, Config config = Config.from_env() ctx = QuoteContext(config) resp = ctx.trades(\"700.HK\", 10) print(resp)","title":"trades()"},{"location":"reference_all/#longbridge.openapi.QuoteContext.intraday","text":"intraday(symbol: str) -> List[IntradayLine] Get security intraday lines Parameters: Name Type Description Default symbol str Security code required Returns: Type Description List [ IntradayLine ] Intraday lines Examples: :: from longbridge.openapi import QuoteContext, Config config = Config.from_env() ctx = QuoteContext(config) resp = ctx.intraday(\"700.HK\") print(resp)","title":"intraday()"},{"location":"reference_all/#longbridge.openapi.QuoteContext.candlesticks","text":"candlesticks(symbol: str, period: Type[Period], count: int, adjust_type: Type[AdjustType]) -> List[Candlestick] Get security candlesticks Parameters: Name Type Description Default symbol str Security code required period Type [ Period ] Candlestick period required count int Count of cancdlestick (Maximum is 1000 ) required adjust_type Type [ AdjustType ] Adjustment type required Returns: Type Description List [ Candlestick ] Candlesticks Examples: :: from longbridge.openapi import QuoteContext, Config, Period, AdjustType config = Config.from_env() ctx = QuoteContext(config) resp = ctx.candlesticks( \"700.HK\", Period.Day, 10, AdjustType.NoAdjust) print(resp)","title":"candlesticks()"},{"location":"reference_all/#longbridge.openapi.QuoteContext.option_chain_expiry_date_list","text":"option_chain_expiry_date_list(symbol: str) -> List[date] Get option chain expiry date list Parameters: Name Type Description Default symbol str Security code required Returns: Type Description List [ date ] Option chain expiry date list Examples: :: from longbridge.openapi import QuoteContext, Config config = Config.from_env() ctx = QuoteContext(config) resp = ctx.option_chain_expiry_date_list(\"AAPL.US\") print(resp)","title":"option_chain_expiry_date_list()"},{"location":"reference_all/#longbridge.openapi.QuoteContext.option_chain_info_by_date","text":"option_chain_info_by_date(symbol: str, expiry_date: date) -> List[StrikePriceInfo] Get option chain info by date Parameters: Name Type Description Default symbol str Security code required expiry_date date Expiry date required Returns: Type Description List [ StrikePriceInfo ] Option chain info Examples: :: from datetime import date from longbridge.openapi import QuoteContext, Config config = Config.from_env() ctx = QuoteContext(config) resp = ctx.option_chain_info_by_date( \"AAPL.US\", date(2023, 1, 20)) print(resp)","title":"option_chain_info_by_date()"},{"location":"reference_all/#longbridge.openapi.QuoteContext.warrant_issuers","text":"warrant_issuers() -> List[IssuerInfo] Get warrant issuers Returns: Type Description List [ IssuerInfo ] Warrant issuers Examples: :: from longbridge.openapi import QuoteContext, Config config = Config.from_env() ctx = QuoteContext(config) resp = ctx.warrant_issuers() print(resp)","title":"warrant_issuers()"},{"location":"reference_all/#longbridge.openapi.QuoteContext.trading_session","text":"trading_session() -> List[MarketTradingSession] Get trading session of the day Returns: Type Description List [ MarketTradingSession ] Trading session of the day Examples: :: from longbridge.openapi import QuoteContext, Config config = Config.from_env() ctx = QuoteContext(config) resp = ctx.trading_session() print(resp)","title":"trading_session()"},{"location":"reference_all/#longbridge.openapi.QuoteContext.trading_days","text":"trading_days(market: Type[Market], begin: date, end: date) -> MarketTradingDays Get trading session of the day The interval must be less than one month, and only the most recent year is supported. Parameters: Name Type Description Default market Type [ Market ] Market required begin date Begin date required end date End date required Returns: Type Description MarketTradingDays Trading days Examples: :: from datetime import date from longbridge.openapi import QuoteContext, Config, Market config = Config.from_env() ctx = QuoteContext(config) resp = ctx.trading_days( Market.HK, date(2022, 1, 1), date(2022, 2, 1)) print(resp)","title":"trading_days()"},{"location":"reference_all/#longbridge.openapi.QuoteContext.capital_flow","text":"capital_flow(symbol: str) -> List[CapitalFlowLine] Get capital flow intraday Parameters: Name Type Description Default symbol str Security code required Returns: Type Description List [ CapitalFlowLine ] Capital flow list Examples: :: from longbridge.openapi import QuoteContext, Config config = Config.from_env() ctx = QuoteContext(config) resp = ctx.capital_flow(\"700.HK\") print(resp)","title":"capital_flow()"},{"location":"reference_all/#longbridge.openapi.QuoteContext.capital_distribution","text":"capital_distribution(symbol: str) -> CapitalDistributionResponse Get capital distribution Parameters: Name Type Description Default symbol str Security code required Returns: Type Description CapitalDistributionResponse Capital distribution Examples: :: from longbridge.openapi import QuoteContext, Config config = Config.from_env() ctx = QuoteContext(config) resp = ctx.capital_distribution(\"700.HK\") print(resp)","title":"capital_distribution()"},{"location":"reference_all/#longbridge.openapi.QuoteContext.watch_list","text":"watch_list() -> List[WatchlistGroup] Get watch list Deprecated: use instead watchlist","title":"watch_list()"},{"location":"reference_all/#longbridge.openapi.QuoteContext.watchlist","text":"watchlist() -> List[WatchlistGroup] Get watch list Returns: Type Description List [ WatchlistGroup ] Watch list groups Examples: :: from longbridge.openapi import QuoteContext, Config config = Config.from_env() ctx = QuoteContext(config) resp = ctx.watchlist() print(resp)","title":"watchlist()"},{"location":"reference_all/#longbridge.openapi.QuoteContext.create_watchlist_group","text":"create_watchlist_group(name: str, securities: Optional[List[str]] = None) -> int Create watchlist group Parameters: Name Type Description Default name str Group name required securities Optional [ List [ str ]] Securities None Returns: Type Description int Group ID Examples: :: from longbridge.openapi import QuoteContext, Config config = Config.from_env() ctx = QuoteContext(config) group_id = ctx.create_watchlist_group(name = \"Watchlist1\", securities = [\"700.HK\", \"AAPL.US\"]) print(group_id)","title":"create_watchlist_group()"},{"location":"reference_all/#longbridge.openapi.QuoteContext.delete_watchlist_group","text":"delete_watchlist_group(id: int, purge: bool = False) Delete watchlist group Parameters: Name Type Description Default id int Group ID required purge bool Move securities in this group to the default group False Examples: :: from longbridge.openapi import QuoteContext, Config config = Config.from_env() ctx = QuoteContext(config) ctx.delete_watchlist_group(10086)","title":"delete_watchlist_group()"},{"location":"reference_all/#longbridge.openapi.QuoteContext.update_watchlist_group","text":"update_watchlist_group(id: int, name: Optional[str] = None, securities: Optional[List[str]] = None, mode: Optional[Type[SecuritiesUpdateMode]] = None) Update watchlist group Parameters: Name Type Description Default id int Group ID required name Optional [ str ] Group name None securities Optional [ List [ str ]] Securities None Examples: :: from longbridge.openapi import QuoteContext, Config, SecuritiesUpdateMode config = Config.from_env() ctx = QuoteContext(config) ctx.update_watchlist_group(10086, name = \"Watchlist2\", securities = [\"700.HK\", \"AAPL.US\"], SecuritiesUpdateMode.Replace)","title":"update_watchlist_group()"},{"location":"reference_all/#longbridge.openapi.QuoteContext.realtime_quote","text":"realtime_quote(symbols: List[str]) -> List[RealtimeQuote] Get real-time quote Get real-time quotes of the subscribed symbols, it always returns the data in the local storage. Parameters: Name Type Description Default symbols List [ str ] Security codes required Returns: Type Description List [ RealtimeQuote ] Quote list Examples: :: from time import sleep from longbridge.openapi import QuoteContext, Config, SubType config = Config.from_env() ctx = QuoteContext(config) ctx.subscribe([\"700.HK\", \"AAPL.US\"], [ SubType.Quote], is_first_push = True) sleep(5) resp = ctx.realtime_quote([\"700.HK\", \"AAPL.US\"]) print(resp)","title":"realtime_quote()"},{"location":"reference_all/#longbridge.openapi.QuoteContext.realtime_depth","text":"realtime_depth(symbol: str) -> SecurityDepth Get real-time depth Get real-time depth of the subscribed symbols, it always returns the data in the local storage. Parameters: Name Type Description Default symbol str Security code required Returns: Type Description SecurityDepth Security depth Examples: :: from time import sleep from longbridge.openapi import QuoteContext, Config, SubType config = Config.from_env() ctx = QuoteContext(config) ctx.subscribe([\"700.HK\", \"AAPL.US\"], [ SubType.Depth], is_first_push = True) sleep(5) resp = ctx.realtime_depth(\"700.HK\") print(resp)","title":"realtime_depth()"},{"location":"reference_all/#longbridge.openapi.QuoteContext.realtime_brokers","text":"realtime_brokers(symbol: str) -> SecurityBrokers Get real-time brokers Get real-time brokers of the subscribed symbols, it always returns the data in the local storage. Parameters: Name Type Description Default symbol str Security code required Returns: Type Description SecurityBrokers Security brokers Examples: :: from time import sleep from longbridge.openapi import QuoteContext, Config, SubType config = Config.from_env() ctx = QuoteContext(config) ctx.subscribe([\"700.HK\", \"AAPL.US\"], [ SubType.Brokers], is_first_push = True) sleep(5) resp = ctx.realtime_brokers(\"700.HK\") print(resp)","title":"realtime_brokers()"},{"location":"reference_all/#longbridge.openapi.QuoteContext.realtime_trades","text":"realtime_trades(symbol: str, count: int) -> List[Trade] Get real-time trades Get real-time trades of the subscribed symbols, it always returns the data in the local storage. Parameters: Name Type Description Default symbol str Security code required count int Count of trades required Returns: Type Description List [ Trade ] Security trades Examples: :: from time import sleep from longbridge.openapi import QuoteContext, Config, SubType config = Config.from_env() ctx = QuoteContext(config) ctx.subscribe([\"700.HK\", \"AAPL.US\"], [ SubType.Trade], is_first_push = False) sleep(5) resp = ctx.realtime_trades(\"700.HK\", 10) print(resp)","title":"realtime_trades()"},{"location":"reference_all/#longbridge.openapi.QuoteContext.realtime_candlesticks","text":"realtime_candlesticks(symbol: str, period: Type[Period], count: int) -> List[Candlestick] Get real-time candlesticks Get Get real-time candlesticks of the subscribed symbols, it always returns the data in the local storage. Parameters: Name Type Description Default symbol str Security code required period Type [ Period ] Period type required count int Count of candlesticks required Returns: Type Description List [ Candlestick ] Security candlesticks Examples: :: from time import sleep from longbridge.openapi import QuoteContext, Config, Period config = Config.from_env() ctx = QuoteContext(config) ctx.subscribe_candlesticks(\"AAPL.US\", Period.Min_1) sleep(5) resp = ctx.realtime_candlesticks(\"AAPL.US\", Period.Min_1, 10) print(resp)","title":"realtime_candlesticks()"},{"location":"reference_all/#longbridge.openapi.OrderSide","text":"Order side","title":"OrderSide"},{"location":"reference_all/#longbridge.openapi.OrderSide.Unknown","text":"Bases: OrderSide Unknown","title":"Unknown"},{"location":"reference_all/#longbridge.openapi.OrderSide.Buy","text":"Bases: OrderSide Buy","title":"Buy"},{"location":"reference_all/#longbridge.openapi.OrderSide.Sell","text":"Bases: OrderSide Sell","title":"Sell"},{"location":"reference_all/#longbridge.openapi.OrderType","text":"Order type","title":"OrderType"},{"location":"reference_all/#longbridge.openapi.OrderType.Unknown","text":"Bases: OrderType Unknown","title":"Unknown"},{"location":"reference_all/#longbridge.openapi.OrderType.LO","text":"Bases: OrderType Limit Order","title":"LO"},{"location":"reference_all/#longbridge.openapi.OrderType.ELO","text":"Bases: OrderType Enhanced Limit Order","title":"ELO"},{"location":"reference_all/#longbridge.openapi.OrderType.MO","text":"Bases: OrderType Market Order","title":"MO"},{"location":"reference_all/#longbridge.openapi.OrderType.AO","text":"Bases: OrderType At-auction Order","title":"AO"},{"location":"reference_all/#longbridge.openapi.OrderType.ALO","text":"Bases: OrderType At-auction Limit Order","title":"ALO"},{"location":"reference_all/#longbridge.openapi.OrderType.ODD","text":"Bases: OrderType Odd Lots","title":"ODD"},{"location":"reference_all/#longbridge.openapi.OrderType.LIT","text":"Bases: OrderType Limit If Touched","title":"LIT"},{"location":"reference_all/#longbridge.openapi.OrderType.MIT","text":"Bases: OrderType Market If Touched","title":"MIT"},{"location":"reference_all/#longbridge.openapi.OrderType.TSLPAMT","text":"Bases: OrderType Trailing Limit If Touched (Trailing Amount)","title":"TSLPAMT"},{"location":"reference_all/#longbridge.openapi.OrderType.TSLPPCT","text":"Bases: OrderType Trailing Limit If Touched (Trailing Percent)","title":"TSLPPCT"},{"location":"reference_all/#longbridge.openapi.OrderType.TSMAMT","text":"Bases: OrderType Trailing Market If Touched (Trailing Amount)","title":"TSMAMT"},{"location":"reference_all/#longbridge.openapi.OrderType.TSMPCT","text":"Bases: OrderType Trailing Market If Touched (Trailing Percent)","title":"TSMPCT"},{"location":"reference_all/#longbridge.openapi.OrderType.SLO","text":"Bases: OrderType Special Limit Order","title":"SLO"},{"location":"reference_all/#longbridge.openapi.OrderStatus","text":"Order status","title":"OrderStatus"},{"location":"reference_all/#longbridge.openapi.OrderStatus.Unknown","text":"Bases: OrderStatus Unknown","title":"Unknown"},{"location":"reference_all/#longbridge.openapi.OrderStatus.NotReported","text":"Bases: OrderStatus Not reported","title":"NotReported"},{"location":"reference_all/#longbridge.openapi.OrderStatus.ReplacedNotReported","text":"Bases: OrderStatus Not reported (Replaced Order)","title":"ReplacedNotReported"},{"location":"reference_all/#longbridge.openapi.OrderStatus.ProtectedNotReported","text":"Bases: OrderStatus Not reported (Protected Order)","title":"ProtectedNotReported"},{"location":"reference_all/#longbridge.openapi.OrderStatus.VarietiesNotReported","text":"Bases: OrderStatus Not reported (Conditional Order)","title":"VarietiesNotReported"},{"location":"reference_all/#longbridge.openapi.OrderStatus.Filled","text":"Bases: OrderStatus Filled","title":"Filled"},{"location":"reference_all/#longbridge.openapi.OrderStatus.WaitToNew","text":"Bases: OrderStatus Wait To New","title":"WaitToNew"},{"location":"reference_all/#longbridge.openapi.OrderStatus.New","text":"Bases: OrderStatus New","title":"New"},{"location":"reference_all/#longbridge.openapi.OrderStatus.WaitToReplace","text":"Bases: OrderStatus Wait To Replace","title":"WaitToReplace"},{"location":"reference_all/#longbridge.openapi.OrderStatus.PendingReplace","text":"Bases: OrderStatus Pending Replace","title":"PendingReplace"},{"location":"reference_all/#longbridge.openapi.OrderStatus.Replaced","text":"Bases: OrderStatus Replaced","title":"Replaced"},{"location":"reference_all/#longbridge.openapi.OrderStatus.PartialFilled","text":"Bases: OrderStatus Partial Filled","title":"PartialFilled"},{"location":"reference_all/#longbridge.openapi.OrderStatus.WaitToCancel","text":"Bases: OrderStatus Wait To Cancel","title":"WaitToCancel"},{"location":"reference_all/#longbridge.openapi.OrderStatus.PendingCancel","text":"Bases: OrderStatus Pending Cancel","title":"PendingCancel"},{"location":"reference_all/#longbridge.openapi.OrderStatus.Rejected","text":"Bases: OrderStatus Rejected","title":"Rejected"},{"location":"reference_all/#longbridge.openapi.OrderStatus.Canceled","text":"Bases: OrderStatus Canceled","title":"Canceled"},{"location":"reference_all/#longbridge.openapi.OrderStatus.Expired","text":"Bases: OrderStatus ExpiredStatus","title":"Expired"},{"location":"reference_all/#longbridge.openapi.OrderStatus.PartialWithdrawal","text":"Bases: OrderStatus PartialWithdrawal","title":"PartialWithdrawal"},{"location":"reference_all/#longbridge.openapi.OrderTag","text":"Order tag","title":"OrderTag"},{"location":"reference_all/#longbridge.openapi.OrderTag.Unknown","text":"Bases: OrderTag Unknown","title":"Unknown"},{"location":"reference_all/#longbridge.openapi.OrderTag.Normal","text":"Bases: OrderTag Normal Order","title":"Normal"},{"location":"reference_all/#longbridge.openapi.OrderTag.LongTerm","text":"Bases: OrderTag Long term Order","title":"LongTerm"},{"location":"reference_all/#longbridge.openapi.OrderTag.Grey","text":"Bases: OrderTag Grey Order","title":"Grey"},{"location":"reference_all/#longbridge.openapi.OrderTag.MarginCall","text":"Bases: OrderTag Force Selling","title":"MarginCall"},{"location":"reference_all/#longbridge.openapi.OrderTag.Offline","text":"Bases: OrderTag OTC","title":"Offline"},{"location":"reference_all/#longbridge.openapi.OrderTag.Creditor","text":"Bases: OrderTag Option Exercise Long","title":"Creditor"},{"location":"reference_all/#longbridge.openapi.OrderTag.Debtor","text":"Bases: OrderTag Option Exercise Short","title":"Debtor"},{"location":"reference_all/#longbridge.openapi.OrderTag.NonExercise","text":"Bases: OrderTag Wavier Of Option Exercise","title":"NonExercise"},{"location":"reference_all/#longbridge.openapi.OrderTag.AllocatedSub","text":"Bases: OrderTag Trade Allocation","title":"AllocatedSub"},{"location":"reference_all/#longbridge.openapi.TriggerStatus","text":"Trigger status","title":"TriggerStatus"},{"location":"reference_all/#longbridge.openapi.TriggerStatus.Unknown","text":"Bases: TriggerStatus Unknown","title":"Unknown"},{"location":"reference_all/#longbridge.openapi.TriggerStatus.Deactive","text":"Bases: TriggerStatus Deactive","title":"Deactive"},{"location":"reference_all/#longbridge.openapi.TriggerStatus.Active","text":"Bases: TriggerStatus Active","title":"Active"},{"location":"reference_all/#longbridge.openapi.TriggerStatus.Released","text":"Bases: TriggerStatus Released","title":"Released"},{"location":"reference_all/#longbridge.openapi.Execution","text":"Execution","title":"Execution"},{"location":"reference_all/#longbridge.openapi.Execution.order_id","text":"order_id: str Order ID","title":"order_id"},{"location":"reference_all/#longbridge.openapi.Execution.trade_id","text":"trade_id: str Execution ID","title":"trade_id"},{"location":"reference_all/#longbridge.openapi.Execution.symbol","text":"symbol: str Security code","title":"symbol"},{"location":"reference_all/#longbridge.openapi.Execution.trade_done_at","text":"trade_done_at: datetime Trade done time","title":"trade_done_at"},{"location":"reference_all/#longbridge.openapi.Execution.quantity","text":"quantity: int Executed quantity","title":"quantity"},{"location":"reference_all/#longbridge.openapi.Execution.price","text":"price: Decimal Executed price","title":"price"},{"location":"reference_all/#longbridge.openapi.PushOrderChanged","text":"Order changed message","title":"PushOrderChanged"},{"location":"reference_all/#longbridge.openapi.PushOrderChanged.side","text":"side: Type[OrderSide] Order side","title":"side"},{"location":"reference_all/#longbridge.openapi.PushOrderChanged.stock_name","text":"stock_name: str Stock name","title":"stock_name"},{"location":"reference_all/#longbridge.openapi.PushOrderChanged.submitted_quantity","text":"submitted_quantity: int Submitted quantity","title":"submitted_quantity"},{"location":"reference_all/#longbridge.openapi.PushOrderChanged.symbol","text":"symbol: str Order symbol","title":"symbol"},{"location":"reference_all/#longbridge.openapi.PushOrderChanged.order_type","text":"order_type: Type[OrderType] Order type","title":"order_type"},{"location":"reference_all/#longbridge.openapi.PushOrderChanged.submitted_price","text":"submitted_price: Decimal Submitted price","title":"submitted_price"},{"location":"reference_all/#longbridge.openapi.PushOrderChanged.executed_quantity","text":"executed_quantity: int Executed quantity","title":"executed_quantity"},{"location":"reference_all/#longbridge.openapi.PushOrderChanged.executed_price","text":"executed_price: Optional[Decimal] Executed price","title":"executed_price"},{"location":"reference_all/#longbridge.openapi.PushOrderChanged.order_id","text":"order_id: str Order ID","title":"order_id"},{"location":"reference_all/#longbridge.openapi.PushOrderChanged.currency","text":"currency: str Currency","title":"currency"},{"location":"reference_all/#longbridge.openapi.PushOrderChanged.status","text":"status: Type[OrderStatus] Order status","title":"status"},{"location":"reference_all/#longbridge.openapi.PushOrderChanged.submitted_at","text":"submitted_at: datetime Submitted time","title":"submitted_at"},{"location":"reference_all/#longbridge.openapi.PushOrderChanged.updated_at","text":"updated_at: datetime Last updated time","title":"updated_at"},{"location":"reference_all/#longbridge.openapi.PushOrderChanged.trigger_price","text":"trigger_price: Optional[Decimal] Order trigger price","title":"trigger_price"},{"location":"reference_all/#longbridge.openapi.PushOrderChanged.msg","text":"msg: str Rejected message or remark","title":"msg"},{"location":"reference_all/#longbridge.openapi.PushOrderChanged.tag","text":"tag: Type[OrderTag] Order tag","title":"tag"},{"location":"reference_all/#longbridge.openapi.PushOrderChanged.trigger_status","text":"trigger_status: Optional[Type[TriggerStatus]] Conditional order trigger status","title":"trigger_status"},{"location":"reference_all/#longbridge.openapi.PushOrderChanged.trigger_at","text":"trigger_at: Optional[datetime] Conditional order trigger time","title":"trigger_at"},{"location":"reference_all/#longbridge.openapi.PushOrderChanged.trailing_amount","text":"trailing_amount: Optional[Decimal] Trailing amount","title":"trailing_amount"},{"location":"reference_all/#longbridge.openapi.PushOrderChanged.trailing_percent","text":"trailing_percent: Optional[Decimal] Trailing percent","title":"trailing_percent"},{"location":"reference_all/#longbridge.openapi.PushOrderChanged.limit_offset","text":"limit_offset: Optional[Decimal] Limit offset amount","title":"limit_offset"},{"location":"reference_all/#longbridge.openapi.PushOrderChanged.account_no","text":"account_no: str Account no","title":"account_no"},{"location":"reference_all/#longbridge.openapi.PushOrderChanged.last_share","text":"last_share: Optional[Decimal] Last share","title":"last_share"},{"location":"reference_all/#longbridge.openapi.PushOrderChanged.last_price","text":"last_price: Optional[Decimal] Last price","title":"last_price"},{"location":"reference_all/#longbridge.openapi.TimeInForceType","text":"Time in force type","title":"TimeInForceType"},{"location":"reference_all/#longbridge.openapi.TimeInForceType.Unknown","text":"Bases: TimeInForceType Unknown","title":"Unknown"},{"location":"reference_all/#longbridge.openapi.TimeInForceType.Day","text":"Bases: TimeInForceType Day Order","title":"Day"},{"location":"reference_all/#longbridge.openapi.TimeInForceType.GoodTilCanceled","text":"Bases: TimeInForceType Good Til Canceled Order","title":"GoodTilCanceled"},{"location":"reference_all/#longbridge.openapi.TimeInForceType.GoodTilDate","text":"Bases: TimeInForceType Good Til Date Order","title":"GoodTilDate"},{"location":"reference_all/#longbridge.openapi.OutsideRTH","text":"Enable or disable outside regular trading hours","title":"OutsideRTH"},{"location":"reference_all/#longbridge.openapi.OutsideRTH.Unknown","text":"Bases: OutsideRTH Unknown","title":"Unknown"},{"location":"reference_all/#longbridge.openapi.OutsideRTH.RTHOnly","text":"Bases: OutsideRTH Regular trading hour only","title":"RTHOnly"},{"location":"reference_all/#longbridge.openapi.OutsideRTH.AnyTime","text":"Bases: OutsideRTH Any time","title":"AnyTime"},{"location":"reference_all/#longbridge.openapi.Order","text":"Order","title":"Order"},{"location":"reference_all/#longbridge.openapi.Order.order_id","text":"order_id: str Order ID","title":"order_id"},{"location":"reference_all/#longbridge.openapi.Order.status","text":"status: Type[OrderStatus] Order status","title":"status"},{"location":"reference_all/#longbridge.openapi.Order.stock_name","text":"stock_name: str Stock name","title":"stock_name"},{"location":"reference_all/#longbridge.openapi.Order.quantity","text":"quantity: int Submitted quantity","title":"quantity"},{"location":"reference_all/#longbridge.openapi.Order.executed_quantity","text":"executed_quantity: int Executed quantity","title":"executed_quantity"},{"location":"reference_all/#longbridge.openapi.Order.price","text":"price: Optional[Decimal] Submitted price","title":"price"},{"location":"reference_all/#longbridge.openapi.Order.executed_price","text":"executed_price: Optional[Decimal] Executed price","title":"executed_price"},{"location":"reference_all/#longbridge.openapi.Order.submitted_at","text":"submitted_at: datetime Submitted time","title":"submitted_at"},{"location":"reference_all/#longbridge.openapi.Order.side","text":"side: Type[OrderSide] Order side","title":"side"},{"location":"reference_all/#longbridge.openapi.Order.symbol","text":"symbol: str Security code","title":"symbol"},{"location":"reference_all/#longbridge.openapi.Order.order_type","text":"order_type: Type[OrderType] Order type","title":"order_type"},{"location":"reference_all/#longbridge.openapi.Order.last_done","text":"last_done: Optional[Decimal] Last done","title":"last_done"},{"location":"reference_all/#longbridge.openapi.Order.trigger_price","text":"trigger_price: Optional[Decimal] LIT / MIT Order Trigger Price","title":"trigger_price"},{"location":"reference_all/#longbridge.openapi.Order.msg","text":"msg: str Rejected Message or remark","title":"msg"},{"location":"reference_all/#longbridge.openapi.Order.tag","text":"tag: Type[OrderTag] Order tag","title":"tag"},{"location":"reference_all/#longbridge.openapi.Order.time_in_force","text":"time_in_force: Type[TimeInForceType] Time in force type","title":"time_in_force"},{"location":"reference_all/#longbridge.openapi.Order.expire_date","text":"expire_date: Optional[date] Long term order expire date","title":"expire_date"},{"location":"reference_all/#longbridge.openapi.Order.updated_at","text":"updated_at: Optional[datetime] Last updated time","title":"updated_at"},{"location":"reference_all/#longbridge.openapi.Order.trigger_at","text":"trigger_at: Optional[datetime] Conditional order trigger time","title":"trigger_at"},{"location":"reference_all/#longbridge.openapi.Order.trailing_amount","text":"trailing_amount: Optional[Decimal] TSMAMT / TSLPAMT order trailing amount","title":"trailing_amount"},{"location":"reference_all/#longbridge.openapi.Order.trailing_percent","text":"trailing_percent: Optional[Decimal] TSMPCT / TSLPPCT order trailing percent","title":"trailing_percent"},{"location":"reference_all/#longbridge.openapi.Order.limit_offset","text":"limit_offset: Optional[Decimal] TSLPAMT / TSLPPCT order limit offset amount","title":"limit_offset"},{"location":"reference_all/#longbridge.openapi.Order.trigger_status","text":"trigger_status: Optional[Type[TriggerStatus]] Conditional order trigger status","title":"trigger_status"},{"location":"reference_all/#longbridge.openapi.Order.currency","text":"currency: str Currency","title":"currency"},{"location":"reference_all/#longbridge.openapi.Order.outside_rth","text":"outside_rth: Optional[Type[OutsideRTH]] Enable or disable outside regular trading hours","title":"outside_rth"},{"location":"reference_all/#longbridge.openapi.Order.remark","text":"remark: str Remark","title":"remark"},{"location":"reference_all/#longbridge.openapi.CommissionFreeStatus","text":"Commission-free Status","title":"CommissionFreeStatus"},{"location":"reference_all/#longbridge.openapi.CommissionFreeStatus.Unknown","text":"Bases: CommissionFreeStatus Unknown","title":"Unknown"},{"location":"reference_all/#longbridge.openapi.CommissionFreeStatus.None_","text":"Bases: CommissionFreeStatus None","title":"None_"},{"location":"reference_all/#longbridge.openapi.CommissionFreeStatus.Calculated","text":"Bases: CommissionFreeStatus Commission-free amount to be calculated","title":"Calculated"},{"location":"reference_all/#longbridge.openapi.CommissionFreeStatus.Pending","text":"Bases: CommissionFreeStatus Pending commission-free","title":"Pending"},{"location":"reference_all/#longbridge.openapi.CommissionFreeStatus.Ready","text":"Bases: CommissionFreeStatus Commission-free applied","title":"Ready"},{"location":"reference_all/#longbridge.openapi.DeductionStatus","text":"Deduction status","title":"DeductionStatus"},{"location":"reference_all/#longbridge.openapi.DeductionStatus.Unknown","text":"Bases: DeductionStatus Unknown","title":"Unknown"},{"location":"reference_all/#longbridge.openapi.DeductionStatus.None_","text":"Bases: DeductionStatus None","title":"None_"},{"location":"reference_all/#longbridge.openapi.DeductionStatus.NoData","text":"Bases: DeductionStatus Settled with no data","title":"NoData"},{"location":"reference_all/#longbridge.openapi.DeductionStatus.Pending","text":"Bases: DeductionStatus Settled and pending distribution","title":"Pending"},{"location":"reference_all/#longbridge.openapi.DeductionStatus.Done","text":"Bases: DeductionStatus Settled and distributed","title":"Done"},{"location":"reference_all/#longbridge.openapi.ChargeCategoryCode","text":"Charge category code","title":"ChargeCategoryCode"},{"location":"reference_all/#longbridge.openapi.ChargeCategoryCode.Unknown","text":"Bases: ChargeCategoryCode Unknown","title":"Unknown"},{"location":"reference_all/#longbridge.openapi.ChargeCategoryCode.Broker","text":"Bases: ChargeCategoryCode Broker","title":"Broker"},{"location":"reference_all/#longbridge.openapi.ChargeCategoryCode.Third","text":"Bases: ChargeCategoryCode Third","title":"Third"},{"location":"reference_all/#longbridge.openapi.OrderHistoryDetail","text":"Order history detail","title":"OrderHistoryDetail"},{"location":"reference_all/#longbridge.openapi.OrderHistoryDetail.price","text":"price: Decimal Executed price for executed orders, submitted price for expired, canceled, rejected orders, etc.","title":"price"},{"location":"reference_all/#longbridge.openapi.OrderHistoryDetail.quantity","text":"quantity: int Executed quantity for executed orders, remaining quantity for expired, canceled, rejected orders, etc.","title":"quantity"},{"location":"reference_all/#longbridge.openapi.OrderHistoryDetail.status","text":"status: Type[OrderStatus] Order status","title":"status"},{"location":"reference_all/#longbridge.openapi.OrderHistoryDetail.msg","text":"msg: str Execution or error message","title":"msg"},{"location":"reference_all/#longbridge.openapi.OrderHistoryDetail.time","text":"time: datetime Occurrence time","title":"time"},{"location":"reference_all/#longbridge.openapi.OrderChargeFee","text":"Order charge fee","title":"OrderChargeFee"},{"location":"reference_all/#longbridge.openapi.OrderChargeFee.code","text":"code: str Charge code","title":"code"},{"location":"reference_all/#longbridge.openapi.OrderChargeFee.name","text":"name: str Charge name","title":"name"},{"location":"reference_all/#longbridge.openapi.OrderChargeFee.amount","text":"amount: Decimal Charge amount","title":"amount"},{"location":"reference_all/#longbridge.openapi.OrderChargeFee.currency","text":"currency: str Charge currency","title":"currency"},{"location":"reference_all/#longbridge.openapi.OrderChargeItem","text":"Order charge item","title":"OrderChargeItem"},{"location":"reference_all/#longbridge.openapi.OrderChargeItem.code","text":"code: Type[ChargeCategoryCode] Charge category code","title":"code"},{"location":"reference_all/#longbridge.openapi.OrderChargeItem.name","text":"name: str Charge category name","title":"name"},{"location":"reference_all/#longbridge.openapi.OrderChargeItem.fees","text":"fees: List[OrderChargeFee] Charge details","title":"fees"},{"location":"reference_all/#longbridge.openapi.OrderChargeDetail","text":"Order charge detail","title":"OrderChargeDetail"},{"location":"reference_all/#longbridge.openapi.OrderChargeDetail.total_amount","text":"total_amount: Decimal Total charges amount","title":"total_amount"},{"location":"reference_all/#longbridge.openapi.OrderChargeDetail.currency","text":"currency: str Settlement currency","title":"currency"},{"location":"reference_all/#longbridge.openapi.OrderChargeDetail.items","text":"items: List[OrderChargeItem] Order charge items","title":"items"},{"location":"reference_all/#longbridge.openapi.OrderDetail","text":"Order detail","title":"OrderDetail"},{"location":"reference_all/#longbridge.openapi.OrderDetail.order_id","text":"order_id: str Order ID","title":"order_id"},{"location":"reference_all/#longbridge.openapi.OrderDetail.status","text":"status: Type[OrderStatus] Order status","title":"status"},{"location":"reference_all/#longbridge.openapi.OrderDetail.stock_name","text":"stock_name: str Stock name","title":"stock_name"},{"location":"reference_all/#longbridge.openapi.OrderDetail.quantity","text":"quantity: int Submitted quantity","title":"quantity"},{"location":"reference_all/#longbridge.openapi.OrderDetail.executed_quantity","text":"executed_quantity: int Executed quantity","title":"executed_quantity"},{"location":"reference_all/#longbridge.openapi.OrderDetail.price","text":"price: Optional[Decimal] Submitted price","title":"price"},{"location":"reference_all/#longbridge.openapi.OrderDetail.executed_price","text":"executed_price: Optional[Decimal] Executed price","title":"executed_price"},{"location":"reference_all/#longbridge.openapi.OrderDetail.submitted_at","text":"submitted_at: datetime Submitted time","title":"submitted_at"},{"location":"reference_all/#longbridge.openapi.OrderDetail.side","text":"side: Type[OrderSide] Order side","title":"side"},{"location":"reference_all/#longbridge.openapi.OrderDetail.symbol","text":"symbol: str Security code","title":"symbol"},{"location":"reference_all/#longbridge.openapi.OrderDetail.order_type","text":"order_type: Type[OrderType] Order type","title":"order_type"},{"location":"reference_all/#longbridge.openapi.OrderDetail.last_done","text":"last_done: Optional[Decimal] Last done","title":"last_done"},{"location":"reference_all/#longbridge.openapi.OrderDetail.trigger_price","text":"trigger_price: Optional[Decimal] LIT / MIT Order Trigger Price","title":"trigger_price"},{"location":"reference_all/#longbridge.openapi.OrderDetail.msg","text":"msg: str Rejected Message or remark","title":"msg"},{"location":"reference_all/#longbridge.openapi.OrderDetail.tag","text":"tag: Type[OrderTag] Order tag","title":"tag"},{"location":"reference_all/#longbridge.openapi.OrderDetail.time_in_force","text":"time_in_force: Type[TimeInForceType] Time in force type","title":"time_in_force"},{"location":"reference_all/#longbridge.openapi.OrderDetail.expire_date","text":"expire_date: Optional[date] Long term order expire date","title":"expire_date"},{"location":"reference_all/#longbridge.openapi.OrderDetail.updated_at","text":"updated_at: Optional[datetime] Last updated time","title":"updated_at"},{"location":"reference_all/#longbridge.openapi.OrderDetail.trigger_at","text":"trigger_at: Optional[datetime] Conditional order trigger time","title":"trigger_at"},{"location":"reference_all/#longbridge.openapi.OrderDetail.trailing_amount","text":"trailing_amount: Optional[Decimal] TSMAMT / TSLPAMT order trailing amount","title":"trailing_amount"},{"location":"reference_all/#longbridge.openapi.OrderDetail.trailing_percent","text":"trailing_percent: Optional[Decimal] TSMPCT / TSLPPCT order trailing percent","title":"trailing_percent"},{"location":"reference_all/#longbridge.openapi.OrderDetail.limit_offset","text":"limit_offset: Optional[Decimal] TSLPAMT / TSLPPCT order limit offset amount","title":"limit_offset"},{"location":"reference_all/#longbridge.openapi.OrderDetail.trigger_status","text":"trigger_status: Optional[Type[TriggerStatus]] Conditional order trigger status","title":"trigger_status"},{"location":"reference_all/#longbridge.openapi.OrderDetail.currency","text":"currency: str Currency","title":"currency"},{"location":"reference_all/#longbridge.openapi.OrderDetail.outside_rth","text":"outside_rth: Optional[Type[OutsideRTH]] Enable or disable outside regular trading hours","title":"outside_rth"},{"location":"reference_all/#longbridge.openapi.OrderDetail.remark","text":"remark: str Remark","title":"remark"},{"location":"reference_all/#longbridge.openapi.OrderDetail.free_status","text":"free_status: Type[CommissionFreeStatus] Commission-free Status","title":"free_status"},{"location":"reference_all/#longbridge.openapi.OrderDetail.free_amount","text":"free_amount: Optional[Decimal] Commission-free amount","title":"free_amount"},{"location":"reference_all/#longbridge.openapi.OrderDetail.free_currency","text":"free_currency: Optional[str] Commission-free currency","title":"free_currency"},{"location":"reference_all/#longbridge.openapi.OrderDetail.deductions_status","text":"deductions_status: Type[DeductionStatus] Deduction status","title":"deductions_status"},{"location":"reference_all/#longbridge.openapi.OrderDetail.deductions_amount","text":"deductions_amount: Optional[Decimal] Deduction amount","title":"deductions_amount"},{"location":"reference_all/#longbridge.openapi.OrderDetail.deductions_currency","text":"deductions_currency: Optional[str] Deduction currency","title":"deductions_currency"},{"location":"reference_all/#longbridge.openapi.OrderDetail.platform_deducted_status","text":"platform_deducted_status: Type[DeductionStatus] Platform fee deduction status","title":"platform_deducted_status"},{"location":"reference_all/#longbridge.openapi.OrderDetail.platform_deducted_amount","text":"platform_deducted_amount: Optional[Decimal] Platform deduction amount","title":"platform_deducted_amount"},{"location":"reference_all/#longbridge.openapi.OrderDetail.platform_deducted_currency","text":"platform_deducted_currency: Optional[str] Platform deduction currency","title":"platform_deducted_currency"},{"location":"reference_all/#longbridge.openapi.OrderDetail.history","text":"history: List[OrderHistoryDetail] Order history details","title":"history"},{"location":"reference_all/#longbridge.openapi.OrderDetail.charge_detail","text":"charge_detail: OrderChargeDetail Order charges","title":"charge_detail"},{"location":"reference_all/#longbridge.openapi.SubmitOrderResponse","text":"Response for submit order request","title":"SubmitOrderResponse"},{"location":"reference_all/#longbridge.openapi.SubmitOrderResponse.order_id","text":"order_id: str Order id","title":"order_id"},{"location":"reference_all/#longbridge.openapi.CashInfo","text":"CashInfo","title":"CashInfo"},{"location":"reference_all/#longbridge.openapi.CashInfo.withdraw_cash","text":"withdraw_cash: Decimal Withdraw cash","title":"withdraw_cash"},{"location":"reference_all/#longbridge.openapi.CashInfo.available_cash","text":"available_cash: Decimal Available cash","title":"available_cash"},{"location":"reference_all/#longbridge.openapi.CashInfo.frozen_cash","text":"frozen_cash: Decimal Frozen cash","title":"frozen_cash"},{"location":"reference_all/#longbridge.openapi.CashInfo.settling_cash","text":"settling_cash: Decimal Cash to be settled","title":"settling_cash"},{"location":"reference_all/#longbridge.openapi.CashInfo.currency","text":"currency: str Currency","title":"currency"},{"location":"reference_all/#longbridge.openapi.AccountBalance","text":"Account balance","title":"AccountBalance"},{"location":"reference_all/#longbridge.openapi.AccountBalance.total_cash","text":"total_cash: Decimal Total cash","title":"total_cash"},{"location":"reference_all/#longbridge.openapi.AccountBalance.max_finance_amount","text":"max_finance_amount: Decimal Maximum financing amount","title":"max_finance_amount"},{"location":"reference_all/#longbridge.openapi.AccountBalance.remaining_finance_amount","text":"remaining_finance_amount: Decimal Remaining financing amount","title":"remaining_finance_amount"},{"location":"reference_all/#longbridge.openapi.AccountBalance.risk_level","text":"risk_level: int Risk control level","title":"risk_level"},{"location":"reference_all/#longbridge.openapi.AccountBalance.margin_call","text":"margin_call: Decimal Margin call","title":"margin_call"},{"location":"reference_all/#longbridge.openapi.AccountBalance.currency","text":"currency: str Currency","title":"currency"},{"location":"reference_all/#longbridge.openapi.AccountBalance.cash_infos","text":"cash_infos: List[CashInfo] Cash details","title":"cash_infos"},{"location":"reference_all/#longbridge.openapi.AccountBalance.net_assets","text":"net_assets: Decimal Net assets","title":"net_assets"},{"location":"reference_all/#longbridge.openapi.AccountBalance.init_margin","text":"init_margin: Decimal Initial margin","title":"init_margin"},{"location":"reference_all/#longbridge.openapi.AccountBalance.maintenance_margin","text":"maintenance_margin: Decimal Maintenance margin","title":"maintenance_margin"},{"location":"reference_all/#longbridge.openapi.BalanceType","text":"","title":"BalanceType"},{"location":"reference_all/#longbridge.openapi.BalanceType.Unknown","text":"Bases: BalanceType","title":"Unknown"},{"location":"reference_all/#longbridge.openapi.BalanceType.Cash","text":"Bases: BalanceType","title":"Cash"},{"location":"reference_all/#longbridge.openapi.BalanceType.Stock","text":"Bases: BalanceType","title":"Stock"},{"location":"reference_all/#longbridge.openapi.BalanceType.Fund","text":"Bases: BalanceType","title":"Fund"},{"location":"reference_all/#longbridge.openapi.CashFlowDirection","text":"Cash flow direction","title":"CashFlowDirection"},{"location":"reference_all/#longbridge.openapi.CashFlowDirection.Unknown","text":"Bases: CashFlowDirection Unknown","title":"Unknown"},{"location":"reference_all/#longbridge.openapi.CashFlowDirection.Out","text":"Bases: CashFlowDirection Out","title":"Out"},{"location":"reference_all/#longbridge.openapi.CashFlowDirection.In","text":"Bases: CashFlowDirection In","title":"In"},{"location":"reference_all/#longbridge.openapi.CashFlow","text":"Cash flow","title":"CashFlow"},{"location":"reference_all/#longbridge.openapi.CashFlow.transaction_flow_name","text":"transaction_flow_name: str Cash flow name","title":"transaction_flow_name"},{"location":"reference_all/#longbridge.openapi.CashFlow.direction","text":"direction: Type[CashFlowDirection] Outflow direction","title":"direction"},{"location":"reference_all/#longbridge.openapi.CashFlow.business_type","text":"business_type: Type[BalanceType] Balance type","title":"business_type"},{"location":"reference_all/#longbridge.openapi.CashFlow.balance","text":"balance: Decimal Cash amount","title":"balance"},{"location":"reference_all/#longbridge.openapi.CashFlow.currency","text":"currency: str Cash currency","title":"currency"},{"location":"reference_all/#longbridge.openapi.CashFlow.business_time","text":"business_time: datetime Business time","title":"business_time"},{"location":"reference_all/#longbridge.openapi.CashFlow.symbol","text":"symbol: Optional[str] Associated Stock code information","title":"symbol"},{"location":"reference_all/#longbridge.openapi.CashFlow.description","text":"description: str Cash flow description","title":"description"},{"location":"reference_all/#longbridge.openapi.FundPosition","text":"Fund position","title":"FundPosition"},{"location":"reference_all/#longbridge.openapi.FundPosition.symbol","text":"symbol: str Fund ISIN code","title":"symbol"},{"location":"reference_all/#longbridge.openapi.FundPosition.current_net_asset_value","text":"current_net_asset_value: Decimal Current equity","title":"current_net_asset_value"},{"location":"reference_all/#longbridge.openapi.FundPosition.net_asset_value_day","text":"net_asset_value_day: datetime Current equity PyDecimal","title":"net_asset_value_day"},{"location":"reference_all/#longbridge.openapi.FundPosition.symbol_name","text":"symbol_name: str Fund name","title":"symbol_name"},{"location":"reference_all/#longbridge.openapi.FundPosition.currency","text":"currency: str Currency","title":"currency"},{"location":"reference_all/#longbridge.openapi.FundPosition.cost_net_asset_value","text":"cost_net_asset_value: Decimal Net cost","title":"cost_net_asset_value"},{"location":"reference_all/#longbridge.openapi.FundPosition.holding_units","text":"holding_units: Decimal Holding units","title":"holding_units"},{"location":"reference_all/#longbridge.openapi.FundPositionChannel","text":"Fund position channel","title":"FundPositionChannel"},{"location":"reference_all/#longbridge.openapi.FundPositionChannel.account_channel","text":"account_channel: str Account type","title":"account_channel"},{"location":"reference_all/#longbridge.openapi.FundPositionChannel.positions","text":"positions: List[FundPosition] Fund positions","title":"positions"},{"location":"reference_all/#longbridge.openapi.FundPositionsResponse","text":"Fund positions response","title":"FundPositionsResponse"},{"location":"reference_all/#longbridge.openapi.FundPositionsResponse.channels","text":"channels: List[FundPositionChannel] Channels","title":"channels"},{"location":"reference_all/#longbridge.openapi.StockPosition","text":"Stock position","title":"StockPosition"},{"location":"reference_all/#longbridge.openapi.StockPosition.symbol","text":"symbol: str Stock code","title":"symbol"},{"location":"reference_all/#longbridge.openapi.StockPosition.symbol_name","text":"symbol_name: str Stock name","title":"symbol_name"},{"location":"reference_all/#longbridge.openapi.StockPosition.quantity","text":"quantity: int The number of holdings","title":"quantity"},{"location":"reference_all/#longbridge.openapi.StockPosition.available_quantity","text":"available_quantity: int Available quantity","title":"available_quantity"},{"location":"reference_all/#longbridge.openapi.StockPosition.currency","text":"currency: str Currency","title":"currency"},{"location":"reference_all/#longbridge.openapi.StockPosition.cost_price","text":"cost_price: Decimal Cost Price(According to the client's choice of average purchase or diluted cost)","title":"cost_price"},{"location":"reference_all/#longbridge.openapi.StockPosition.market","text":"market: Market Market","title":"market"},{"location":"reference_all/#longbridge.openapi.StockPositionChannel","text":"Stock position channel","title":"StockPositionChannel"},{"location":"reference_all/#longbridge.openapi.StockPositionChannel.account_channel","text":"account_channel: str Account type","title":"account_channel"},{"location":"reference_all/#longbridge.openapi.StockPositionChannel.positions","text":"positions: List[StockPosition] Stock positions","title":"positions"},{"location":"reference_all/#longbridge.openapi.StockPositionsResponse","text":"Stock positions response","title":"StockPositionsResponse"},{"location":"reference_all/#longbridge.openapi.StockPositionsResponse.channels","text":"channels: List[StockPositionChannel] Channels","title":"channels"},{"location":"reference_all/#longbridge.openapi.TopicType","text":"Topic type","title":"TopicType"},{"location":"reference_all/#longbridge.openapi.TopicType.Private","text":"Bases: TopicType Private notification for trade","title":"Private"},{"location":"reference_all/#longbridge.openapi.MarginRatio","text":"Margin ratio","title":"MarginRatio"},{"location":"reference_all/#longbridge.openapi.MarginRatio.im_factor","text":"im_factor: Decimal Initial margin ratio","title":"im_factor"},{"location":"reference_all/#longbridge.openapi.MarginRatio.mm_factor","text":"mm_factor: Decimal Maintain the initial margin ratio","title":"mm_factor"},{"location":"reference_all/#longbridge.openapi.MarginRatio.fm_factor","text":"fm_factor: Decimal Forced close-out margin ratio","title":"fm_factor"},{"location":"reference_all/#longbridge.openapi.EstimateMaxPurchaseQuantityResponse","text":"Response for estimate maximum purchase quantity","title":"EstimateMaxPurchaseQuantityResponse"},{"location":"reference_all/#longbridge.openapi.EstimateMaxPurchaseQuantityResponse.cash_max_qty","text":"cash_max_qty: int Cash available quantity","title":"cash_max_qty"},{"location":"reference_all/#longbridge.openapi.EstimateMaxPurchaseQuantityResponse.margin_max_qty","text":"margin_max_qty: int Margin available quantity","title":"margin_max_qty"},{"location":"reference_all/#longbridge.openapi.TradeContext","text":"Trade context Parameters: Name Type Description Default config Config Configuration object required","title":"TradeContext"},{"location":"reference_all/#longbridge.openapi.TradeContext.__init__","text":"__init__(config: Config) -> None","title":"__init__()"},{"location":"reference_all/#longbridge.openapi.TradeContext.set_on_order_changed","text":"set_on_order_changed(callback: Callable[[PushOrderChanged], None]) -> None Set order changed callback, after receiving the order changed event, it will call back to this function.","title":"set_on_order_changed()"},{"location":"reference_all/#longbridge.openapi.TradeContext.subscribe","text":"subscribe(topics: List[Type[TopicType]]) -> None Subscribe Parameters: Name Type Description Default topics List [ Type [ TopicType ]] Topic list required Examples: :: from time import sleep from decimal import Decimal from longbridge.openapi import TradeContext, Config, OrderSide, OrderType, TimeInForceType, PushOrderChanged, TopicType def on_order_changed(event: PushOrderChanged): print(event) config = Config.from_env() ctx = TradeContext(config) ctx.set_on_order_changed(on_order_changed) ctx.subscribe([TopicType.Private]) resp = ctx.submit_order( side=OrderSide.Buy, symbol=\"700.HK\", order_type=OrderType.LO, submitted_price=Decimal(\"50\"), submitted_quantity=200, time_in_force=TimeInForceType.Day, remark=\"Hello from Python SDK\", ) print(resp) sleep(5) # waiting for push event","title":"subscribe()"},{"location":"reference_all/#longbridge.openapi.TradeContext.unsubscribe","text":"unsubscribe(topics: List[str]) -> None Unsubscribe Parameters: Name Type Description Default topics List [ str ] Topic list required","title":"unsubscribe()"},{"location":"reference_all/#longbridge.openapi.TradeContext.history_executions","text":"history_executions(symbol: Optional[str] = None, start_at: Optional[date] = None, end_at: Optional[date] = None) -> List[Execution] Get history executions Parameters: Name Type Description Default symbol Optional [ str ] Filter by security code, example: 700.HK , AAPL.US None start_at Optional [ date ] Start time None end_at Optional [ date ] End time None Returns: Type Description List [ Execution ] Execution list Examples: :: from datetime import datetime from longbridge.openapi import TradeContext, Config config = Config.from_env() ctx = TradeContext(config) resp = ctx.history_executions( symbol = \"700.HK\", start_at = datetime(2022, 5, 9), end_at = datetime(2022, 5, 12), ) print(resp)","title":"history_executions()"},{"location":"reference_all/#longbridge.openapi.TradeContext.today_executions","text":"today_executions(symbol: Optional[str] = None, order_id: Optional[str] = None) -> List[Execution] Get today executions Parameters: Name Type Description Default symbol Optional [ str ] Filter by security code None order_id Optional [ str ] Filter by Order ID None Returns: Type Description List [ Execution ] Execution list Examples: :: from longbridge.openapi import TradeContext, Config config = Config.from_env() ctx = TradeContext(config) resp = ctx.today_executions(symbol = \"700.HK\") print(resp)","title":"today_executions()"},{"location":"reference_all/#longbridge.openapi.TradeContext.history_orders","text":"history_orders(symbol: Optional[str] = None, status: Optional[List[Type[OrderStatus]]] = None, side: Optional[Type[OrderSide]] = None, market: Optional[Type[Market]] = None, start_at: Optional[date] = None, end_at: Optional[date] = None) -> List[Order] Get history orders Parameters: Name Type Description Default symbol Optional [ str ] Filter by security code None status Optional [ List [ Type [ OrderStatus ]]] Filter by order status None side Optional [ Type [ OrderSide ]] Filter by order side None market Optional [ Type [ Market ]] Filter by market type None start_at Optional [ date ] Start time None end_at Optional [ date ] End time None Returns: Type Description List [ Order ] Order list Examples: :: from datetime import datetime from longbridge.openapi import TradeContext, Config, OrderStatus, OrderSide, Market config = Config.from_env() ctx = TradeContext(config) resp = ctx.history_orders( symbol = \"700.HK\", status = [OrderStatus.Filled, OrderStatus.New], side = OrderSide.Buy, market = Market.HK, start_at = datetime(2022, 5, 9), end_at = datetime(2022, 5, 12), ) print(resp)","title":"history_orders()"},{"location":"reference_all/#longbridge.openapi.TradeContext.today_orders","text":"today_orders(symbol: Optional[str] = None, status: Optional[List[Type[OrderStatus]]] = None, side: Optional[Type[OrderSide]] = None, market: Optional[Type[Market]] = None, order_id: Optional[str] = None) -> List[Order] Get today orders Parameters: Name Type Description Default symbol Optional [ str ] Filter by security code None status Optional [ List [ Type [ OrderStatus ]]] Filter by order status None side Optional [ Type [ OrderSide ]] Filter by order side None market Optional [ Type [ Market ]] Filter by market type None order_id Optional [ str ] Filter by order id None Returns: Type Description List [ Order ] Order list Examples: :: from longbridge.openapi import TradeContext, Config, OrderStatus, OrderSide, Market config = Config.from_env() ctx = TradeContext(config) resp = ctx.today_orders( symbol = \"700.HK\", status = [OrderStatus.Filled, OrderStatus.New], side = OrderSide.Buy, market = Market.HK, ) print(resp)","title":"today_orders()"},{"location":"reference_all/#longbridge.openapi.TradeContext.replace_order","text":"replace_order(order_id: str, quantity: int, price: Optional[Decimal] = None, trigger_price: Optional[Decimal] = None, limit_offset: Optional[Decimal] = None, trailing_amount: Optional[Decimal] = None, trailing_percent: Optional[Decimal] = None, remark: Optional[str] = None) -> None Replace order Parameters: Name Type Description Default quantity int Replaced quantity required price Optional [ Decimal ] Replaced price None trigger_price Optional [ Decimal ] Trigger price ( LIT / MIT Order Required) None limit_offset Optional [ Decimal ] Limit offset amount ( TSLPAMT / TSLPPCT Required) None trailing_amount Optional [ Decimal ] Trailing amount ( TSLPAMT / TSMAMT Required) None trailing_percent Optional [ Decimal ] Trailing percent ( TSLPPCT / TSMAPCT Required) None remark Optional [ str ] Remark (Maximum 64 characters) None Examples: :: from decimal import Decimal from longbridge.openapi import TradeContext, Config config = Config.from_env() ctx = TradeContext(config) ctx.replace_order( order_id = \"709043056541253632\", quantity = 100, price = Decimal(\"100\"), )","title":"replace_order()"},{"location":"reference_all/#longbridge.openapi.TradeContext.submit_order","text":"submit_order(symbol: str, order_type: Type[OrderType], side: Type[OrderSide], submitted_quantity: int, time_in_force: Type[TimeInForceType], submitted_price: Optional[Decimal] = None, trigger_price: Optional[Decimal] = None, limit_offset: Optional[Decimal] = None, trailing_amount: Optional[Decimal] = None, trailing_percent: Optional[Decimal] = None, expire_date: Optional[date] = None, outside_rth: Optional[Type[OutsideRTH]] = None, remark: Optional[str] = None) -> SubmitOrderResponse Submit order Parameters: Name Type Description Default symbol str Security code required order_type Type [ OrderType ] Order type required side Type [ OrderSide ] Order Side required submitted_quantity int Submitted quantity required time_in_force Type [ TimeInForceType ] Time in force type required submitted_price Optional [ Decimal ] Submitted price None trigger_price Optional [ Decimal ] Trigger price ( LIT / MIT Required) None limit_offset Optional [ Decimal ] Limit offset amount ( TSLPAMT / TSLPPCT Required) None trailing_amount Optional [ Decimal ] Trailing amount ( TSLPAMT / TSMAMT Required) None trailing_percent Optional [ Decimal ] Trailing percent ( TSLPPCT / TSMAPCT Required) None expire_date Optional [ date ] Long term order expire date (Required when time_in_force is GoodTilDate ) None outside_rth Optional [ Type [ OutsideRTH ]] Enable or disable outside regular trading hours None remark Optional [ str ] Remark (Maximum 64 characters) None Returns: Type Description SubmitOrderResponse Response Examples: :: from decimal import Decimal from longbridge.openapi import TradeContext, Config, OrderSide, OrderType, TimeInForceType config = Config.from_env() ctx = TradeContext(config) resp = ctx.submit_order( side = OrderSide.Buy, symbol = \"700.HK\", order_type = OrderType.LO, submitted_price = Decimal(\"50\"), submitted_quantity = 200, time_in_force = TimeInForceType.Day, remark = \"Hello from Python SDK\", ) print(resp)","title":"submit_order()"},{"location":"reference_all/#longbridge.openapi.TradeContext.cancel_order","text":"cancel_order(order_id: str) -> None Cancel order Parameters: Name Type Description Default order_id str Order ID required Examples: :: from longbridge.openapi import TradeContext, Config config = Config.from_env() ctx = TradeContext(config) ctx.cancel_order(\"709043056541253632\")","title":"cancel_order()"},{"location":"reference_all/#longbridge.openapi.TradeContext.account_balance","text":"account_balance() -> List[AccountBalance] Get account balance Returns: Type Description List [ AccountBalance ] Account list Examples: :: from longbridge.openapi import TradeContext, Config config = Config.from_env() ctx = TradeContext(config) resp = ctx.account_balance() print(resp)","title":"account_balance()"},{"location":"reference_all/#longbridge.openapi.TradeContext.cash_flow","text":"cash_flow(start_at: datetime, end_at: datetime, business_type: Optional[Type[BalanceType]] = None, symbol: Optional[str] = None, page: Optional[int] = None, size: Optional[int] = None) -> List[CashFlow] Get cash flow Parameters: Name Type Description Default start_at datetime Start time required end_at datetime End time required business_type Optional [ Type [ BalanceType ]] Balance type None symbol Optional [ str ] Target security code None page Optional [ int ] Start page (Default: 1) None size Optional [ int ] Page size (Default: 50) None Returns: Type Description List [ CashFlow ] Cash flow list Examples: :: from datetime import datetime from longbridge.openapi import TradeContext, Config config = Config.from_env() ctx = TradeContext(config) resp = ctx.cash_flow( start_at = datetime(2022, 5, 9), end_at = datetime(2022, 5, 12), ) print(resp)","title":"cash_flow()"},{"location":"reference_all/#longbridge.openapi.TradeContext.fund_positions","text":"fund_positions(symbols: Optional[List[str]] = None) -> FundPositionsResponse Get fund positions Parameters: Name Type Description Default symbols Optional [ List [ str ]] Filter by fund codes None Returns: Type Description FundPositionsResponse Fund positions Examples: :: from longbridge.openapi import TradeContext, Config config = Config.from_env() ctx = TradeContext(config) resp = ctx.fund_positions() print(resp)","title":"fund_positions()"},{"location":"reference_all/#longbridge.openapi.TradeContext.stock_positions","text":"stock_positions(symbols: Optional[List[str]] = None) -> StockPositionsResponse Get stock positions Parameters: Name Type Description Default symbols Optional [ List [ str ]] Filter by stock codes None Returns: Type Description StockPositionsResponse Stock positions Examples: :: from longbridge.openapi import TradeContext, Config config = Config.from_env() ctx = TradeContext(config) resp = ctx.stock_positions() print(resp)","title":"stock_positions()"},{"location":"reference_all/#longbridge.openapi.TradeContext.margin_ratio","text":"margin_ratio(symbol: str) -> MarginRatio Get margin ratio Parameters: Name Type Description Default symbol str Security symbol required Returns: Type Description MarginRatio Margin ratio Examples: :: from longbridge.openapi import TradeContext, Config config = Config.from_env() ctx = TradeContext(config) resp = ctx.margin_ratio(\"700.HK\") print(resp)","title":"margin_ratio()"},{"location":"reference_all/#longbridge.openapi.TradeContext.order_detail","text":"order_detail(order_id: str) -> OrderDetail Get order detail Parameters: Name Type Description Default order id Order id required Returns: Type Description OrderDetail Order detail Examples: :: from longbridge.openapi import TradeContext, Config config = Config.from_env() ctx = TradeContext(config) resp = ctx.order_detail(\"701276261045858304\") print(resp)","title":"order_detail()"},{"location":"reference_all/#longbridge.openapi.TradeContext.estimate_max_purchase_quantity","text":"estimate_max_purchase_quantity(symbol: str, order_type: Type[OrderType], side: Type[OrderSide], price: Optional[Decimal] = None, currency: Optional[str] = None, order_id: Optional[str] = None) -> EstimateMaxPurchaseQuantityResponse Estimating the maximum purchase quantity for Hong Kong and US stocks, warrants, and options Parameters: Name Type Description Default symbol str Security symbol required order_type Type [ OrderType ] Order type required side Type [ OrderSide ] Order side required price Optional [ Decimal ] Estimated order price, None currency Optional [ str ] Settlement currency None order_id Optional [ str ] Order ID, required when estimating the maximum purchase quantity for a modified order None Returns: Type Description EstimateMaxPurchaseQuantityResponse Response Examples: :: from longbridge.openapi import TradeContext, Config, OrderType, OrderSide config = Config.from_env() ctx = TradeContext(config) resp = ctx.estimate_max_purchase_quantity( symbol = \"700.HK\", order_type = OrderType.LO, side = OrderSide.Buy, ) print(resp)","title":"estimate_max_purchase_quantity()"},{"location":"trade_context/","text":"TradeContext Trade context Parameters: Name Type Description Default config Config Configuration object required __init__ __init__(config: Config) -> None set_on_order_changed set_on_order_changed(callback: Callable[[PushOrderChanged], None]) -> None Set order changed callback, after receiving the order changed event, it will call back to this function. subscribe subscribe(topics: List[Type[TopicType]]) -> None Subscribe Parameters: Name Type Description Default topics List [ Type [ TopicType ]] Topic list required Examples: :: from time import sleep from decimal import Decimal from longbridge.openapi import TradeContext, Config, OrderSide, OrderType, TimeInForceType, PushOrderChanged, TopicType def on_order_changed(event: PushOrderChanged): print(event) config = Config.from_env() ctx = TradeContext(config) ctx.set_on_order_changed(on_order_changed) ctx.subscribe([TopicType.Private]) resp = ctx.submit_order( side=OrderSide.Buy, symbol=\"700.HK\", order_type=OrderType.LO, submitted_price=Decimal(\"50\"), submitted_quantity=200, time_in_force=TimeInForceType.Day, remark=\"Hello from Python SDK\", ) print(resp) sleep(5) # waiting for push event unsubscribe unsubscribe(topics: List[str]) -> None Unsubscribe Parameters: Name Type Description Default topics List [ str ] Topic list required history_executions history_executions(symbol: Optional[str] = None, start_at: Optional[date] = None, end_at: Optional[date] = None) -> List[Execution] Get history executions Parameters: Name Type Description Default symbol Optional [ str ] Filter by security code, example: 700.HK , AAPL.US None start_at Optional [ date ] Start time None end_at Optional [ date ] End time None Returns: Type Description List [ Execution ] Execution list Examples: :: from datetime import datetime from longbridge.openapi import TradeContext, Config config = Config.from_env() ctx = TradeContext(config) resp = ctx.history_executions( symbol = \"700.HK\", start_at = datetime(2022, 5, 9), end_at = datetime(2022, 5, 12), ) print(resp) today_executions today_executions(symbol: Optional[str] = None, order_id: Optional[str] = None) -> List[Execution] Get today executions Parameters: Name Type Description Default symbol Optional [ str ] Filter by security code None order_id Optional [ str ] Filter by Order ID None Returns: Type Description List [ Execution ] Execution list Examples: :: from longbridge.openapi import TradeContext, Config config = Config.from_env() ctx = TradeContext(config) resp = ctx.today_executions(symbol = \"700.HK\") print(resp) history_orders history_orders(symbol: Optional[str] = None, status: Optional[List[Type[OrderStatus]]] = None, side: Optional[Type[OrderSide]] = None, market: Optional[Type[Market]] = None, start_at: Optional[date] = None, end_at: Optional[date] = None) -> List[Order] Get history orders Parameters: Name Type Description Default symbol Optional [ str ] Filter by security code None status Optional [ List [ Type [ OrderStatus ]]] Filter by order status None side Optional [ Type [ OrderSide ]] Filter by order side None market Optional [ Type [ Market ]] Filter by market type None start_at Optional [ date ] Start time None end_at Optional [ date ] End time None Returns: Type Description List [ Order ] Order list Examples: :: from datetime import datetime from longbridge.openapi import TradeContext, Config, OrderStatus, OrderSide, Market config = Config.from_env() ctx = TradeContext(config) resp = ctx.history_orders( symbol = \"700.HK\", status = [OrderStatus.Filled, OrderStatus.New], side = OrderSide.Buy, market = Market.HK, start_at = datetime(2022, 5, 9), end_at = datetime(2022, 5, 12), ) print(resp) today_orders today_orders(symbol: Optional[str] = None, status: Optional[List[Type[OrderStatus]]] = None, side: Optional[Type[OrderSide]] = None, market: Optional[Type[Market]] = None, order_id: Optional[str] = None) -> List[Order] Get today orders Parameters: Name Type Description Default symbol Optional [ str ] Filter by security code None status Optional [ List [ Type [ OrderStatus ]]] Filter by order status None side Optional [ Type [ OrderSide ]] Filter by order side None market Optional [ Type [ Market ]] Filter by market type None order_id Optional [ str ] Filter by order id None Returns: Type Description List [ Order ] Order list Examples: :: from longbridge.openapi import TradeContext, Config, OrderStatus, OrderSide, Market config = Config.from_env() ctx = TradeContext(config) resp = ctx.today_orders( symbol = \"700.HK\", status = [OrderStatus.Filled, OrderStatus.New], side = OrderSide.Buy, market = Market.HK, ) print(resp) replace_order replace_order(order_id: str, quantity: int, price: Optional[Decimal] = None, trigger_price: Optional[Decimal] = None, limit_offset: Optional[Decimal] = None, trailing_amount: Optional[Decimal] = None, trailing_percent: Optional[Decimal] = None, remark: Optional[str] = None) -> None Replace order Parameters: Name Type Description Default quantity int Replaced quantity required price Optional [ Decimal ] Replaced price None trigger_price Optional [ Decimal ] Trigger price ( LIT / MIT Order Required) None limit_offset Optional [ Decimal ] Limit offset amount ( TSLPAMT / TSLPPCT Required) None trailing_amount Optional [ Decimal ] Trailing amount ( TSLPAMT / TSMAMT Required) None trailing_percent Optional [ Decimal ] Trailing percent ( TSLPPCT / TSMAPCT Required) None remark Optional [ str ] Remark (Maximum 64 characters) None Examples: :: from decimal import Decimal from longbridge.openapi import TradeContext, Config config = Config.from_env() ctx = TradeContext(config) ctx.replace_order( order_id = \"709043056541253632\", quantity = 100, price = Decimal(\"100\"), ) submit_order submit_order(symbol: str, order_type: Type[OrderType], side: Type[OrderSide], submitted_quantity: int, time_in_force: Type[TimeInForceType], submitted_price: Optional[Decimal] = None, trigger_price: Optional[Decimal] = None, limit_offset: Optional[Decimal] = None, trailing_amount: Optional[Decimal] = None, trailing_percent: Optional[Decimal] = None, expire_date: Optional[date] = None, outside_rth: Optional[Type[OutsideRTH]] = None, remark: Optional[str] = None) -> SubmitOrderResponse Submit order Parameters: Name Type Description Default symbol str Security code required order_type Type [ OrderType ] Order type required side Type [ OrderSide ] Order Side required submitted_quantity int Submitted quantity required time_in_force Type [ TimeInForceType ] Time in force type required submitted_price Optional [ Decimal ] Submitted price None trigger_price Optional [ Decimal ] Trigger price ( LIT / MIT Required) None limit_offset Optional [ Decimal ] Limit offset amount ( TSLPAMT / TSLPPCT Required) None trailing_amount Optional [ Decimal ] Trailing amount ( TSLPAMT / TSMAMT Required) None trailing_percent Optional [ Decimal ] Trailing percent ( TSLPPCT / TSMAPCT Required) None expire_date Optional [ date ] Long term order expire date (Required when time_in_force is GoodTilDate ) None outside_rth Optional [ Type [ OutsideRTH ]] Enable or disable outside regular trading hours None remark Optional [ str ] Remark (Maximum 64 characters) None Returns: Type Description SubmitOrderResponse Response Examples: :: from decimal import Decimal from longbridge.openapi import TradeContext, Config, OrderSide, OrderType, TimeInForceType config = Config.from_env() ctx = TradeContext(config) resp = ctx.submit_order( side = OrderSide.Buy, symbol = \"700.HK\", order_type = OrderType.LO, submitted_price = Decimal(\"50\"), submitted_quantity = 200, time_in_force = TimeInForceType.Day, remark = \"Hello from Python SDK\", ) print(resp) cancel_order cancel_order(order_id: str) -> None Cancel order Parameters: Name Type Description Default order_id str Order ID required Examples: :: from longbridge.openapi import TradeContext, Config config = Config.from_env() ctx = TradeContext(config) ctx.cancel_order(\"709043056541253632\") account_balance account_balance() -> List[AccountBalance] Get account balance Returns: Type Description List [ AccountBalance ] Account list Examples: :: from longbridge.openapi import TradeContext, Config config = Config.from_env() ctx = TradeContext(config) resp = ctx.account_balance() print(resp) cash_flow cash_flow(start_at: datetime, end_at: datetime, business_type: Optional[Type[BalanceType]] = None, symbol: Optional[str] = None, page: Optional[int] = None, size: Optional[int] = None) -> List[CashFlow] Get cash flow Parameters: Name Type Description Default start_at datetime Start time required end_at datetime End time required business_type Optional [ Type [ BalanceType ]] Balance type None symbol Optional [ str ] Target security code None page Optional [ int ] Start page (Default: 1) None size Optional [ int ] Page size (Default: 50) None Returns: Type Description List [ CashFlow ] Cash flow list Examples: :: from datetime import datetime from longbridge.openapi import TradeContext, Config config = Config.from_env() ctx = TradeContext(config) resp = ctx.cash_flow( start_at = datetime(2022, 5, 9), end_at = datetime(2022, 5, 12), ) print(resp) fund_positions fund_positions(symbols: Optional[List[str]] = None) -> FundPositionsResponse Get fund positions Parameters: Name Type Description Default symbols Optional [ List [ str ]] Filter by fund codes None Returns: Type Description FundPositionsResponse Fund positions Examples: :: from longbridge.openapi import TradeContext, Config config = Config.from_env() ctx = TradeContext(config) resp = ctx.fund_positions() print(resp) stock_positions stock_positions(symbols: Optional[List[str]] = None) -> StockPositionsResponse Get stock positions Parameters: Name Type Description Default symbols Optional [ List [ str ]] Filter by stock codes None Returns: Type Description StockPositionsResponse Stock positions Examples: :: from longbridge.openapi import TradeContext, Config config = Config.from_env() ctx = TradeContext(config) resp = ctx.stock_positions() print(resp) margin_ratio margin_ratio(symbol: str) -> MarginRatio Get margin ratio Parameters: Name Type Description Default symbol str Security symbol required Returns: Type Description MarginRatio Margin ratio Examples: :: from longbridge.openapi import TradeContext, Config config = Config.from_env() ctx = TradeContext(config) resp = ctx.margin_ratio(\"700.HK\") print(resp) order_detail order_detail(order_id: str) -> OrderDetail Get order detail Parameters: Name Type Description Default order id Order id required Returns: Type Description OrderDetail Order detail Examples: :: from longbridge.openapi import TradeContext, Config config = Config.from_env() ctx = TradeContext(config) resp = ctx.order_detail(\"701276261045858304\") print(resp) estimate_max_purchase_quantity estimate_max_purchase_quantity(symbol: str, order_type: Type[OrderType], side: Type[OrderSide], price: Optional[Decimal] = None, currency: Optional[str] = None, order_id: Optional[str] = None) -> EstimateMaxPurchaseQuantityResponse Estimating the maximum purchase quantity for Hong Kong and US stocks, warrants, and options Parameters: Name Type Description Default symbol str Security symbol required order_type Type [ OrderType ] Order type required side Type [ OrderSide ] Order side required price Optional [ Decimal ] Estimated order price, None currency Optional [ str ] Settlement currency None order_id Optional [ str ] Order ID, required when estimating the maximum purchase quantity for a modified order None Returns: Type Description EstimateMaxPurchaseQuantityResponse Response Examples: :: from longbridge.openapi import TradeContext, Config, OrderType, OrderSide config = Config.from_env() ctx = TradeContext(config) resp = ctx.estimate_max_purchase_quantity( symbol = \"700.HK\", order_type = OrderType.LO, side = OrderSide.Buy, ) print(resp)","title":"TradeContext"},{"location":"trade_context/#tradecontext","text":"Trade context Parameters: Name Type Description Default config Config Configuration object required","title":"TradeContext"},{"location":"trade_context/#longbridge.openapi.TradeContext.__init__","text":"__init__(config: Config) -> None","title":"__init__()"},{"location":"trade_context/#longbridge.openapi.TradeContext.set_on_order_changed","text":"set_on_order_changed(callback: Callable[[PushOrderChanged], None]) -> None Set order changed callback, after receiving the order changed event, it will call back to this function.","title":"set_on_order_changed()"},{"location":"trade_context/#longbridge.openapi.TradeContext.subscribe","text":"subscribe(topics: List[Type[TopicType]]) -> None Subscribe Parameters: Name Type Description Default topics List [ Type [ TopicType ]] Topic list required Examples: :: from time import sleep from decimal import Decimal from longbridge.openapi import TradeContext, Config, OrderSide, OrderType, TimeInForceType, PushOrderChanged, TopicType def on_order_changed(event: PushOrderChanged): print(event) config = Config.from_env() ctx = TradeContext(config) ctx.set_on_order_changed(on_order_changed) ctx.subscribe([TopicType.Private]) resp = ctx.submit_order( side=OrderSide.Buy, symbol=\"700.HK\", order_type=OrderType.LO, submitted_price=Decimal(\"50\"), submitted_quantity=200, time_in_force=TimeInForceType.Day, remark=\"Hello from Python SDK\", ) print(resp) sleep(5) # waiting for push event","title":"subscribe()"},{"location":"trade_context/#longbridge.openapi.TradeContext.unsubscribe","text":"unsubscribe(topics: List[str]) -> None Unsubscribe Parameters: Name Type Description Default topics List [ str ] Topic list required","title":"unsubscribe()"},{"location":"trade_context/#longbridge.openapi.TradeContext.history_executions","text":"history_executions(symbol: Optional[str] = None, start_at: Optional[date] = None, end_at: Optional[date] = None) -> List[Execution] Get history executions Parameters: Name Type Description Default symbol Optional [ str ] Filter by security code, example: 700.HK , AAPL.US None start_at Optional [ date ] Start time None end_at Optional [ date ] End time None Returns: Type Description List [ Execution ] Execution list Examples: :: from datetime import datetime from longbridge.openapi import TradeContext, Config config = Config.from_env() ctx = TradeContext(config) resp = ctx.history_executions( symbol = \"700.HK\", start_at = datetime(2022, 5, 9), end_at = datetime(2022, 5, 12), ) print(resp)","title":"history_executions()"},{"location":"trade_context/#longbridge.openapi.TradeContext.today_executions","text":"today_executions(symbol: Optional[str] = None, order_id: Optional[str] = None) -> List[Execution] Get today executions Parameters: Name Type Description Default symbol Optional [ str ] Filter by security code None order_id Optional [ str ] Filter by Order ID None Returns: Type Description List [ Execution ] Execution list Examples: :: from longbridge.openapi import TradeContext, Config config = Config.from_env() ctx = TradeContext(config) resp = ctx.today_executions(symbol = \"700.HK\") print(resp)","title":"today_executions()"},{"location":"trade_context/#longbridge.openapi.TradeContext.history_orders","text":"history_orders(symbol: Optional[str] = None, status: Optional[List[Type[OrderStatus]]] = None, side: Optional[Type[OrderSide]] = None, market: Optional[Type[Market]] = None, start_at: Optional[date] = None, end_at: Optional[date] = None) -> List[Order] Get history orders Parameters: Name Type Description Default symbol Optional [ str ] Filter by security code None status Optional [ List [ Type [ OrderStatus ]]] Filter by order status None side Optional [ Type [ OrderSide ]] Filter by order side None market Optional [ Type [ Market ]] Filter by market type None start_at Optional [ date ] Start time None end_at Optional [ date ] End time None Returns: Type Description List [ Order ] Order list Examples: :: from datetime import datetime from longbridge.openapi import TradeContext, Config, OrderStatus, OrderSide, Market config = Config.from_env() ctx = TradeContext(config) resp = ctx.history_orders( symbol = \"700.HK\", status = [OrderStatus.Filled, OrderStatus.New], side = OrderSide.Buy, market = Market.HK, start_at = datetime(2022, 5, 9), end_at = datetime(2022, 5, 12), ) print(resp)","title":"history_orders()"},{"location":"trade_context/#longbridge.openapi.TradeContext.today_orders","text":"today_orders(symbol: Optional[str] = None, status: Optional[List[Type[OrderStatus]]] = None, side: Optional[Type[OrderSide]] = None, market: Optional[Type[Market]] = None, order_id: Optional[str] = None) -> List[Order] Get today orders Parameters: Name Type Description Default symbol Optional [ str ] Filter by security code None status Optional [ List [ Type [ OrderStatus ]]] Filter by order status None side Optional [ Type [ OrderSide ]] Filter by order side None market Optional [ Type [ Market ]] Filter by market type None order_id Optional [ str ] Filter by order id None Returns: Type Description List [ Order ] Order list Examples: :: from longbridge.openapi import TradeContext, Config, OrderStatus, OrderSide, Market config = Config.from_env() ctx = TradeContext(config) resp = ctx.today_orders( symbol = \"700.HK\", status = [OrderStatus.Filled, OrderStatus.New], side = OrderSide.Buy, market = Market.HK, ) print(resp)","title":"today_orders()"},{"location":"trade_context/#longbridge.openapi.TradeContext.replace_order","text":"replace_order(order_id: str, quantity: int, price: Optional[Decimal] = None, trigger_price: Optional[Decimal] = None, limit_offset: Optional[Decimal] = None, trailing_amount: Optional[Decimal] = None, trailing_percent: Optional[Decimal] = None, remark: Optional[str] = None) -> None Replace order Parameters: Name Type Description Default quantity int Replaced quantity required price Optional [ Decimal ] Replaced price None trigger_price Optional [ Decimal ] Trigger price ( LIT / MIT Order Required) None limit_offset Optional [ Decimal ] Limit offset amount ( TSLPAMT / TSLPPCT Required) None trailing_amount Optional [ Decimal ] Trailing amount ( TSLPAMT / TSMAMT Required) None trailing_percent Optional [ Decimal ] Trailing percent ( TSLPPCT / TSMAPCT Required) None remark Optional [ str ] Remark (Maximum 64 characters) None Examples: :: from decimal import Decimal from longbridge.openapi import TradeContext, Config config = Config.from_env() ctx = TradeContext(config) ctx.replace_order( order_id = \"709043056541253632\", quantity = 100, price = Decimal(\"100\"), )","title":"replace_order()"},{"location":"trade_context/#longbridge.openapi.TradeContext.submit_order","text":"submit_order(symbol: str, order_type: Type[OrderType], side: Type[OrderSide], submitted_quantity: int, time_in_force: Type[TimeInForceType], submitted_price: Optional[Decimal] = None, trigger_price: Optional[Decimal] = None, limit_offset: Optional[Decimal] = None, trailing_amount: Optional[Decimal] = None, trailing_percent: Optional[Decimal] = None, expire_date: Optional[date] = None, outside_rth: Optional[Type[OutsideRTH]] = None, remark: Optional[str] = None) -> SubmitOrderResponse Submit order Parameters: Name Type Description Default symbol str Security code required order_type Type [ OrderType ] Order type required side Type [ OrderSide ] Order Side required submitted_quantity int Submitted quantity required time_in_force Type [ TimeInForceType ] Time in force type required submitted_price Optional [ Decimal ] Submitted price None trigger_price Optional [ Decimal ] Trigger price ( LIT / MIT Required) None limit_offset Optional [ Decimal ] Limit offset amount ( TSLPAMT / TSLPPCT Required) None trailing_amount Optional [ Decimal ] Trailing amount ( TSLPAMT / TSMAMT Required) None trailing_percent Optional [ Decimal ] Trailing percent ( TSLPPCT / TSMAPCT Required) None expire_date Optional [ date ] Long term order expire date (Required when time_in_force is GoodTilDate ) None outside_rth Optional [ Type [ OutsideRTH ]] Enable or disable outside regular trading hours None remark Optional [ str ] Remark (Maximum 64 characters) None Returns: Type Description SubmitOrderResponse Response Examples: :: from decimal import Decimal from longbridge.openapi import TradeContext, Config, OrderSide, OrderType, TimeInForceType config = Config.from_env() ctx = TradeContext(config) resp = ctx.submit_order( side = OrderSide.Buy, symbol = \"700.HK\", order_type = OrderType.LO, submitted_price = Decimal(\"50\"), submitted_quantity = 200, time_in_force = TimeInForceType.Day, remark = \"Hello from Python SDK\", ) print(resp)","title":"submit_order()"},{"location":"trade_context/#longbridge.openapi.TradeContext.cancel_order","text":"cancel_order(order_id: str) -> None Cancel order Parameters: Name Type Description Default order_id str Order ID required Examples: :: from longbridge.openapi import TradeContext, Config config = Config.from_env() ctx = TradeContext(config) ctx.cancel_order(\"709043056541253632\")","title":"cancel_order()"},{"location":"trade_context/#longbridge.openapi.TradeContext.account_balance","text":"account_balance() -> List[AccountBalance] Get account balance Returns: Type Description List [ AccountBalance ] Account list Examples: :: from longbridge.openapi import TradeContext, Config config = Config.from_env() ctx = TradeContext(config) resp = ctx.account_balance() print(resp)","title":"account_balance()"},{"location":"trade_context/#longbridge.openapi.TradeContext.cash_flow","text":"cash_flow(start_at: datetime, end_at: datetime, business_type: Optional[Type[BalanceType]] = None, symbol: Optional[str] = None, page: Optional[int] = None, size: Optional[int] = None) -> List[CashFlow] Get cash flow Parameters: Name Type Description Default start_at datetime Start time required end_at datetime End time required business_type Optional [ Type [ BalanceType ]] Balance type None symbol Optional [ str ] Target security code None page Optional [ int ] Start page (Default: 1) None size Optional [ int ] Page size (Default: 50) None Returns: Type Description List [ CashFlow ] Cash flow list Examples: :: from datetime import datetime from longbridge.openapi import TradeContext, Config config = Config.from_env() ctx = TradeContext(config) resp = ctx.cash_flow( start_at = datetime(2022, 5, 9), end_at = datetime(2022, 5, 12), ) print(resp)","title":"cash_flow()"},{"location":"trade_context/#longbridge.openapi.TradeContext.fund_positions","text":"fund_positions(symbols: Optional[List[str]] = None) -> FundPositionsResponse Get fund positions Parameters: Name Type Description Default symbols Optional [ List [ str ]] Filter by fund codes None Returns: Type Description FundPositionsResponse Fund positions Examples: :: from longbridge.openapi import TradeContext, Config config = Config.from_env() ctx = TradeContext(config) resp = ctx.fund_positions() print(resp)","title":"fund_positions()"},{"location":"trade_context/#longbridge.openapi.TradeContext.stock_positions","text":"stock_positions(symbols: Optional[List[str]] = None) -> StockPositionsResponse Get stock positions Parameters: Name Type Description Default symbols Optional [ List [ str ]] Filter by stock codes None Returns: Type Description StockPositionsResponse Stock positions Examples: :: from longbridge.openapi import TradeContext, Config config = Config.from_env() ctx = TradeContext(config) resp = ctx.stock_positions() print(resp)","title":"stock_positions()"},{"location":"trade_context/#longbridge.openapi.TradeContext.margin_ratio","text":"margin_ratio(symbol: str) -> MarginRatio Get margin ratio Parameters: Name Type Description Default symbol str Security symbol required Returns: Type Description MarginRatio Margin ratio Examples: :: from longbridge.openapi import TradeContext, Config config = Config.from_env() ctx = TradeContext(config) resp = ctx.margin_ratio(\"700.HK\") print(resp)","title":"margin_ratio()"},{"location":"trade_context/#longbridge.openapi.TradeContext.order_detail","text":"order_detail(order_id: str) -> OrderDetail Get order detail Parameters: Name Type Description Default order id Order id required Returns: Type Description OrderDetail Order detail Examples: :: from longbridge.openapi import TradeContext, Config config = Config.from_env() ctx = TradeContext(config) resp = ctx.order_detail(\"701276261045858304\") print(resp)","title":"order_detail()"},{"location":"trade_context/#longbridge.openapi.TradeContext.estimate_max_purchase_quantity","text":"estimate_max_purchase_quantity(symbol: str, order_type: Type[OrderType], side: Type[OrderSide], price: Optional[Decimal] = None, currency: Optional[str] = None, order_id: Optional[str] = None) -> EstimateMaxPurchaseQuantityResponse Estimating the maximum purchase quantity for Hong Kong and US stocks, warrants, and options Parameters: Name Type Description Default symbol str Security symbol required order_type Type [ OrderType ] Order type required side Type [ OrderSide ] Order side required price Optional [ Decimal ] Estimated order price, None currency Optional [ str ] Settlement currency None order_id Optional [ str ] Order ID, required when estimating the maximum purchase quantity for a modified order None Returns: Type Description EstimateMaxPurchaseQuantityResponse Response Examples: :: from longbridge.openapi import TradeContext, Config, OrderType, OrderSide config = Config.from_env() ctx = TradeContext(config) resp = ctx.estimate_max_purchase_quantity( symbol = \"700.HK\", order_type = OrderType.LO, side = OrderSide.Buy, ) print(resp)","title":"estimate_max_purchase_quantity()"}]}