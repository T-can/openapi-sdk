name: TestCI
on:
  push:
    branches:
      - test-ci

jobs:
  build-cpp-sdk-debug:
    needs:
      - copy-cpp-headers
    strategy:
      fail-fast: true
      matrix:
        settings:
          - host: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            platform: x86_64_linux
            dylib_ext: so
          - host: windows-latest
            target: x86_64-pc-windows-msvc
            platform: x86_64_windows
          - host: macos-13
            target: x86_64-apple-darwin
            platform: x86_64_macos
            dylib_ext: dylib
          - host: macos-13
            target: aarch64-apple-darwin
            platform: aarch64_macos
            dylib_ext: dylib
    runs-on: ${{ matrix.settings.host }}
    steps:
      - uses: actions/checkout@v3
        with:
          submodules: true

      - name: Install MSBuild
        if: ${{ matrix.settings.host == 'windows-latest' }}
        uses: microsoft/setup-msbuild@v1.1

      - name: Install Rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          override: true
          components: rustfmt, clippy
          target: ${{ matrix.settings.target }}

      - name: Get CMake
        uses: lukka/get-cmake@latest

      - name: Install cargo make
        run: cargo install cargo-make

      - name: Build
        if: ${{ matrix.settings.target != 'aarch64-apple-darwin' }}
        run: |
          cargo make cmake-debug
          cargo make c
          cargo make cpp

      - name: Build
        if: ${{ matrix.settings.target == 'aarch64-apple-darwin' }}
        run: |
          cargo make cmake-debug-macos-aarch64
          cargo make cpp

      - name: Copy files
        if: ${{ matrix.settings.host == 'windows-latest' }}
        run: |
          md dist\lib\${{ matrix.settings.platform }}\debug
          copy cmake.build\x64\Debug\cargo\build\x86_64-pc-windows-msvc\longport_c.dll dist\lib\${{ matrix.settings.platform }}\debug
          copy cmake.build\x64\Debug\cargo\build\x86_64-pc-windows-msvc\longport_c.dll.lib dist\lib\${{ matrix.settings.platform }}\debug\longport_c.lib
          copy cmake.build\Debug\longport_cpp.dll dist\lib\${{ matrix.settings.platform }}\debug
          copy cmake.build\cpp\Debug\longport_cpp.lib dist\lib\${{ matrix.settings.platform }}\debug

      - name: Copy files
        if: ${{ matrix.settings.host != 'windows-latest' }}
        run: |
          mkdir -p dist/lib/${{ matrix.settings.platform }}/debug
          cp cmake.build/c/liblongport_c.${{ matrix.settings.dylib_ext }} dist/lib/${{ matrix.settings.platform }}/debug
          cp cmake.build/liblongport_cpp.${{ matrix.settings.dylib_ext }} dist/lib/${{ matrix.settings.platform }}/debug

      - name: Upload artifact
        uses: actions/upload-artifact@v2
        with:
          name: libs
          path: dist/lib

  build-cpp-sdk-release:
    needs:
      - copy-cpp-headers
    strategy:
      fail-fast: true
      matrix:
        settings:
          - host: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            platform: x86_64_linux
            dylib_ext: so
          - host: windows-latest
            target: x86_64-pc-windows-msvc
            platform: x86_64_windows
          - host: macos-13
            target: x86_64-apple-darwin
            platform: x86_64_macos
            dylib_ext: dylib
          - host: macos-13
            target: aarch64-apple-darwin
            platform: aarch64_macos
            dylib_ext: dylib
    runs-on: ${{ matrix.settings.host }}
    steps:
      - uses: actions/checkout@v3
        with:
          submodules: true

      - name: Install MSBuild
        if: ${{ matrix.settings.host == 'windows-latest' }}
        uses: microsoft/setup-msbuild@v1.1

      - name: Install Rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          override: true
          components: rustfmt, clippy
          target: ${{ matrix.settings.target }}

      - name: Get CMake
        uses: lukka/get-cmake@latest

      - name: Install cargo make
        run: cargo install cargo-make

      - name: Build
        if: ${{ matrix.settings.target != 'aarch64-apple-darwin' }}
        run: |
          cargo make cmake-release
          cargo make c-release
          cargo make cpp-release

      - name: Build
        if: ${{ matrix.settings.target == 'aarch64-apple-darwin' }}
        run: |
          cargo make cmake-release-macos-aarch64
          cargo make cpp-release

      - name: Copy files
        if: ${{ matrix.settings.host == 'windows-latest' }}
        run: |
          md dist\lib\${{ matrix.settings.platform }}\release
          copy cmake.build\x64\Release\cargo\build\x86_64-pc-windows-msvc\longport_c.dll dist\lib\${{ matrix.settings.platform }}\release
          copy cmake.build\x64\Release\cargo\build\x86_64-pc-windows-msvc\ dist\lib\${{ matrix.settings.platform }}\release\longport_c.lib
          copy cmake.build\Release\longport_cpp.dll dist\lib\${{ matrix.settings.platform }}\release
          copy cmake.build\cpp\Release\longport_cpp.lib dist\lib\${{ matrix.settings.platform }}\release

      - name: Copy files
        if: ${{ matrix.settings.host != 'windows-latest' }}
        run: |
          mkdir -p dist/lib/${{ matrix.settings.platform }}/release
          cp cmake.build/c/liblongport_c.${{ matrix.settings.dylib_ext }} dist/lib/${{ matrix.settings.platform }}/release
          cp cmake.build/liblongport_cpp.${{ matrix.settings.dylib_ext }} dist/lib/${{ matrix.settings.platform }}/release

      - name: Upload artifact
        uses: actions/upload-artifact@v2
        with:
          name: libs
          path: dist/lib
